// jancy provides a way to extend functionality of existing classes with extension namespaces.
// extension namespace provides additional methods which have access to all the members 
// of the class they extend. there are certain limitations imposed on those extension methods 
// in order to ensure that if some code runs without extension namespaces, it runs exactly the same 
// with introduction of any extension namespace(s)

//.............................................................................

class C1
{
	protected int m_x;

	construct (int x)
	{
		printf ("C1.construct (%d)\n", x);
		m_x = x;
	}

	Foo ()
	{
		printf ("C1.Foo () { m_x = %d }\n", m_x);
	}
}

extend C1
{
	Bar ()
	{
		printf ("C1 (extend).Bar () { m_x = %d }\n", m_x);
	}

	static 
	Baz ()
	{
		printf ("C1 (extend).Baz ()\n");
	}

	// int 
	// operator += (int x); // <-- error: operator methods cannot be part of extension namespace

	// virtual // <-- error: virtual methods cannot be part of extension namespace
	// Baz ();
}

int
main ()
{
	C1 c construct (100);
	c.Foo ();
	c.Bar ();  // Bar () is extension method

	C1.Baz (); // Baz () is extension static method

	return 0;
}

//.............................................................................

// system functions

int
printf (
	unsafe const thin char* pFormat,
	unsafe ...
	);

//.............................................................................
