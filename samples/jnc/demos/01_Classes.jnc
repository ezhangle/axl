//.............................................................................

class C1
{
	static int s_Table [10];

	int m_x = 10; // in-place field initialization
	int m_y = 20;

	static construct (); // static constructors / destructors

	preconstruct () // preconstructor will be called before any of the overloaded constructors
	{
		printf ("C1.preconstruct ()\n");
	}

	construct ()
	{
		printf ("C1.construct ()\n");
	}	

	construct (
		int x,
		int y
		);

	operator += (int d); // overloaded '+=' operator 
}

//.............................................................................

// implementation of member methods can be placed outside of class declaration, like in C++

C1.static construct ()
{
	printf ("C1.static construct ()\n");

	for (int i = 0; i < countof (s_Table); i++)
		s_Table [i] = i;
}

C1.construct (
	int x,
	int y
	)
{
	printf ("C1.construct (%d, %d)\n", x, y);
	m_x = x;
	m_y = y;
}

C1.operator += (int d) 
{
	printf ("C1.operator += (%d)\n", d);

	m_x += d;
	m_y += d;
}

//.............................................................................

// entry point

int 
main ()
{
	printf ("main ()\n");

	C1* p1 = new C1 (100, 200);
	p1 += 1;

	printf ("C1 = { %d, %d }\n", p1.m_x, p1.m_y);
	return 0;
}

//.............................................................................

// system functions

int
printf (
	unsafe const thin char* pFormat,
	unsafe ...
	);

//.............................................................................
