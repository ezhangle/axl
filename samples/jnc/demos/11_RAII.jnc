// jancy brings back the paradigm of RAII (resource-acquisition-is-initialization)
// classes allocated on stack are destructed upon exiting the scope 
// thus ensuring deterministic resource release

//.............................................................................

class C1
{
	int m_x;

	construct (int x)
	{
		printf ("C1.construct (%d) -- acquire stuff\n", x);
		m_x = x;
	}

	destruct ()
	{
		printf ("C1.destruct () { m_x = %d } -- release stuff\n", m_x);
	}
}

//.............................................................................

// entry point

int main ()
{
	{
	// classes are allocated on gc heap by default, so use explicit 'stack' specifier 
	stack C1 c construct (10); 

	} // C1.destruct is called

	{
	stack new C1 (20);

	} // C1.destruct is called

	return 0;
}

//.............................................................................
