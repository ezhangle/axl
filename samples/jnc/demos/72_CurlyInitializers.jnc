//.............................................................................

struct Point
{
	int m_x;
	int m_y;
	int m_z;
}

int
main ()
{
	int a [] = { 1, 2, 3 };	 // classic C-style curly-intializers

	printf ("a = { "); 

	for (int i = 0; i < countof (a); i++)
		printf ("%d, ", a [i]);

	printf ("}\n");

	int b [10] = { ,, 3, 4,,, 7 }; // can skip elements leaving them zero-initialized

	printf ("b = { "); 

	for (int i = 0; i < countof (b); i++)
		printf ("%d, ", b [i]);

	printf ("}\n");

	Point point = { 10, m_z = 30 };  // can use both index- and name-based addressing
	printf ("Point = { %d, %d, %d }\n", point.m_x, point.m_y, point.m_z);

	point = { , 200, 300 }; // can use curly-initializers in assignment operator after declaration
	printf ("Point = { %d, %d, %d }\n", point.m_x, point.m_y, point.m_z);

	Point* point2 = new Point { m_y = 2000, m_z = 3000 }; // can use curly-initializers in new operator
	printf ("pPoint = { %d, %d, %d }\n", point2.m_x, point2.m_y, point2.m_z);

	return 0;
}

//.............................................................................

// system functions

int
printf (
	unsafe thin const char* format,
	unsafe ...
	);

//.............................................................................
