// multicasts are compiler-generated classes capable of accumulating 
// function pointers and calling them at once.
// like function pointes, multicasts could be normal, 'thin' or 'weak'

//.............................................................................

int
main ()
{
	// add 2 function pointers

	multicast mc (int);
	mc += foo;
	mc += bar ~(, 1000);
	mc (5);

	// events are just special pointers to multicasts with restricted access to 
	// multicast methods 'Call', 'Set', 'Clear'

	event* pEvent (int) = mc;
	// pEvent (100); // <-- error: 'Call' is not accessible 

	// u can only add and remove handlers through 'event' pointer
	
	pEvent += baz;

	printf ("mc call #2...\n");
	mc (15);

	// removal of pointers from multicast is done differently from C#
	// this is because jancy can create dynamic closures and generate thunks when neccessary
	// so simple lookup on the argument of 'Add' is not even always possible, let alone efficient
	// therefore, 'handle-table' approach is used

	mc.Clear (); // '= null' will work also

	intptr Cookie1 = pEvent.Add (foo); // 'Add' and '+=' could be used interchangeably
	intptr Cookie2 = pEvent.Add (bar ~(, 2000));

	printf ("mc call #3...\n");
	mc (25);
	
	pEvent -= Cookie1; // 'event' pointer can be used to remove entries from multicast

	printf ("mc call #4...\n");
	mc (35);
	
	// converting from multicast to function pointer is ambiguous: should it be 'live' or 'snapshot'?
	// meaning, if after creating a function pointer we modify original multicast, should
	// function pointers see the changes or not
	// to deal with ambiguity, multicast class provides 'GetSnapshot' method
	// while converting to a function pointer implicitly yields a 'live' pointer
	
	function* p1 (int) = mc; // live by default
	function* p2 (int) = mc.GetSnapshot (); // obviously, a snapshot

	mc += foo;
	mc += baz;

	printf ("live pointer call...\n");
	p1 (45);
	
	printf ("snapshot pointer call...\n");
	p2 (55);

	return 0;
}

//.............................................................................

foo (int x)
{
	printf ("foo (%d)\n", x);
}

bar (
	int x, 
	int y	
	)
{
	printf ("bar (%d, %d)\n", x, y);
}

baz (int x)
{
	printf ("baz (%d)\n", x);
}

//.............................................................................

// system functions

int
printf (
	unsafe thin const char* format,
	unsafe ...
	);

//.............................................................................
