// autoev is a unique feature of jancy which can significally simplify UI programming.
// the idea is to automate execution of certain 'update' actions when properties change.
// imagine a complicated setting dialog with lots of relations between items, where values of 
// certain settings control visibility, availability, color, etc of other dialog items / groups of items.
// with 'autoev' approach it is possible to write a single 'constraints' block where all the 
// relations and dependencies are described in declarative style, and allow jancy runtime to 
// automatically bind and execute corresponding actions

//.............................................................................

// update functions that need to be called when bindable properties change

UpdatePurple (
	int Red, 
	int Blue,
	int Alpha
	)
{
	printf ("Purple (%x, %x, %x)\n", Red, Blue, Alpha);
}

UpdateYellow (
	int Red, 
	int Green,
	int Alpha
	)
{
	printf ("Yellow (%x, %x, %x)\n", Red, Green, Alpha);
}

UpdateCyan (
	int Green, 
	int Blue,
	int Alpha
	)
{
	printf ("Cyan (%x, %x, %x)\n", Green, Blue, Alpha);
}

//.............................................................................

// 3 bindable properties

int bindable s_Red;
int bindable s_Green;
int bindable s_Blue;

int s_Rgb; // this value will be automatically updated

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

// inside 'autoev' block developer can write expressions which describe relations & constraints.
// all the binding / unbinding to the bindable non-lvalue properties touched in the expressions 
// will be done automatically. if the required logic cannot be expressed by simple expression,
// 'onchange' statement could be used (see the next demo)

autoev 
s_ColorAutoEv (int Alpha)
{
	UpdatePurple (s_Red, s_Blue, Alpha); 
	UpdateYellow (s_Red, s_Green, Alpha);
	UpdateCyan (s_Green, s_Blue, Alpha);

	s_Rgb = (s_Red << 16) + (s_Green << 8) + s_Blue;
}

//.............................................................................

// entry point

int 
main ()
{
	// starting autoev executes all the expressions in autoev block

	s_ColorAutoEv.Start (5); // equivalent to s_ColorAutoEv (5);

	printf ("changing s_Red, s_Green, s_Blue results in automatic calls to UpdateXxx functions\n");	

	s_Red = 0xab; 
	s_Green = 0xcd;

	// s_ColorAutoEv.Stop (); // <-- uncomment to unbind onchange handlers

	s_Blue = 0xef; 

	printf ("s_Rgb = 0x%06x\n", s_Rgb);

	return 0;
}

//.............................................................................

// system functions

int
printf (
	unsafe const thin char* pFormat,
	unsafe ...
	);

//.............................................................................
