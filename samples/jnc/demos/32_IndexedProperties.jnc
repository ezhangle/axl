//.............................................................................

// simple property declaration syntax

int s_x [2];

int indexed property s_SimpleProp (unsigned i);

// here index argument is really used as integer index into array; but both type and 
// what index really means for the particular property is totally up to developer

int 
s_SimpleProp.get (unsigned i)
{
	printf ("s_SimpleProp.get (%d)\n", i);
	return s_x [i];
}

s_SimpleProp.set (
	unsigned i,
	int x
	)
{
	printf ("s_SimpleProp.set (%d, %d)\n", i, x);
	s_x [i] = x;
}

//.............................................................................

// similar property declared using full syntax

property s_Prop
{	
	int m_x [2] [2];

	// more than one index argument could be used

	int 
	get (
		unsigned i,
		unsigned j
		)
	{
		printf ("s_Prop.get (%d, %d)\n", i, j);
		return m_x [i] [j];
	}

	set (
		unsigned i,
		unsigned j,
		int x
		)
	{
		printf ("s_Prop.set (%d, %d, int %d)\n", i, j, x);
		m_x [i] [j] = x;
	}

	// setters of indexed property can be overloaded too

	set (
		unsigned i,
		unsigned j,
		double x
		)
	{
		printf ("s_Prop.set (%d, %d, double %f)\n", i, j, x);
		m_x [i] [j] = (int) x;
	}
}

//.............................................................................

int
main ()
{
	int x = s_SimpleProp [0];

	s_SimpleProp [0] = 100;
	s_SimpleProp [1] = 200;
	// s_SimpleProp [2] = 300; // <-- runtime error: out-of-range store

	// to access multi-indexed property, use the same syntax
	// as for accessing multi-dimensional array

	x = s_Prop [1] [1];
	s_Prop [0] [1] = 500;
	s_Prop [1] [0] = 1.5;

	return 0;
}

//.............................................................................

// system functions

int
printf (
	unsafe const thin char* pFormat,
	unsafe ...
	);

//.............................................................................
