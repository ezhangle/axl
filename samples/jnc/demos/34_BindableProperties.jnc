//.............................................................................

// simple property declaration syntax

int autoget bindable property g_simpleProp;

g_simpleProp.set (int x)
{
	printf ("g_simpleProp.set (%d)\n", x);
	autoget = x;

	if (x > 150)
		silent return; // 'silent return' suppresses firing 'onchange' event

	// normally, 'onchange' event fires upon return
}

//.............................................................................

// similar property declared using full syntax

bindable property g_prop
{	
	int autoget; // declaring a 'autoget' field implicitly makes property 'autoget'

	set (int x)
	{
		printf ("g_prop.set (int %d)\n", x);
		autoget = x;
	}

	set (double x)
	{
		printf ("g_prop.set (double %f)\n", x);
		autoget = (int) x;
	}
}

//.............................................................................

// bindable data: bindable property with compiler-generated getter & setter
// since getter and setter are auto-generated, the purpose of
// bindable data is purely to track data changes 

int bindable g_data;

//.............................................................................

onSimplePropChange ()
{
	printf ("g_simpleProp has changed (new value = %d)\n", g_simpleProp);
}

onPropChange ()
{
	printf ("g_prop has changed (new value = %d)\n", g_prop);
}

onDataChange ()
{
	printf ("g_data has changed (new value = %d)\n", g_data);
}

int
main ()
{
	g_simpleProp.onchange += onSimplePropChange;
	g_prop.onchange += onPropChange;
	g_data.onchange += onDataChange;

	g_simpleProp = 100;
	g_simpleProp = 200; // 'onchange' event will not fire 

	g_prop = 500;
	g_prop = 5.5;

	g_data = 1000;

	return 0;
}

//.............................................................................

// system functions

int
printf (
	unsafe thin const char* format,
	unsafe ...
	);

//.............................................................................
