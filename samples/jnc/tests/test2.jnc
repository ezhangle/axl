//.............................................................................

typedef unsigned int8  uint8_t,  uchar_t,  byte_t;
typedef unsigned int16 uint16_t, ushort_t, word_t;
typedef unsigned int32 uint32_t, ulong_t,  dword_t;
typedef unsigned int64 uint64_t, qword_t;
typedef bigendian int16 beint16_t;
typedef bigendian int32 beint32_t;
typedef bigendian int64 beint64_t;
typedef bigendian unsigned int16 beuint16_t, beushort_t, beword_t;
typedef bigendian unsigned int32 beuint32_t, beulong_t,  bedword_t;
typedef bigendian unsigned int64 beuint64_t, beqword_t;

typedef unsigned int32 size_t;

typedef const char* unsafe pchar_t;
typedef const char* pchar2_t;

//.............................................................................

int
printf (
	char* unsafe pFormat,
	unsafe ...
	);

//.............................................................................

/*

interface IFoo
{
	int m_a;
	int m_b;


	int
	FooTest (
		int x,
		int y
		);
};

class CTest: IFoo
{
	int m_c;
	int m_d;	

	int
	FooTest (
		int x,
		int y
		)
	{
		printf ("CTest { %d; %d; %d; %d; }.FooTest (%d, %d);\n", m_a, m_b, m_c, m_d, x, y);
		return 0;
	}

	int 
	FooProp.get ()
	{
		printf ("CTest.FooProp::get ()\n");
		return m_a;
	}	

	void
	FooProp.set (int x)
	{
		printf ("CTest.FooProp::set (%d)\n", x);
		m_a = x;
	}
};

*/

/*

int property GlobalPropA;

int 
GlobalPropA.get ()
{
	printf ("GlobalPropA.get ()\n");
	return 1;
}

void
GlobalPropA.set (int x)
{
	printf ("GlobalPropA.set (%d)\n", x);
}

property
{
	int 
	get ()
	{
		printf ("GlobalPropC.get ()\n");
		return 3;
	}

	void
	set (int x)
	{
		printf ("GlobalPropC.set (%d)\n", x);
	}
} GlobalPropB;

*/

typedef int FTest (int, int);
typedef int property PTest;

interface IFoo
{
	int m_a;
	
	int property FooProp;

	int
	FooTest (
		int x,
		int y
		);
};

interface IBar
{
	int m_b;
	
	int property BarProp;

	void 
	BarTest (
		int x,
		int y
		);
};

class CTest: IFoo
{
	int m_b;
	int m_c;

	int
	FooTest (
		int x,
		int y
		)
	{
		printf ("CTest {%d, %d, %d}.FooTest (%d, %d)\n", m_a, m_b, m_c, x, y);
		return 0;
	}

	int 
	FooProp.get ()
	{
		printf ("CTest {%d, %d, %d}.FoorProp.get ()\n", m_a, m_b, m_c);
		return m_a;
	}	

	void
	FooProp.set (int x)
	{
		printf ("CTest {%d, %d, %d}.FoorProp.set (%d)\n", m_a, m_b, m_c, x);
		m_a = x;
	}
};

int
foo (
	int x,
	int y
	)
{
	printf ("foo (%d, %d)\n", x, y);
	return 0;
}

/*

int
stdcall
bar (
	int x,
	int y
	)
{
	printf ("bar (%d, %d)\n", x, y);
	return 0;
}


*/

int
main ()
{
	int x = 5;

/*	int x = 1;
	switch (x)
	{
	case 1:
		printf ("hui\n");
		break;

	case 2:
		printf ("govno\n");
		break;

	case 3:
		printf ("muravei\n");
		break;
	
	default:
		printf ("kusty\n");
		break;
	} */

	PTest ppr;
	FTest pf;

/*
	ppr := GlobalPropA;
	x = ppr;
	printf ("ppr returned %d\n", x);
	ppr = 10;

	ppr := GlobalPropB;
	x = ppr;
	printf ("ppr returned %d\n", x);
	ppr = 20;
*/

	CTest t = stack new CTest;
	t.m_a = 100;
	t.m_b = 200;
	t.m_c = 300;	

	printf ("direct calls to class\n");
	x = t.FooProp;
	printf ("t.FooProp returned %d\n", x);
	t.FooProp = -100;

	pf = t.FooTest;
	pf (10, 20);

	ppr := t.FooProp;
	x = ppr;
	printf ("ppr returned %d\n", x);
	ppr = 1;
	x = ppr;
	printf ("ppr returned %d\n", x);


/*
	printf ("calls through pointers to class property\n");
	ppr := t.FooProp;
	x = ppr;
	printf ("ppr returned %d\n", x);
	ppr = 10;
*/

/*	IFoo f = t;
	IBar b = t;

	printf ("direct calls to class\n");

	t.FooTest (1, 2);
	t.BarTest (3, 4); 

	printf ("direct calls through interfaces\n");

	f.FooTest (5, 6);
	b.BarTest (7, 8); 

	printf ("calls through pointers to class functions\n");

	pf = t.FooTest;
	pf (9, 10);

	pf = t.BarTest;
	pf (11, 12);

	printf ("calls through pointers to interface functions\n");

	pf = f.FooTest;
	pf (13, 14);
	pf = b.BarTest;
	pf (15, 16);

	printf ("calls through pointers to global functions\n");

	pf = foo;
	pf (17, 18);

	pf = bar;
	pf (19, 20);
*/

/*


	t.FooTest (10, 20);
	t.BarTest (30, 40); 

	IFoo f = t;
	f.m_a = 101;
	f.FooTest (50, 60);

	IBar b = t;
	b.m_b = 201;
	b.BarTest (70, 80);
*/
	return 0;
}

//.............................................................................

