// schedulers are used to put execution of a function into proper context/environment
// good examples would be: posting a request to a worker thread, sending message to a worker window,
// calling a function with mutex held etc

//.............................................................................

class LockScheduler: jnc.Scheduler
{
	// note how schedule () has no information about target function argument signature

	override schedule (function* pf ())
	{
		printf ("lock before call...\n");
		pf ();
		printf ("unlock after call...\n");
	}
}

foo (
	int a,
	int b
	)
{
	printf ("foo (%d, %d)\n", a, b);
}

//.............................................................................

// entry point

int main ()
{
	LockScheduler scheduler;

	function* pf (
		int, 
		int
		) = foo @ scheduler; 

	// result function pointer has the same argument signature as target function
	// after passing the result function pointer as, say, completion routine,
	// developer can be sure target function will be called in proper environment
	
	// ...
	
	printf ("calling through scheduled function pointer...\n");
	pf (10, 20); // foo () will be called under lock

	return 0;
}

//.............................................................................
