// sometimes, expressions don't quite cut it when it comes to describing what has to be done
// in response to a property change: e.g. running a cycle, or executing a sequence of statements.
// also, using expressions in 'reactor' block might be 'trying-to-be-too-smart' 
// and therefore not providing enough control over which actions must be taken in response 
// to which property change. 
// 'onevent' declaration in 'reactor' block gives developer fine-graned control over building dependencies
// and at the same time frees him from manually binding/unbinding to/from events

//.............................................................................

bool bindable g_useDhcp;
unsigned int32 bindable g_ip4;
event g_onApplyIpSettings ();

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

reactor g_ipReactor ()
{
	onevent (bindingof (g_useDhcp)) ()
	{
		if (g_useDhcp)
		{		
			printf ("using DHCP, disable IP-edit\n");
		}
		else
		{
			printf (
				"using manual IP configuration (IP = %d.%d.%d.%d)\n",
				(g_ip4 & 0xff000000) >> 24,
				(g_ip4 & 0x00ff0000) >> 16,
				(g_ip4 & 0x0000ff00) >> 8,
				(g_ip4 & 0x000000ff)
				);
		}			
	}

	onevent (bindingof (g_ip4)) ()
	{
		g_useDhcp = false;
	}

	// onevent statement allows automatically binding to any events, not just 'onChanged'

	onevent g_onApplyIpSettings ()
	{
		printf ("apply IP settings...\n");
	}
}

//.............................................................................

// entry point

int main ()
{
	g_ipReactor.start ();

	g_useDhcp = true;
	g_ip4 = 0xc0a80105;
	g_onApplyIpSettings ();

	return 0;
}

//.............................................................................
