// jancy provides a way to extend functionality of existing classes with extension namespaces.
// extension namespace declares additional methods which have access to all the members 
// of the class they extend. there are certain limitations imposed on the extension methods 
// in order to ensure that if some code runs without extension namespaces, it runs exactly the same 
// with introduction of any extension namespace(s)

//.............................................................................

class C1
{
	protected int m_x;

	construct (int x)
	{
		printf ("C1.construct (%d)\n", x);
		m_x = x;
	}

	foo ()
	{
		printf ("C1.foo () { m_x = %d }\n", m_x);
	}
}

extend C1
{
	bar ()
	{
		printf ("C1 (extend).bar () { m_x = %d }\n", m_x); // extension method has access to protected data
	}

	static baz ()
	{
		printf ("C1 (extend).baz ()\n");
	}

	// construct (double x);    // <-- error: constructors cannot be part of extension namespace
	// int operator += (int x); // <-- error: operator methods cannot be part of extension namespace
	// virtual baz ();          // <-- error: virtual methods cannot be part of extension namespace
}

//.............................................................................

// entry point

int main ()
{
	C1 c construct (100);
	c.foo ();
	c.bar ();  // bar () is extension method

	C1.baz (); // baz () is static extension method

	return 0;
}

//.............................................................................
