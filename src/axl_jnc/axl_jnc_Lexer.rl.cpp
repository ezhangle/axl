
/* #line 1 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
#include "pch.h"
#include "axl_jnc_Lexer.h"

// warning C4065: switch statement contains 'default' but no 'case' labels

#pragma warning (disable: 4065)

namespace axl {
namespace jnc {

//.............................................................................


/* #line 2 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl.cpp" */
static const unsigned char _axl_jnc_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 101, 1, 102, 1, 103, 1, 
	104, 1, 105, 1, 106, 1, 107, 1, 
	108, 1, 109, 1, 110, 1, 111, 1, 
	112, 1, 113, 1, 114, 1, 115, 1, 
	116, 1, 117, 1, 118, 1, 119, 1, 
	120, 1, 121, 1, 122, 1, 123, 1, 
	124, 1, 125, 1, 126, 1, 127, 1, 
	128, 1, 129, 1, 130, 1, 132, 1, 
	133, 1, 134, 1, 135, 1, 136, 1, 
	137, 1, 138, 1, 139, 1, 140, 1, 
	141, 1, 142, 1, 143, 1, 144, 1, 
	145, 1, 146, 1, 147, 1, 148, 1, 
	149, 1, 150, 1, 151, 1, 152, 1, 
	153, 2, 0, 6, 2, 0, 124, 2, 
	0, 125, 2, 0, 126, 2, 0, 131, 
	2, 3, 12, 2, 3, 13, 2, 3, 
	14, 2, 3, 15, 2, 3, 16, 2, 
	3, 17, 2, 3, 18, 2, 3, 19, 
	2, 3, 20, 2, 3, 21, 2, 3, 
	22, 2, 3, 23, 2, 3, 24, 2, 
	3, 25, 2, 3, 26, 2, 3, 27, 
	2, 3, 28, 2, 3, 29, 2, 3, 
	30, 2, 3, 31, 2, 3, 32, 2, 
	3, 33, 2, 3, 34, 2, 3, 35, 
	2, 3, 36, 2, 3, 37, 2, 3, 
	38, 2, 3, 39, 2, 3, 40, 2, 
	3, 41, 2, 3, 42, 2, 3, 43, 
	2, 3, 44, 2, 3, 45, 2, 3, 
	46, 2, 3, 47, 2, 3, 48, 2, 
	3, 49, 2, 3, 50, 2, 3, 51, 
	2, 3, 52, 2, 3, 53, 2, 3, 
	54, 2, 3, 55, 2, 3, 56, 2, 
	3, 57, 2, 3, 58, 2, 3, 59, 
	2, 3, 60, 2, 3, 61, 2, 3, 
	62, 2, 3, 63, 2, 3, 64, 2, 
	3, 65, 2, 3, 66, 2, 3, 67, 
	2, 3, 68, 2, 3, 69, 2, 3, 
	70, 2, 3, 71, 2, 3, 72, 2, 
	3, 73, 2, 3, 74, 2, 3, 75, 
	2, 3, 76, 2, 3, 77, 2, 3, 
	78, 2, 3, 79, 2, 3, 80, 2, 
	3, 81, 2, 3, 82, 2, 3, 83, 
	2, 3, 84, 2, 3, 85, 2, 3, 
	86, 2, 3, 87, 2, 3, 88, 2, 
	3, 89, 2, 3, 90, 2, 3, 91, 
	2, 3, 92, 2, 3, 93, 2, 3, 
	94, 2, 3, 95, 2, 3, 96, 2, 
	3, 97, 2, 3, 98, 2, 3, 99, 
	2, 3, 100
};

static const short _axl_jnc_key_offsets[] = {
	0, 3, 6, 7, 9, 12, 14, 21, 
	24, 77, 80, 81, 84, 85, 86, 87, 
	89, 92, 93, 94, 96, 99, 100, 103, 
	104, 109, 111, 114, 115, 121, 122, 124, 
	125, 126, 128, 129, 130, 137, 146, 153, 
	154, 164, 172, 180, 188, 196, 204, 212, 
	220, 228, 236, 244, 252, 261, 269, 277, 
	285, 295, 304, 312, 320, 328, 336, 344, 
	352, 360, 368, 376, 384, 392, 400, 408, 
	416, 424, 432, 444, 452, 460, 468, 476, 
	484, 492, 500, 508, 516, 524, 533, 542, 
	550, 558, 566, 574, 582, 590, 598, 606, 
	614, 622, 630, 638, 646, 655, 665, 673, 
	681, 689, 697, 705, 713, 721, 729, 737, 
	745, 753, 761, 769, 777, 785, 793, 806, 
	814, 822, 830, 838, 846, 854, 862, 870, 
	878, 886, 894, 902, 914, 922, 930, 938, 
	946, 954, 962, 970, 978, 986, 994, 1002, 
	1010, 1018, 1026, 1034, 1042, 1050, 1058, 1066, 
	1074, 1082, 1090, 1099, 1108, 1116, 1124, 1132, 
	1140, 1152, 1160, 1168, 1176, 1184, 1192, 1200, 
	1209, 1217, 1225, 1233, 1241, 1249, 1257, 1265, 
	1273, 1281, 1289, 1299, 1307, 1315, 1323, 1331, 
	1339, 1347, 1355, 1363, 1371, 1379, 1387, 1395, 
	1403, 1411, 1422, 1430, 1438, 1446, 1454, 1462, 
	1471, 1479, 1487, 1495, 1503, 1511, 1519, 1527, 
	1535, 1543, 1551, 1559, 1567, 1575, 1583, 1591, 
	1599, 1610, 1618, 1626, 1634, 1642, 1650, 1658, 
	1666, 1675, 1683, 1691, 1699, 1707, 1715, 1723, 
	1731, 1739, 1747, 1756, 1765, 1773, 1781, 1789, 
	1797, 1805, 1813, 1821, 1829, 1837, 1845, 1853, 
	1861, 1869, 1879, 1887, 1895, 1903, 1911, 1919, 
	1927, 1935, 1943, 1951, 1959, 1967, 1975, 1983, 
	1991, 1999, 2010, 2018, 2028, 2036, 2044, 2052, 
	2060, 2068, 2076, 2084, 2092, 2100, 2110, 2119, 
	2127, 2135, 2143, 2151, 2159, 2167, 2175, 2183, 
	2191, 2199, 2207, 2215, 2223, 2231, 2241, 2250, 
	2259, 2267, 2275, 2283, 2291, 2299, 2307, 2315, 
	2324, 2332, 2340, 2348, 2358, 2366, 2374, 2382, 
	2391, 2399, 2407, 2416, 2424, 2432, 2440, 2448, 
	2456, 2464, 2472, 2480, 2488, 2498, 2506, 2514, 
	2522, 2530, 2538, 2546, 2554, 2562, 2570, 2578, 
	2587, 2595, 2603, 2611, 2619, 2627, 2635, 2644, 
	2652, 2660, 2668, 2676, 2684, 2686, 2690, 2696, 
	2703, 2704, 2705
};

static const char _axl_jnc_trans_keys[] = {
	10, 34, 92, 10, 39, 92, 46, 10, 
	42, 10, 42, 47, 48, 57, 34, 48, 
	57, 65, 70, 97, 102, 10, 34, 92, 
	9, 10, 13, 32, 33, 34, 36, 37, 
	38, 39, 40, 41, 42, 43, 44, 45, 
	46, 47, 48, 58, 60, 61, 62, 64, 
	69, 94, 95, 97, 98, 99, 100, 101, 
	102, 103, 104, 105, 109, 110, 111, 112, 
	114, 115, 116, 117, 118, 119, 124, 49, 
	57, 65, 90, 106, 122, 9, 13, 32, 
	61, 10, 34, 92, 10, 34, 61, 38, 
	61, 10, 39, 92, 10, 61, 43, 61, 
	45, 61, 62, 46, 42, 47, 61, 10, 
	46, 88, 120, 48, 57, 48, 57, 46, 
	48, 57, 10, 48, 57, 65, 70, 97, 
	102, 61, 60, 61, 61, 61, 61, 62, 
	61, 61, 95, 48, 57, 65, 90, 97, 
	122, 43, 45, 95, 48, 57, 65, 90, 
	97, 122, 95, 48, 57, 65, 90, 97, 
	122, 61, 95, 98, 108, 117, 48, 57, 
	65, 90, 97, 122, 95, 115, 48, 57, 
	65, 90, 97, 122, 95, 116, 48, 57, 
	65, 90, 97, 122, 95, 114, 48, 57, 
	65, 90, 97, 122, 95, 97, 48, 57, 
	65, 90, 98, 122, 95, 99, 48, 57, 
	65, 90, 97, 122, 95, 116, 48, 57, 
	65, 90, 97, 122, 95, 105, 48, 57, 
	65, 90, 97, 122, 95, 97, 48, 57, 
	65, 90, 98, 122, 95, 115, 48, 57, 
	65, 90, 97, 122, 95, 116, 48, 57, 
	65, 90, 97, 122, 95, 111, 48, 57, 
	65, 90, 97, 122, 95, 101, 103, 48, 
	57, 65, 90, 97, 122, 95, 118, 48, 
	57, 65, 90, 97, 122, 95, 101, 48, 
	57, 65, 90, 97, 122, 95, 116, 48, 
	57, 65, 90, 97, 122, 95, 105, 111, 
	114, 48, 57, 65, 90, 97, 122, 95, 
	103, 110, 48, 57, 65, 90, 97, 122, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	95, 110, 48, 57, 65, 90, 97, 122, 
	95, 100, 48, 57, 65, 90, 97, 122, 
	95, 105, 48, 57, 65, 90, 97, 122, 
	95, 97, 48, 57, 65, 90, 98, 122, 
	95, 110, 48, 57, 65, 90, 97, 122, 
	95, 100, 48, 57, 65, 90, 97, 122, 
	95, 97, 48, 57, 65, 90, 98, 122, 
	95, 98, 48, 57, 65, 90, 97, 122, 
	95, 108, 48, 57, 65, 90, 97, 122, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	95, 111, 48, 57, 65, 90, 97, 122, 
	95, 108, 48, 57, 65, 90, 97, 122, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	95, 97, 48, 57, 65, 90, 98, 122, 
	95, 107, 48, 57, 65, 90, 97, 122, 
	95, 97, 100, 104, 108, 111, 48, 57, 
	65, 90, 98, 122, 95, 115, 48, 57, 
	65, 90, 97, 122, 95, 101, 48, 57, 
	65, 90, 97, 122, 95, 101, 48, 57, 
	65, 90, 97, 122, 95, 99, 48, 57, 
	65, 90, 97, 122, 95, 108, 48, 57, 
	65, 90, 97, 122, 95, 97, 48, 57, 
	65, 90, 98, 122, 95, 114, 48, 57, 
	65, 90, 97, 122, 95, 97, 48, 57, 
	65, 90, 98, 122, 95, 115, 48, 57, 
	65, 90, 97, 122, 95, 115, 48, 57, 
	65, 90, 97, 122, 95, 110, 117, 48, 
	57, 65, 90, 97, 122, 95, 115, 116, 
	48, 57, 65, 90, 97, 122, 95, 116, 
	48, 57, 65, 90, 97, 122, 95, 114, 
	48, 57, 65, 90, 97, 122, 95, 117, 
	48, 57, 65, 90, 97, 122, 95, 99, 
	48, 57, 65, 90, 97, 122, 95, 116, 
	48, 57, 65, 90, 97, 122, 95, 105, 
	48, 57, 65, 90, 97, 122, 95, 110, 
	48, 57, 65, 90, 97, 122, 95, 117, 
	48, 57, 65, 90, 97, 122, 95, 101, 
	48, 57, 65, 90, 97, 122, 95, 110, 
	48, 57, 65, 90, 97, 122, 95, 116, 
	48, 57, 65, 90, 97, 122, 95, 111, 
	48, 57, 65, 90, 97, 122, 95, 102, 
	48, 57, 65, 90, 97, 122, 95, 101, 
	111, 48, 57, 65, 90, 97, 122, 95, 
	102, 108, 115, 48, 57, 65, 90, 97, 
	122, 95, 97, 48, 57, 65, 90, 98, 
	122, 95, 117, 48, 57, 65, 90, 97, 
	122, 95, 108, 48, 57, 65, 90, 97, 
	122, 95, 116, 48, 57, 65, 90, 97, 
	122, 95, 101, 48, 57, 65, 90, 97, 
	122, 95, 116, 48, 57, 65, 90, 97, 
	122, 95, 101, 48, 57, 65, 90, 97, 
	122, 95, 116, 48, 57, 65, 90, 97, 
	122, 95, 114, 48, 57, 65, 90, 97, 
	122, 95, 117, 48, 57, 65, 90, 97, 
	122, 95, 99, 48, 57, 65, 90, 97, 
	122, 95, 116, 48, 57, 65, 90, 97, 
	122, 95, 117, 48, 57, 65, 90, 97, 
	122, 95, 98, 48, 57, 65, 90, 97, 
	122, 95, 108, 48, 57, 65, 90, 97, 
	122, 95, 101, 48, 57, 65, 90, 97, 
	122, 43, 45, 95, 108, 110, 118, 120, 
	48, 57, 65, 90, 97, 122, 95, 115, 
	48, 57, 65, 90, 97, 122, 95, 101, 
	48, 57, 65, 90, 97, 122, 95, 117, 
	48, 57, 65, 90, 97, 122, 95, 109, 
	48, 57, 65, 90, 97, 122, 95, 99, 
	48, 57, 65, 90, 97, 122, 95, 101, 
	48, 57, 65, 90, 97, 122, 95, 110, 
	48, 57, 65, 90, 97, 122, 95, 116, 
	48, 57, 65, 90, 97, 122, 95, 116, 
	48, 57, 65, 90, 97, 122, 95, 101, 
	48, 57, 65, 90, 97, 122, 95, 110, 
	48, 57, 65, 90, 97, 122, 95, 100, 
	48, 57, 65, 90, 97, 122, 95, 97, 
	108, 111, 114, 117, 48, 57, 65, 90, 
	98, 122, 95, 108, 48, 57, 65, 90, 
	97, 122, 95, 115, 48, 57, 65, 90, 
	97, 122, 95, 101, 48, 57, 65, 90, 
	97, 122, 95, 111, 48, 57, 65, 90, 
	97, 122, 95, 97, 48, 57, 65, 90, 
	98, 122, 95, 116, 48, 57, 65, 90, 
	97, 122, 95, 114, 48, 57, 65, 90, 
	97, 122, 95, 105, 48, 57, 65, 90, 
	97, 122, 95, 101, 48, 57, 65, 90, 
	97, 122, 95, 110, 48, 57, 65, 90, 
	97, 122, 95, 100, 48, 57, 65, 90, 
	97, 122, 95, 110, 48, 57, 65, 90, 
	97, 122, 95, 99, 48, 57, 65, 90, 
	97, 122, 95, 116, 48, 57, 65, 90, 
	97, 122, 95, 105, 48, 57, 65, 90, 
	97, 122, 95, 111, 48, 57, 65, 90, 
	97, 122, 95, 110, 48, 57, 65, 90, 
	97, 122, 95, 101, 48, 57, 65, 90, 
	97, 122, 95, 116, 48, 57, 65, 90, 
	97, 122, 95, 101, 48, 57, 65, 90, 
	97, 122, 95, 97, 48, 57, 65, 90, 
	98, 122, 95, 112, 48, 57, 65, 90, 
	97, 122, 95, 102, 110, 48, 57, 65, 
	90, 97, 122, 95, 100, 116, 48, 57, 
	65, 90, 97, 122, 95, 101, 48, 57, 
	65, 90, 97, 122, 95, 120, 48, 57, 
	65, 90, 97, 122, 95, 101, 48, 57, 
	65, 90, 97, 122, 95, 100, 48, 57, 
	65, 90, 97, 122, 49, 51, 54, 56, 
	95, 112, 48, 57, 65, 90, 97, 122, 
	54, 95, 48, 57, 65, 90, 97, 122, 
	50, 95, 48, 57, 65, 90, 97, 122, 
	52, 95, 48, 57, 65, 90, 97, 122, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	95, 114, 48, 57, 65, 90, 97, 122, 
	95, 117, 48, 57, 65, 90, 97, 122, 
	95, 108, 116, 48, 57, 65, 90, 97, 
	122, 95, 116, 48, 57, 65, 90, 97, 
	122, 95, 105, 48, 57, 65, 90, 97, 
	122, 95, 99, 48, 57, 65, 90, 97, 
	122, 95, 97, 48, 57, 65, 90, 98, 
	122, 95, 115, 48, 57, 65, 90, 97, 
	122, 95, 116, 48, 57, 65, 90, 97, 
	122, 95, 97, 48, 57, 65, 90, 98, 
	122, 95, 98, 48, 57, 65, 90, 97, 
	122, 95, 108, 48, 57, 65, 90, 97, 
	122, 95, 101, 48, 57, 65, 90, 97, 
	122, 95, 97, 101, 117, 48, 57, 65, 
	90, 98, 122, 95, 109, 48, 57, 65, 
	90, 97, 122, 95, 101, 48, 57, 65, 
	90, 97, 122, 95, 115, 48, 57, 65, 
	90, 97, 122, 95, 112, 48, 57, 65, 
	90, 97, 122, 95, 97, 48, 57, 65, 
	90, 98, 122, 95, 99, 48, 57, 65, 
	90, 97, 122, 95, 101, 48, 57, 65, 
	90, 97, 122, 95, 119, 48, 57, 65, 
	90, 97, 122, 95, 108, 48, 57, 65, 
	90, 97, 122, 95, 108, 48, 57, 65, 
	90, 97, 122, 95, 97, 48, 57, 65, 
	90, 98, 122, 95, 98, 48, 57, 65, 
	90, 97, 122, 95, 108, 48, 57, 65, 
	90, 97, 122, 95, 101, 48, 57, 65, 
	90, 97, 122, 95, 98, 110, 112, 118, 
	48, 57, 65, 90, 97, 122, 95, 106, 
	48, 57, 65, 90, 97, 122, 95, 101, 
	48, 57, 65, 90, 97, 122, 95, 99, 
	48, 57, 65, 90, 97, 122, 95, 116, 
	48, 57, 65, 90, 97, 122, 95, 99, 
	48, 57, 65, 90, 97, 122, 95, 101, 
	104, 48, 57, 65, 90, 97, 122, 95, 
	97, 48, 57, 65, 90, 98, 122, 95, 
	110, 48, 57, 65, 90, 97, 122, 95, 
	103, 48, 57, 65, 90, 97, 122, 95, 
	101, 48, 57, 65, 90, 97, 122, 95, 
	101, 48, 57, 65, 90, 97, 122, 95, 
	114, 48, 57, 65, 90, 97, 122, 95, 
	97, 48, 57, 65, 90, 98, 122, 95, 
	116, 48, 57, 65, 90, 97, 122, 95, 
	111, 48, 57, 65, 90, 97, 122, 95, 
	114, 48, 57, 65, 90, 97, 122, 95, 
	101, 48, 57, 65, 90, 97, 122, 95, 
	114, 48, 57, 65, 90, 97, 122, 95, 
	114, 48, 57, 65, 90, 97, 122, 95, 
	105, 48, 57, 65, 90, 97, 122, 95, 
	100, 48, 57, 65, 90, 97, 122, 95, 
	101, 48, 57, 65, 90, 97, 122, 95, 
	97, 111, 114, 117, 48, 57, 65, 90, 
	98, 122, 95, 99, 48, 57, 65, 90, 
	97, 122, 95, 107, 48, 57, 65, 90, 
	97, 122, 95, 115, 48, 57, 65, 90, 
	97, 122, 95, 116, 48, 57, 65, 90, 
	97, 122, 95, 102, 48, 57, 65, 90, 
	97, 122, 95, 105, 48, 57, 65, 90, 
	97, 122, 95, 120, 48, 57, 65, 90, 
	97, 122, 95, 101, 111, 48, 57, 65, 
	90, 97, 122, 95, 99, 48, 57, 65, 
	90, 97, 122, 95, 111, 48, 57, 65, 
	90, 97, 122, 95, 110, 48, 57, 65, 
	90, 97, 122, 95, 115, 48, 57, 65, 
	90, 97, 122, 95, 116, 48, 57, 65, 
	90, 97, 122, 95, 114, 48, 57, 65, 
	90, 97, 122, 95, 117, 48, 57, 65, 
	90, 97, 122, 95, 99, 48, 57, 65, 
	90, 97, 122, 95, 116, 48, 57, 65, 
	90, 97, 122, 95, 112, 116, 48, 57, 
	65, 90, 97, 122, 95, 101, 118, 48, 
	57, 65, 90, 97, 122, 95, 114, 48, 
	57, 65, 90, 97, 122, 95, 116, 48, 
	57, 65, 90, 97, 122, 95, 121, 48, 
	57, 65, 90, 97, 122, 95, 97, 48, 
	57, 65, 90, 98, 122, 95, 108, 48, 
	57, 65, 90, 97, 122, 95, 117, 48, 
	57, 65, 90, 97, 122, 95, 101, 48, 
	57, 65, 90, 97, 122, 95, 101, 48, 
	57, 65, 90, 97, 122, 95, 99, 48, 
	57, 65, 90, 97, 122, 95, 116, 48, 
	57, 65, 90, 97, 122, 95, 101, 48, 
	57, 65, 90, 97, 122, 95, 100, 48, 
	57, 65, 90, 97, 122, 95, 98, 48, 
	57, 65, 90, 97, 122, 95, 99, 101, 
	108, 48, 57, 65, 90, 97, 122, 95, 
	111, 48, 57, 65, 90, 97, 122, 95, 
	110, 48, 57, 65, 90, 97, 122, 95, 
	115, 48, 57, 65, 90, 97, 122, 95, 
	116, 48, 57, 65, 90, 97, 122, 95, 
	118, 48, 57, 65, 90, 97, 122, 95, 
	101, 48, 57, 65, 90, 97, 122, 95, 
	110, 48, 57, 65, 90, 97, 122, 95, 
	116, 48, 57, 65, 90, 97, 122, 95, 
	105, 48, 57, 65, 90, 97, 122, 95, 
	99, 48, 57, 65, 90, 97, 122, 95, 
	101, 48, 57, 65, 90, 97, 122, 95, 
	116, 48, 57, 65, 90, 97, 122, 95, 
	117, 48, 57, 65, 90, 97, 122, 95, 
	114, 48, 57, 65, 90, 97, 122, 95, 
	110, 48, 57, 65, 90, 97, 122, 95, 
	101, 105, 116, 119, 48, 57, 65, 90, 
	97, 122, 95, 116, 48, 57, 65, 90, 
	97, 122, 95, 103, 108, 122, 48, 57, 
	65, 90, 97, 121, 95, 110, 48, 57, 
	65, 90, 97, 122, 95, 101, 48, 57, 
	65, 90, 97, 122, 95, 100, 48, 57, 
	65, 90, 97, 122, 95, 101, 48, 57, 
	65, 90, 97, 122, 95, 110, 48, 57, 
	65, 90, 97, 122, 95, 116, 48, 57, 
	65, 90, 97, 122, 95, 101, 48, 57, 
	65, 90, 97, 122, 95, 111, 48, 57, 
	65, 90, 97, 122, 95, 102, 48, 57, 
	65, 90, 97, 122, 95, 97, 100, 114, 
	48, 57, 65, 90, 98, 122, 95, 99, 
	116, 48, 57, 65, 90, 97, 122, 95, 
	107, 48, 57, 65, 90, 97, 122, 95, 
	105, 48, 57, 65, 90, 97, 122, 95, 
	99, 48, 57, 65, 90, 97, 122, 95, 
	99, 48, 57, 65, 90, 97, 122, 95, 
	97, 48, 57, 65, 90, 98, 122, 95, 
	108, 48, 57, 65, 90, 97, 122, 95, 
	108, 48, 57, 65, 90, 97, 122, 95, 
	117, 48, 57, 65, 90, 97, 122, 95, 
	99, 48, 57, 65, 90, 97, 122, 95, 
	116, 48, 57, 65, 90, 97, 122, 95, 
	105, 48, 57, 65, 90, 97, 122, 95, 
	116, 48, 57, 65, 90, 97, 122, 95, 
	99, 48, 57, 65, 90, 97, 122, 95, 
	104, 48, 57, 65, 90, 97, 122, 95, 
	104, 114, 121, 48, 57, 65, 90, 97, 
	122, 95, 105, 114, 48, 57, 65, 90, 
	97, 122, 95, 110, 115, 48, 57, 65, 
	90, 97, 122, 95, 101, 48, 57, 65, 
	90, 97, 122, 95, 97, 48, 57, 65, 
	90, 98, 122, 95, 100, 48, 57, 65, 
	90, 97, 122, 95, 117, 48, 57, 65, 
	90, 97, 122, 95, 101, 48, 57, 65, 
	90, 97, 122, 95, 112, 48, 57, 65, 
	90, 97, 122, 95, 101, 48, 57, 65, 
	90, 97, 122, 95, 100, 111, 48, 57, 
	65, 90, 97, 122, 95, 101, 48, 57, 
	65, 90, 97, 122, 95, 102, 48, 57, 
	65, 90, 97, 122, 95, 102, 48, 57, 
	65, 90, 97, 122, 95, 104, 110, 115, 
	48, 57, 65, 90, 97, 122, 95, 101, 
	48, 57, 65, 90, 97, 122, 95, 97, 
	48, 57, 65, 90, 98, 122, 95, 112, 
	48, 57, 65, 90, 97, 122, 95, 105, 
	115, 48, 57, 65, 90, 97, 122, 95, 
	111, 48, 57, 65, 90, 97, 122, 95, 
	110, 48, 57, 65, 90, 97, 122, 95, 
	97, 105, 48, 57, 65, 90, 98, 122, 
	95, 102, 48, 57, 65, 90, 97, 122, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	95, 103, 48, 57, 65, 90, 97, 122, 
	95, 110, 48, 57, 65, 90, 97, 122, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	95, 100, 48, 57, 65, 90, 97, 122, 
	95, 105, 48, 57, 65, 90, 97, 122, 
	95, 110, 48, 57, 65, 90, 97, 122, 
	95, 103, 48, 57, 65, 90, 97, 122, 
	95, 97, 105, 111, 48, 57, 65, 90, 
	98, 122, 95, 114, 48, 57, 65, 90, 
	97, 122, 95, 105, 48, 57, 65, 90, 
	97, 122, 95, 97, 48, 57, 65, 90, 
	98, 122, 95, 110, 48, 57, 65, 90, 
	97, 122, 95, 116, 48, 57, 65, 90, 
	97, 122, 95, 114, 48, 57, 65, 90, 
	97, 122, 95, 116, 48, 57, 65, 90, 
	97, 122, 95, 117, 48, 57, 65, 90, 
	97, 122, 95, 97, 48, 57, 65, 90, 
	98, 122, 95, 108, 48, 57, 65, 90, 
	97, 122, 95, 105, 108, 48, 57, 65, 
	90, 97, 122, 95, 100, 48, 57, 65, 
	90, 97, 122, 95, 97, 48, 57, 65, 
	90, 98, 122, 95, 116, 48, 57, 65, 
	90, 97, 122, 95, 105, 48, 57, 65, 
	90, 97, 122, 95, 108, 48, 57, 65, 
	90, 97, 122, 95, 101, 48, 57, 65, 
	90, 97, 122, 95, 101, 104, 48, 57, 
	65, 90, 97, 122, 95, 97, 48, 57, 
	65, 90, 98, 122, 95, 107, 48, 57, 
	65, 90, 97, 122, 95, 105, 48, 57, 
	65, 90, 97, 122, 95, 108, 48, 57, 
	65, 90, 97, 122, 95, 101, 48, 57, 
	65, 90, 97, 122, 61, 124, 10, 34, 
	36, 92, 40, 95, 65, 90, 97, 122, 
	95, 48, 57, 65, 90, 97, 122, 10, 
	44, 10, 34, 41, 0
};

static const char _axl_jnc_single_lengths[] = {
	3, 3, 1, 2, 3, 0, 1, 3, 
	47, 3, 1, 3, 1, 1, 1, 2, 
	3, 1, 1, 2, 3, 1, 3, 1, 
	3, 0, 1, 1, 0, 1, 2, 1, 
	1, 2, 1, 1, 1, 3, 1, 1, 
	4, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	4, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 6, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 4, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 7, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 6, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 3, 2, 2, 2, 2, 
	6, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 4, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 5, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	5, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 4, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 5, 2, 4, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 4, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 4, 3, 3, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 4, 2, 2, 2, 3, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 4, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 4, 2, 1, 
	1, 1, 3
};

static const char _axl_jnc_range_lengths[] = {
	0, 0, 0, 0, 0, 1, 3, 0, 
	3, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 3, 0, 0, 0, 
	0, 0, 0, 0, 3, 3, 3, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 0, 0, 2, 3, 
	0, 0, 0
};

static const short _axl_jnc_index_offsets[] = {
	0, 4, 8, 10, 13, 17, 19, 24, 
	28, 79, 83, 85, 89, 91, 93, 95, 
	98, 102, 104, 106, 109, 113, 115, 119, 
	121, 126, 128, 131, 133, 137, 139, 142, 
	144, 146, 149, 151, 153, 158, 165, 170, 
	172, 180, 186, 192, 198, 204, 210, 216, 
	222, 228, 234, 240, 246, 253, 259, 265, 
	271, 279, 286, 292, 298, 304, 310, 316, 
	322, 328, 334, 340, 346, 352, 358, 364, 
	370, 376, 382, 392, 398, 404, 410, 416, 
	422, 428, 434, 440, 446, 452, 459, 466, 
	472, 478, 484, 490, 496, 502, 508, 514, 
	520, 526, 532, 538, 544, 551, 559, 565, 
	571, 577, 583, 589, 595, 601, 607, 613, 
	619, 625, 631, 637, 643, 649, 655, 666, 
	672, 678, 684, 690, 696, 702, 708, 714, 
	720, 726, 732, 738, 748, 754, 760, 766, 
	772, 778, 784, 790, 796, 802, 808, 814, 
	820, 826, 832, 838, 844, 850, 856, 862, 
	868, 874, 880, 887, 894, 900, 906, 912, 
	918, 928, 934, 940, 946, 952, 958, 964, 
	971, 977, 983, 989, 995, 1001, 1007, 1013, 
	1019, 1025, 1031, 1039, 1045, 1051, 1057, 1063, 
	1069, 1075, 1081, 1087, 1093, 1099, 1105, 1111, 
	1117, 1123, 1132, 1138, 1144, 1150, 1156, 1162, 
	1169, 1175, 1181, 1187, 1193, 1199, 1205, 1211, 
	1217, 1223, 1229, 1235, 1241, 1247, 1253, 1259, 
	1265, 1274, 1280, 1286, 1292, 1298, 1304, 1310, 
	1316, 1323, 1329, 1335, 1341, 1347, 1353, 1359, 
	1365, 1371, 1377, 1384, 1391, 1397, 1403, 1409, 
	1415, 1421, 1427, 1433, 1439, 1445, 1451, 1457, 
	1463, 1469, 1477, 1483, 1489, 1495, 1501, 1507, 
	1513, 1519, 1525, 1531, 1537, 1543, 1549, 1555, 
	1561, 1567, 1576, 1582, 1590, 1596, 1602, 1608, 
	1614, 1620, 1626, 1632, 1638, 1644, 1652, 1659, 
	1665, 1671, 1677, 1683, 1689, 1695, 1701, 1707, 
	1713, 1719, 1725, 1731, 1737, 1743, 1751, 1758, 
	1765, 1771, 1777, 1783, 1789, 1795, 1801, 1807, 
	1814, 1820, 1826, 1832, 1840, 1846, 1852, 1858, 
	1865, 1871, 1877, 1884, 1890, 1896, 1902, 1908, 
	1914, 1920, 1926, 1932, 1938, 1946, 1952, 1958, 
	1964, 1970, 1976, 1982, 1988, 1994, 2000, 2006, 
	2013, 2019, 2025, 2031, 2037, 2043, 2049, 2056, 
	2062, 2068, 2074, 2080, 2086, 2089, 2094, 2099, 
	2104, 2106, 2108
};

static const short _axl_jnc_indicies[] = {
	2, 3, 4, 1, 6, 7, 8, 5, 
	10, 9, 12, 13, 11, 12, 13, 14, 
	11, 15, 0, 17, 18, 18, 18, 16, 
	19, 20, 21, 17, 23, 24, 23, 23, 
	25, 26, 27, 28, 29, 30, 31, 32, 
	33, 34, 35, 36, 37, 38, 39, 41, 
	42, 43, 44, 45, 47, 48, 46, 49, 
	50, 51, 52, 53, 54, 55, 56, 57, 
	58, 59, 60, 61, 62, 63, 64, 65, 
	66, 67, 68, 40, 46, 46, 22, 23, 
	23, 23, 69, 71, 70, 2, 3, 4, 
	1, 72, 1, 73, 70, 74, 70, 75, 
	76, 70, 6, 7, 8, 5, 77, 5, 
	78, 70, 79, 80, 70, 81, 82, 83, 
	70, 84, 70, 11, 85, 86, 70, 87, 
	85, 89, 90, 90, 40, 88, 15, 91, 
	89, 40, 88, 92, 17, 18, 18, 18, 
	93, 94, 70, 95, 96, 70, 98, 97, 
	99, 70, 100, 101, 70, 103, 102, 104, 
	70, 46, 46, 46, 46, 0, 89, 89, 
	46, 106, 46, 46, 105, 46, 106, 46, 
	46, 105, 107, 70, 46, 108, 109, 110, 
	46, 46, 46, 105, 46, 111, 46, 46, 
	46, 105, 46, 112, 46, 46, 46, 105, 
	46, 113, 46, 46, 46, 105, 46, 114, 
	46, 46, 46, 105, 46, 115, 46, 46, 
	46, 105, 46, 116, 46, 46, 46, 105, 
	46, 117, 46, 46, 46, 105, 46, 118, 
	46, 46, 46, 105, 46, 119, 46, 46, 
	46, 105, 46, 120, 46, 46, 46, 105, 
	46, 121, 46, 46, 46, 105, 46, 123, 
	124, 46, 46, 46, 122, 46, 125, 46, 
	46, 46, 105, 46, 126, 46, 46, 46, 
	105, 46, 127, 46, 46, 46, 105, 46, 
	128, 129, 130, 46, 46, 46, 105, 46, 
	131, 132, 46, 46, 46, 105, 46, 133, 
	46, 46, 46, 105, 46, 134, 46, 46, 
	46, 105, 46, 135, 46, 46, 46, 105, 
	46, 136, 46, 46, 46, 105, 46, 137, 
	46, 46, 46, 105, 46, 138, 46, 46, 
	46, 105, 46, 139, 46, 46, 46, 105, 
	46, 140, 46, 46, 46, 105, 46, 141, 
	46, 46, 46, 105, 46, 142, 46, 46, 
	46, 105, 46, 143, 46, 46, 46, 105, 
	46, 144, 46, 46, 46, 105, 46, 145, 
	46, 46, 46, 105, 46, 146, 46, 46, 
	46, 105, 46, 147, 46, 46, 46, 105, 
	46, 148, 46, 46, 46, 105, 46, 149, 
	150, 151, 152, 153, 46, 46, 46, 105, 
	46, 154, 46, 46, 46, 105, 46, 155, 
	46, 46, 46, 105, 46, 156, 46, 46, 
	46, 105, 46, 157, 46, 46, 46, 105, 
	46, 158, 46, 46, 46, 105, 46, 159, 
	46, 46, 46, 105, 46, 160, 46, 46, 
	46, 105, 46, 161, 46, 46, 46, 105, 
	46, 162, 46, 46, 46, 105, 46, 163, 
	46, 46, 46, 105, 46, 164, 165, 46, 
	46, 46, 105, 46, 166, 167, 46, 46, 
	46, 105, 46, 168, 46, 46, 46, 105, 
	46, 170, 46, 46, 46, 169, 46, 171, 
	46, 46, 46, 105, 46, 172, 46, 46, 
	46, 105, 46, 173, 46, 46, 46, 105, 
	46, 174, 46, 46, 46, 105, 46, 175, 
	46, 46, 46, 105, 46, 176, 46, 46, 
	46, 105, 46, 177, 46, 46, 46, 105, 
	46, 178, 46, 46, 46, 105, 46, 179, 
	46, 46, 46, 105, 46, 180, 46, 46, 
	46, 105, 46, 181, 46, 46, 46, 105, 
	46, 182, 183, 46, 46, 46, 105, 46, 
	184, 185, 186, 46, 46, 46, 105, 46, 
	187, 46, 46, 46, 105, 46, 188, 46, 
	46, 46, 105, 46, 189, 46, 46, 46, 
	105, 46, 190, 46, 46, 46, 105, 46, 
	191, 46, 46, 46, 105, 46, 192, 46, 
	46, 46, 105, 46, 193, 46, 46, 46, 
	105, 46, 194, 46, 46, 46, 105, 46, 
	195, 46, 46, 46, 105, 46, 196, 46, 
	46, 46, 105, 46, 197, 46, 46, 46, 
	105, 46, 198, 46, 46, 46, 105, 46, 
	200, 46, 46, 46, 199, 46, 201, 46, 
	46, 46, 105, 46, 202, 46, 46, 46, 
	105, 46, 203, 46, 46, 46, 105, 89, 
	89, 46, 204, 205, 206, 207, 106, 46, 
	46, 105, 46, 208, 46, 46, 46, 105, 
	46, 209, 46, 46, 46, 105, 46, 210, 
	46, 46, 46, 105, 46, 211, 46, 46, 
	46, 105, 46, 213, 46, 46, 46, 212, 
	46, 214, 46, 46, 46, 105, 46, 215, 
	46, 46, 46, 105, 46, 216, 46, 46, 
	46, 105, 46, 217, 46, 46, 46, 105, 
	46, 218, 46, 46, 46, 105, 46, 219, 
	46, 46, 46, 105, 46, 220, 46, 46, 
	46, 105, 46, 221, 222, 223, 224, 225, 
	46, 46, 46, 105, 46, 226, 46, 46, 
	46, 105, 46, 227, 46, 46, 46, 105, 
	46, 228, 46, 46, 46, 105, 46, 229, 
	46, 46, 46, 105, 46, 230, 46, 46, 
	46, 105, 46, 231, 46, 46, 46, 105, 
	46, 232, 46, 46, 46, 105, 46, 233, 
	46, 46, 46, 105, 46, 234, 46, 46, 
	46, 105, 46, 235, 46, 46, 46, 105, 
	46, 236, 46, 46, 46, 105, 46, 237, 
	46, 46, 46, 105, 46, 238, 46, 46, 
	46, 105, 46, 239, 46, 46, 46, 105, 
	46, 240, 46, 46, 46, 105, 46, 241, 
	46, 46, 46, 105, 46, 242, 46, 46, 
	46, 105, 46, 243, 46, 46, 46, 105, 
	46, 244, 46, 46, 46, 105, 46, 245, 
	46, 46, 46, 105, 46, 246, 46, 46, 
	46, 105, 46, 247, 46, 46, 46, 105, 
	46, 248, 249, 46, 46, 46, 105, 46, 
	250, 251, 46, 46, 46, 105, 46, 252, 
	46, 46, 46, 105, 46, 253, 46, 46, 
	46, 105, 46, 254, 46, 46, 46, 105, 
	46, 255, 46, 46, 46, 105, 257, 258, 
	259, 260, 46, 261, 46, 46, 46, 256, 
	262, 46, 46, 46, 46, 105, 263, 46, 
	46, 46, 46, 105, 264, 46, 46, 46, 
	46, 105, 46, 265, 46, 46, 46, 105, 
	46, 266, 46, 46, 46, 105, 46, 267, 
	46, 46, 46, 105, 46, 268, 269, 46, 
	46, 46, 105, 46, 270, 46, 46, 46, 
	105, 46, 271, 46, 46, 46, 105, 46, 
	272, 46, 46, 46, 105, 46, 273, 46, 
	46, 46, 105, 46, 274, 46, 46, 46, 
	105, 46, 275, 46, 46, 46, 105, 46, 
	276, 46, 46, 46, 105, 46, 277, 46, 
	46, 46, 105, 46, 278, 46, 46, 46, 
	105, 46, 279, 46, 46, 46, 105, 46, 
	280, 281, 282, 46, 46, 46, 105, 46, 
	283, 46, 46, 46, 105, 46, 284, 46, 
	46, 46, 105, 46, 285, 46, 46, 46, 
	105, 46, 286, 46, 46, 46, 105, 46, 
	287, 46, 46, 46, 105, 46, 288, 46, 
	46, 46, 105, 46, 289, 46, 46, 46, 
	105, 46, 290, 46, 46, 46, 105, 46, 
	291, 46, 46, 46, 105, 46, 292, 46, 
	46, 46, 105, 46, 294, 46, 46, 46, 
	293, 46, 295, 46, 46, 46, 105, 46, 
	296, 46, 46, 46, 105, 46, 297, 46, 
	46, 46, 105, 46, 298, 299, 300, 301, 
	46, 46, 46, 105, 46, 302, 46, 46, 
	46, 105, 46, 303, 46, 46, 46, 105, 
	46, 304, 46, 46, 46, 105, 46, 305, 
	46, 46, 46, 105, 46, 306, 46, 46, 
	46, 105, 46, 307, 308, 46, 46, 46, 
	105, 46, 309, 46, 46, 46, 105, 46, 
	310, 46, 46, 46, 105, 46, 311, 46, 
	46, 46, 105, 46, 312, 46, 46, 46, 
	105, 46, 313, 46, 46, 46, 105, 46, 
	314, 46, 46, 46, 105, 46, 315, 46, 
	46, 46, 105, 46, 316, 46, 46, 46, 
	105, 46, 317, 46, 46, 46, 105, 46, 
	318, 46, 46, 46, 105, 46, 319, 46, 
	46, 46, 105, 46, 320, 46, 46, 46, 
	105, 46, 321, 46, 46, 46, 105, 46, 
	322, 46, 46, 46, 105, 46, 323, 46, 
	46, 46, 105, 46, 324, 46, 46, 46, 
	105, 46, 325, 326, 327, 328, 46, 46, 
	46, 105, 46, 329, 46, 46, 46, 105, 
	46, 330, 46, 46, 46, 105, 46, 331, 
	46, 46, 46, 105, 46, 332, 46, 46, 
	46, 105, 46, 333, 46, 46, 46, 105, 
	46, 334, 46, 46, 46, 105, 46, 335, 
	46, 46, 46, 105, 46, 336, 337, 46, 
	46, 46, 105, 46, 338, 46, 46, 46, 
	105, 46, 339, 46, 46, 46, 105, 46, 
	340, 46, 46, 46, 105, 46, 341, 46, 
	46, 46, 105, 46, 342, 46, 46, 46, 
	105, 46, 343, 46, 46, 46, 105, 46, 
	344, 46, 46, 46, 105, 46, 345, 46, 
	46, 46, 105, 46, 346, 46, 46, 46, 
	105, 46, 347, 348, 46, 46, 46, 105, 
	46, 349, 350, 46, 46, 46, 105, 46, 
	351, 46, 46, 46, 105, 46, 352, 46, 
	46, 46, 105, 46, 353, 46, 46, 46, 
	105, 46, 354, 46, 46, 46, 105, 46, 
	355, 46, 46, 46, 105, 46, 356, 46, 
	46, 46, 105, 46, 357, 46, 46, 46, 
	105, 46, 358, 46, 46, 46, 105, 46, 
	359, 46, 46, 46, 105, 46, 360, 46, 
	46, 46, 105, 46, 361, 46, 46, 46, 
	105, 46, 362, 46, 46, 46, 105, 46, 
	363, 46, 46, 46, 105, 46, 364, 365, 
	366, 46, 46, 46, 105, 46, 367, 46, 
	46, 46, 105, 46, 368, 46, 46, 46, 
	105, 46, 369, 46, 46, 46, 105, 46, 
	370, 46, 46, 46, 105, 46, 371, 46, 
	46, 46, 105, 46, 372, 46, 46, 46, 
	105, 46, 373, 46, 46, 46, 105, 46, 
	374, 46, 46, 46, 105, 46, 375, 46, 
	46, 46, 105, 46, 376, 46, 46, 46, 
	105, 46, 377, 46, 46, 46, 105, 46, 
	378, 46, 46, 46, 105, 46, 379, 46, 
	46, 46, 105, 46, 380, 46, 46, 46, 
	105, 46, 381, 46, 46, 46, 105, 46, 
	382, 383, 384, 385, 46, 46, 46, 105, 
	46, 386, 46, 46, 46, 105, 46, 387, 
	388, 389, 46, 46, 46, 105, 46, 390, 
	46, 46, 46, 105, 46, 391, 46, 46, 
	46, 105, 46, 392, 46, 46, 46, 105, 
	46, 393, 46, 46, 46, 105, 46, 394, 
	46, 46, 46, 105, 46, 395, 46, 46, 
	46, 105, 46, 396, 46, 46, 46, 105, 
	46, 397, 46, 46, 46, 105, 46, 398, 
	46, 46, 46, 105, 46, 399, 400, 401, 
	46, 46, 46, 105, 46, 402, 403, 46, 
	46, 46, 105, 46, 404, 46, 46, 46, 
	105, 46, 405, 46, 46, 46, 105, 46, 
	406, 46, 46, 46, 105, 46, 407, 46, 
	46, 46, 105, 46, 408, 46, 46, 46, 
	105, 46, 409, 46, 46, 46, 105, 46, 
	410, 46, 46, 46, 105, 46, 411, 46, 
	46, 46, 105, 46, 412, 46, 46, 46, 
	105, 46, 413, 46, 46, 46, 105, 46, 
	414, 46, 46, 46, 105, 46, 415, 46, 
	46, 46, 105, 46, 416, 46, 46, 46, 
	105, 46, 417, 46, 46, 46, 105, 46, 
	418, 419, 420, 46, 46, 46, 105, 46, 
	421, 422, 46, 46, 46, 105, 46, 423, 
	424, 46, 46, 46, 105, 46, 425, 46, 
	46, 46, 105, 46, 426, 46, 46, 46, 
	105, 46, 427, 46, 46, 46, 105, 46, 
	428, 46, 46, 46, 105, 46, 429, 46, 
	46, 46, 105, 46, 430, 46, 46, 46, 
	105, 46, 431, 46, 46, 46, 105, 46, 
	432, 433, 46, 46, 46, 105, 46, 434, 
	46, 46, 46, 105, 46, 435, 46, 46, 
	46, 105, 46, 436, 46, 46, 46, 105, 
	46, 437, 438, 439, 46, 46, 46, 105, 
	46, 440, 46, 46, 46, 105, 46, 441, 
	46, 46, 46, 105, 46, 442, 46, 46, 
	46, 105, 46, 443, 444, 46, 46, 46, 
	105, 46, 445, 46, 46, 46, 105, 46, 
	446, 46, 46, 46, 105, 46, 447, 448, 
	46, 46, 46, 105, 46, 449, 46, 46, 
	46, 105, 46, 450, 46, 46, 46, 105, 
	46, 451, 46, 46, 46, 105, 46, 452, 
	46, 46, 46, 105, 46, 453, 46, 46, 
	46, 105, 46, 454, 46, 46, 46, 105, 
	46, 455, 46, 46, 46, 105, 46, 456, 
	46, 46, 46, 105, 46, 457, 46, 46, 
	46, 105, 46, 458, 459, 460, 46, 46, 
	46, 105, 46, 461, 46, 46, 46, 105, 
	46, 462, 46, 46, 46, 105, 46, 463, 
	46, 46, 46, 105, 46, 464, 46, 46, 
	46, 105, 46, 465, 46, 46, 46, 105, 
	46, 466, 46, 46, 46, 105, 46, 467, 
	46, 46, 46, 105, 46, 468, 46, 46, 
	46, 105, 46, 469, 46, 46, 46, 105, 
	46, 470, 46, 46, 46, 105, 46, 471, 
	472, 46, 46, 46, 105, 46, 473, 46, 
	46, 46, 105, 46, 474, 46, 46, 46, 
	105, 46, 475, 46, 46, 46, 105, 46, 
	476, 46, 46, 46, 105, 46, 477, 46, 
	46, 46, 105, 46, 478, 46, 46, 46, 
	105, 46, 479, 480, 46, 46, 46, 105, 
	46, 481, 46, 46, 46, 105, 46, 482, 
	46, 46, 46, 105, 46, 483, 46, 46, 
	46, 105, 46, 484, 46, 46, 46, 105, 
	46, 485, 46, 46, 46, 105, 486, 487, 
	70, 489, 490, 491, 492, 488, 494, 495, 
	495, 495, 493, 495, 495, 495, 495, 496, 
	493, 497, 499, 498, 500, 500, 500, 499, 
	0
};

static const short _axl_jnc_trans_targs[] = {
	8, 0, 8, 8, 12, 1, 8, 8, 
	17, 8, 8, 3, 3, 4, 8, 25, 
	8, 7, 28, 8, 8, 27, 8, 9, 
	8, 10, 11, 13, 14, 15, 16, 8, 
	8, 18, 19, 8, 20, 21, 22, 24, 
	26, 29, 30, 32, 33, 35, 36, 37, 
	39, 40, 56, 74, 100, 118, 131, 149, 
	151, 154, 166, 178, 193, 216, 260, 265, 
	293, 307, 324, 342, 348, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 2, 23, 8, 8, 
	8, 5, 6, 8, 8, 8, 8, 31, 
	8, 8, 8, 8, 8, 34, 8, 8, 
	8, 8, 38, 8, 41, 47, 50, 42, 
	43, 44, 45, 46, 36, 48, 49, 36, 
	51, 52, 8, 53, 54, 36, 55, 36, 
	57, 69, 71, 58, 64, 59, 60, 61, 
	62, 63, 36, 65, 66, 67, 68, 36, 
	70, 36, 72, 73, 36, 75, 77, 80, 
	82, 85, 76, 36, 78, 79, 36, 81, 
	36, 83, 84, 36, 86, 96, 87, 92, 
	88, 8, 89, 90, 91, 36, 93, 94, 
	95, 36, 97, 98, 99, 36, 101, 114, 
	102, 106, 109, 103, 104, 105, 36, 107, 
	108, 36, 110, 111, 112, 113, 36, 8, 
	115, 116, 117, 36, 119, 121, 124, 127, 
	120, 36, 122, 123, 8, 36, 125, 126, 
	36, 128, 129, 130, 36, 132, 135, 138, 
	139, 143, 133, 134, 36, 136, 137, 36, 
	36, 140, 141, 142, 36, 144, 145, 146, 
	147, 148, 36, 150, 36, 152, 153, 36, 
	36, 155, 156, 160, 157, 158, 159, 36, 
	8, 161, 162, 163, 36, 164, 36, 36, 
	36, 165, 36, 167, 168, 174, 169, 170, 
	171, 172, 173, 36, 175, 176, 177, 36, 
	179, 186, 187, 180, 181, 182, 183, 184, 
	185, 36, 36, 188, 189, 8, 190, 191, 
	192, 36, 194, 198, 204, 210, 195, 196, 
	197, 36, 199, 36, 200, 201, 202, 203, 
	36, 205, 206, 207, 208, 209, 36, 211, 
	212, 213, 214, 215, 36, 217, 219, 224, 
	248, 218, 36, 220, 221, 222, 223, 36, 
	225, 234, 226, 227, 228, 229, 230, 231, 
	232, 233, 36, 235, 243, 236, 239, 237, 
	238, 36, 240, 241, 242, 36, 244, 245, 
	246, 247, 36, 249, 250, 254, 258, 251, 
	252, 253, 36, 255, 256, 257, 36, 259, 
	36, 261, 262, 263, 264, 36, 266, 267, 
	277, 289, 36, 268, 271, 274, 269, 270, 
	36, 272, 273, 36, 275, 276, 36, 278, 
	282, 286, 279, 280, 36, 281, 36, 283, 
	284, 285, 36, 287, 288, 36, 290, 291, 
	292, 36, 294, 299, 301, 295, 296, 36, 
	36, 297, 298, 36, 300, 36, 302, 303, 
	304, 306, 305, 36, 36, 308, 311, 321, 
	309, 310, 36, 312, 314, 313, 36, 315, 
	317, 316, 36, 318, 319, 320, 36, 322, 
	323, 36, 325, 330, 335, 326, 327, 328, 
	329, 36, 331, 332, 333, 334, 36, 336, 
	337, 36, 338, 339, 340, 341, 36, 343, 
	345, 344, 36, 346, 347, 36, 8, 8, 
	349, 349, 349, 350, 352, 349, 349, 351, 
	349, 349, 353, 354, 353
};

static const short _axl_jnc_trans_actions[] = {
	127, 0, 135, 73, 399, 0, 132, 71, 
	396, 125, 67, 0, 1, 0, 77, 0, 
	123, 0, 0, 138, 75, 405, 85, 0, 
	141, 0, 408, 0, 0, 0, 408, 79, 
	81, 0, 0, 83, 0, 7, 7, 402, 
	402, 0, 0, 0, 0, 0, 393, 393, 
	0, 0, 0, 0, 0, 393, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 119, 121, 37, 
	107, 69, 53, 31, 59, 105, 49, 25, 
	45, 27, 47, 29, 0, 0, 51, 117, 
	109, 0, 0, 115, 113, 111, 43, 0, 
	39, 99, 55, 35, 41, 0, 101, 57, 
	65, 103, 0, 61, 0, 0, 0, 0, 
	0, 0, 0, 0, 177, 0, 0, 159, 
	0, 0, 89, 0, 0, 255, 0, 240, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 201, 0, 0, 0, 0, 237, 
	0, 267, 0, 0, 363, 0, 0, 0, 
	0, 0, 0, 375, 0, 0, 225, 0, 
	291, 0, 0, 303, 0, 0, 0, 0, 
	0, 87, 0, 0, 0, 318, 0, 0, 
	0, 366, 0, 0, 0, 345, 0, 0, 
	0, 0, 0, 0, 0, 0, 378, 0, 
	0, 339, 0, 0, 0, 0, 321, 95, 
	0, 0, 0, 285, 0, 0, 0, 0, 
	0, 354, 0, 0, 93, 294, 0, 0, 
	249, 0, 0, 0, 150, 0, 0, 0, 
	0, 0, 0, 0, 390, 0, 0, 282, 
	357, 0, 0, 0, 192, 0, 0, 0, 
	0, 0, 231, 0, 306, 0, 0, 171, 
	351, 0, 0, 0, 0, 0, 0, 243, 
	91, 0, 0, 0, 270, 0, 273, 276, 
	279, 0, 288, 0, 0, 0, 0, 0, 
	0, 0, 0, 246, 0, 0, 0, 210, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 144, 336, 0, 0, 97, 0, 0, 
	0, 204, 0, 0, 0, 0, 0, 0, 
	0, 261, 0, 381, 0, 0, 0, 0, 
	333, 0, 0, 0, 0, 0, 324, 0, 
	0, 0, 0, 0, 183, 0, 0, 0, 
	0, 0, 153, 0, 0, 0, 0, 327, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 315, 0, 0, 0, 0, 0, 
	0, 234, 0, 0, 0, 330, 0, 0, 
	0, 0, 189, 0, 0, 0, 0, 0, 
	0, 0, 207, 0, 0, 0, 252, 0, 
	186, 0, 0, 0, 0, 369, 0, 0, 
	0, 0, 309, 0, 0, 0, 0, 0, 
	195, 0, 0, 384, 0, 0, 342, 0, 
	0, 0, 0, 0, 168, 0, 162, 0, 
	0, 0, 228, 0, 0, 297, 0, 0, 
	0, 372, 0, 0, 0, 0, 0, 219, 
	312, 0, 0, 165, 0, 387, 0, 0, 
	0, 0, 0, 156, 348, 0, 0, 0, 
	0, 0, 174, 0, 0, 0, 300, 0, 
	0, 0, 222, 0, 0, 0, 198, 0, 
	0, 147, 0, 0, 0, 0, 0, 0, 
	0, 264, 0, 0, 0, 0, 180, 0, 
	0, 258, 0, 0, 0, 0, 213, 0, 
	0, 0, 216, 0, 0, 360, 63, 33, 
	15, 129, 13, 0, 0, 19, 11, 0, 
	17, 9, 21, 0, 23
};

static const short _axl_jnc_to_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	3, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 3, 0, 0, 
	0, 3, 0
};

static const short _axl_jnc_from_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	5, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 5, 0, 0, 
	0, 5, 0
};

static const short _axl_jnc_eof_trans[] = {
	1, 1, 10, 10, 10, 1, 17, 1, 
	0, 70, 71, 71, 73, 71, 71, 71, 
	71, 78, 71, 71, 71, 71, 71, 88, 
	89, 92, 89, 93, 94, 71, 71, 98, 
	71, 71, 103, 71, 1, 106, 106, 71, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 123, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	170, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 200, 106, 106, 106, 106, 106, 
	106, 106, 106, 213, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	257, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 294, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 71, 0, 494, 497, 
	494, 0, 501
};

static const int axl_jnc_start = 8;
static const int axl_jnc_first_final = 8;
static const int axl_jnc_error = -1;

static const int axl_jnc_en_lit_fmt = 349;
static const int axl_jnc_en_fmt_spec = 353;
static const int axl_jnc_en_main = 8;


/* #line 274 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */


//.............................................................................

void 
CLexer::Init ()
{
	
/* #line 1143 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl.cpp" */
	{
	cs = axl_jnc_start;
	top = 0;
	ts = 0;
	te = 0;
	act = 0;
	}

/* #line 282 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
}

bool
CLexer::Exec ()
{
	
/* #line 1150 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl.cpp" */
	{
	int _klen;
	unsigned int _trans;
	const unsigned char *_acts;
	unsigned int _nacts;
	const char *_keys;

	if ( p == pe )
		goto _test_eof;
_resume:
	_acts = _axl_jnc_actions + _axl_jnc_from_state_actions[cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 2:
/* #line 1 "NONE" */
	{ts = p;}
	break;
/* #line 1167 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl.cpp" */
		}
	}

	_keys = _axl_jnc_trans_keys + _axl_jnc_key_offsets[cs];
	_trans = _axl_jnc_index_offsets[cs];

	_klen = _axl_jnc_single_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( (*p) < *_mid )
				_upper = _mid - 1;
			else if ( (*p) > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (unsigned int)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _axl_jnc_range_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( (*p) < _mid[0] )
				_upper = _mid - 2;
			else if ( (*p) > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += (unsigned int)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	_trans = _axl_jnc_indicies[_trans];
_eof_trans:
	cs = _axl_jnc_trans_targs[_trans];

	if ( _axl_jnc_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _axl_jnc_actions + _axl_jnc_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 0:
/* #line 44 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{ NewLine (p + 1); }
	break;
	case 3:
/* #line 1 "NONE" */
	{te = p+1;}
	break;
	case 4:
/* #line 56 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;}
	break;
	case 5:
/* #line 58 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateFmtLiteralToken (EToken_FmtLiteral); m_ParenthesesLevelStack.Append (1); {
	stack = PrePush ();
{stack[top++] = cs; cs = 8; goto _again;}} }}
	break;
	case 6:
/* #line 59 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateFmtLiteralToken (EToken_Literal); {cs = stack[--top]; {
	PostPop ();
}goto _again;} }}
	break;
	case 7:
/* #line 60 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;}
	break;
	case 8:
/* #line 57 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateFmtSimpleIdentifierToken (); }}
	break;
	case 9:
/* #line 60 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;}
	break;
	case 10:
/* #line 67 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ ASSERT (false); {cs = stack[--top]; {
	PostPop ();
}goto _again;} }}
	break;
	case 11:
/* #line 66 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateFmtSpecifierToken (); {cs = stack[--top]; {
	PostPop ();
}goto _again;} }}
	break;
	case 12:
/* #line 83 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 8;}
	break;
	case 13:
/* #line 84 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 9;}
	break;
	case 14:
/* #line 85 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 10;}
	break;
	case 15:
/* #line 86 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 11;}
	break;
	case 16:
/* #line 92 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 12;}
	break;
	case 17:
/* #line 93 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 13;}
	break;
	case 18:
/* #line 94 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 14;}
	break;
	case 19:
/* #line 95 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 15;}
	break;
	case 20:
/* #line 96 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 16;}
	break;
	case 21:
/* #line 97 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 17;}
	break;
	case 22:
/* #line 98 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 18;}
	break;
	case 23:
/* #line 99 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 19;}
	break;
	case 24:
/* #line 100 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 20;}
	break;
	case 25:
/* #line 101 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 21;}
	break;
	case 26:
/* #line 107 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 22;}
	break;
	case 27:
/* #line 108 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 23;}
	break;
	case 28:
/* #line 109 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 24;}
	break;
	case 29:
/* #line 115 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 25;}
	break;
	case 30:
/* #line 116 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 26;}
	break;
	case 31:
/* #line 117 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 27;}
	break;
	case 32:
/* #line 118 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 28;}
	break;
	case 33:
/* #line 120 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 30;}
	break;
	case 34:
/* #line 121 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 31;}
	break;
	case 35:
/* #line 122 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 32;}
	break;
	case 36:
/* #line 123 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 33;}
	break;
	case 37:
/* #line 124 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 34;}
	break;
	case 38:
/* #line 125 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 35;}
	break;
	case 39:
/* #line 126 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 36;}
	break;
	case 40:
/* #line 127 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 37;}
	break;
	case 41:
/* #line 128 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 38;}
	break;
	case 42:
/* #line 129 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 39;}
	break;
	case 43:
/* #line 130 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 40;}
	break;
	case 44:
/* #line 131 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 41;}
	break;
	case 45:
/* #line 132 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 42;}
	break;
	case 46:
/* #line 133 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 43;}
	break;
	case 47:
/* #line 134 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 44;}
	break;
	case 48:
/* #line 135 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 45;}
	break;
	case 49:
/* #line 136 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 46;}
	break;
	case 50:
/* #line 143 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 48;}
	break;
	case 51:
/* #line 144 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 49;}
	break;
	case 52:
/* #line 145 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 50;}
	break;
	case 53:
/* #line 146 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 51;}
	break;
	case 54:
/* #line 147 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 52;}
	break;
	case 55:
/* #line 148 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 53;}
	break;
	case 56:
/* #line 149 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 54;}
	break;
	case 57:
/* #line 150 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 55;}
	break;
	case 58:
/* #line 151 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 56;}
	break;
	case 59:
/* #line 152 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 57;}
	break;
	case 60:
/* #line 154 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 59;}
	break;
	case 61:
/* #line 155 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 60;}
	break;
	case 62:
/* #line 162 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 62;}
	break;
	case 63:
/* #line 163 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 63;}
	break;
	case 64:
/* #line 164 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 64;}
	break;
	case 65:
/* #line 165 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 65;}
	break;
	case 66:
/* #line 171 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 66;}
	break;
	case 67:
/* #line 172 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 67;}
	break;
	case 68:
/* #line 173 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 68;}
	break;
	case 69:
/* #line 174 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 69;}
	break;
	case 70:
/* #line 175 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 70;}
	break;
	case 71:
/* #line 176 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 71;}
	break;
	case 72:
/* #line 177 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 72;}
	break;
	case 73:
/* #line 178 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 73;}
	break;
	case 74:
/* #line 179 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 74;}
	break;
	case 75:
/* #line 180 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 75;}
	break;
	case 76:
/* #line 186 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 76;}
	break;
	case 77:
/* #line 187 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 77;}
	break;
	case 78:
/* #line 188 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 78;}
	break;
	case 79:
/* #line 189 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 79;}
	break;
	case 80:
/* #line 190 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 80;}
	break;
	case 81:
/* #line 196 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 81;}
	break;
	case 82:
/* #line 197 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 82;}
	break;
	case 83:
/* #line 198 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 83;}
	break;
	case 84:
/* #line 199 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 84;}
	break;
	case 85:
/* #line 201 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 86;}
	break;
	case 86:
/* #line 202 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 87;}
	break;
	case 87:
/* #line 203 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 88;}
	break;
	case 88:
/* #line 204 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 89;}
	break;
	case 89:
/* #line 205 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 90;}
	break;
	case 90:
/* #line 206 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 91;}
	break;
	case 91:
/* #line 207 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 92;}
	break;
	case 92:
/* #line 208 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 93;}
	break;
	case 93:
/* #line 214 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 94;}
	break;
	case 94:
/* #line 215 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 95;}
	break;
	case 95:
/* #line 253 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 122;}
	break;
	case 96:
/* #line 254 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 123;}
	break;
	case 97:
/* #line 255 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 124;}
	break;
	case 98:
/* #line 256 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 125;}
	break;
	case 99:
/* #line 258 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 127;}
	break;
	case 100:
/* #line 270 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 135;}
	break;
	case 101:
/* #line 222 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Inc); }}
	break;
	case 102:
/* #line 223 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Dec); }}
	break;
	case 103:
/* #line 224 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Ptr); }}
	break;
	case 104:
/* #line 227 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_LogAnd); }}
	break;
	case 105:
/* #line 228 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_LogOr); }}
	break;
	case 106:
/* #line 229 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Eq); }}
	break;
	case 107:
/* #line 230 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Ne); }}
	break;
	case 108:
/* #line 231 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Le); }}
	break;
	case 109:
/* #line 232 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Ge); }}
	break;
	case 110:
/* #line 233 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_RefAssign); }}
	break;
	case 111:
/* #line 234 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_AddAssign); }}
	break;
	case 112:
/* #line 235 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_SubAssign); }}
	break;
	case 113:
/* #line 236 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_MulAssign); }}
	break;
	case 114:
/* #line 237 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_DivAssign); }}
	break;
	case 115:
/* #line 238 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_ModAssign); }}
	break;
	case 116:
/* #line 239 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_ShlAssign); }}
	break;
	case 117:
/* #line 240 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_ShrAssign); }}
	break;
	case 118:
/* #line 241 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_AndAssign); }}
	break;
	case 119:
/* #line 242 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_XorAssign); }}
	break;
	case 120:
/* #line 243 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_OrAssign); }}
	break;
	case 121:
/* #line 244 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_AtAssign); }}
	break;
	case 122:
/* #line 245 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Ellipsis); }}
	break;
	case 123:
/* #line 247 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ PreCreateFmtLiteralToken (); {
	stack = PrePush ();
{stack[top++] = cs; cs = 349; goto _again;}} }}
	break;
	case 124:
/* #line 254 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateCharToken (EToken_Integer); }}
	break;
	case 125:
/* #line 255 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateStringToken (EToken_Literal, 1, 1, true); }}
	break;
	case 126:
/* #line 258 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateHexLiteralToken (); }}
	break;
	case 127:
/* #line 263 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;}
	break;
	case 128:
/* #line 265 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ OnLeftParentheses (); }}
	break;
	case 129:
/* #line 266 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ if (!OnRightParentheses ()) {cs = stack[--top]; {
	PostPop ();
}goto _again;} }}
	break;
	case 130:
/* #line 267 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ if (!OnComma ()) {
	stack = PrePush ();
{stack[top++] = cs; cs = 353; goto _again;}} }}
	break;
	case 131:
/* #line 269 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;}
	break;
	case 132:
/* #line 270 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (ts [0]); }}
	break;
	case 133:
/* #line 119 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateToken (EToken_Const); }}
	break;
	case 134:
/* #line 142 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateToken (EToken_Auto); }}
	break;
	case 135:
/* #line 153 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateToken (EToken_Int); }}
	break;
	case 136:
/* #line 161 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateToken (EToken_Enum); }}
	break;
	case 137:
/* #line 200 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateToken (EToken_Do); }}
	break;
	case 138:
/* #line 216 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateToken (EToken_Null); }}
	break;
	case 139:
/* #line 225 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateToken (EToken_Shl); }}
	break;
	case 140:
/* #line 226 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateToken (EToken_Shr); }}
	break;
	case 141:
/* #line 253 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateStringToken (EToken_Identifier); }}
	break;
	case 142:
/* #line 254 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateCharToken (EToken_Integer); }}
	break;
	case 143:
/* #line 255 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateStringToken (EToken_Literal, 1, 1, true); }}
	break;
	case 144:
/* #line 256 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateIntegerToken (10); }}
	break;
	case 145:
/* #line 257 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateIntegerToken (16, 2); }}
	break;
	case 146:
/* #line 258 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateHexLiteralToken (); }}
	break;
	case 147:
/* #line 260 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateFpToken (); }}
	break;
	case 148:
/* #line 262 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;}
	break;
	case 149:
/* #line 269 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;}
	break;
	case 150:
/* #line 270 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateToken (ts [0]); }}
	break;
	case 151:
/* #line 256 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{{p = ((te))-1;}{ CreateIntegerToken (10); }}
	break;
	case 152:
/* #line 270 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{{p = ((te))-1;}{ CreateToken (ts [0]); }}
	break;
	case 153:
/* #line 1 "NONE" */
	{	switch( act ) {
	case 8:
	{{p = ((te))-1;} CreateToken (EToken_Namespace); }
	break;
	case 9:
	{{p = ((te))-1;} CreateToken (EToken_Using); }
	break;
	case 10:
	{{p = ((te))-1;} CreateToken (EToken_Extend); }
	break;
	case 11:
	{{p = ((te))-1;} CreateToken (EToken_Pack); }
	break;
	case 12:
	{{p = ((te))-1;} CreateToken (EToken_Typedef); }
	break;
	case 13:
	{{p = ((te))-1;} CreateToken (EToken_Alias); }
	break;
	case 14:
	{{p = ((te))-1;} CreateToken (EToken_Static); }
	break;
	case 15:
	{{p = ((te))-1;} CreateToken (EToken_Thread); }
	break;
	case 16:
	{{p = ((te))-1;} CreateToken (EToken_Stack); }
	break;
	case 17:
	{{p = ((te))-1;} CreateToken (EToken_Heap); }
	break;
	case 18:
	{{p = ((te))-1;} CreateToken (EToken_UHeap); }
	break;
	case 19:
	{{p = ((te))-1;} CreateToken (EToken_Abstract); }
	break;
	case 20:
	{{p = ((te))-1;} CreateToken (EToken_Virtual); }
	break;
	case 21:
	{{p = ((te))-1;} CreateToken (EToken_Override); }
	break;
	case 22:
	{{p = ((te))-1;} CreateToken (EToken_Public); }
	break;
	case 23:
	{{p = ((te))-1;} CreateToken (EToken_Protected); }
	break;
	case 24:
	{{p = ((te))-1;} CreateToken (EToken_Friend); }
	break;
	case 25:
	{{p = ((te))-1;} CreateToken (EToken_Signed); }
	break;
	case 26:
	{{p = ((te))-1;} CreateToken (EToken_Unsigned); }
	break;
	case 27:
	{{p = ((te))-1;} CreateToken (EToken_BigEndian); }
	break;
	case 28:
	{{p = ((te))-1;} CreateToken (EToken_Nullable); }
	break;
	case 30:
	{{p = ((te))-1;} CreateToken (EToken_PubConst); }
	break;
	case 31:
	{{p = ((te))-1;} CreateToken (EToken_Mutable); }
	break;
	case 32:
	{{p = ((te))-1;} CreateToken (EToken_Volatile); }
	break;
	case 33:
	{{p = ((te))-1;} CreateToken (EToken_Weak); }
	break;
	case 34:
	{{p = ((te))-1;} CreateToken (EToken_Thin); }
	break;
	case 35:
	{{p = ((te))-1;} CreateToken (EToken_Unsafe); }
	break;
	case 36:
	{{p = ((te))-1;} CreateToken (EToken_Cdecl); }
	break;
	case 37:
	{{p = ((te))-1;} CreateToken (EToken_Stdcall); }
	break;
	case 38:
	{{p = ((te))-1;} CreateToken (EToken_Function); }
	break;
	case 39:
	{{p = ((te))-1;} CreateToken (EToken_Property); }
	break;
	case 40:
	{{p = ((te))-1;} CreateToken (EToken_Bindable); }
	break;
	case 41:
	{{p = ((te))-1;} CreateToken (EToken_AutoGet); }
	break;
	case 42:
	{{p = ((te))-1;} CreateToken (EToken_Indexed); }
	break;
	case 43:
	{{p = ((te))-1;} CreateToken (EToken_Multicast); }
	break;
	case 44:
	{{p = ((te))-1;} CreateToken (EToken_Event); }
	break;
	case 45:
	{{p = ((te))-1;} CreateToken (EToken_PubEvent); }
	break;
	case 46:
	{{p = ((te))-1;} CreateToken (EToken_AutoEv); }
	break;
	case 48:
	{{p = ((te))-1;} CreateToken (EToken_Void); }
	break;
	case 49:
	{{p = ((te))-1;} CreateToken (EToken_Object); }
	break;
	case 50:
	{{p = ((te))-1;} CreateToken (EToken_Variant); }
	break;
	case 51:
	{{p = ((te))-1;} CreateToken (EToken_Bool); }
	break;
	case 52:
	{{p = ((te))-1;} CreateToken (EToken_Int8); }
	break;
	case 53:
	{{p = ((te))-1;} CreateToken (EToken_Int16); }
	break;
	case 54:
	{{p = ((te))-1;} CreateToken (EToken_Int32); }
	break;
	case 55:
	{{p = ((te))-1;} CreateToken (EToken_Int64); }
	break;
	case 56:
	{{p = ((te))-1;} CreateToken (EToken_Float); }
	break;
	case 57:
	{{p = ((te))-1;} CreateToken (EToken_Double); }
	break;
	case 59:
	{{p = ((te))-1;} CreateToken (EToken_IntPtr); }
	break;
	case 60:
	{{p = ((te))-1;} CreateToken (EToken_Char); }
	break;
	case 62:
	{{p = ((te))-1;} CreateToken (EToken_EnumC); }
	break;
	case 63:
	{{p = ((te))-1;} CreateToken (EToken_Struct); }
	break;
	case 64:
	{{p = ((te))-1;} CreateToken (EToken_Union); }
	break;
	case 65:
	{{p = ((te))-1;} CreateToken (EToken_Class); }
	break;
	case 66:
	{{p = ((te))-1;} CreateToken (EToken_Get); }
	break;
	case 67:
	{{p = ((te))-1;} CreateToken (EToken_Set); }
	break;
	case 68:
	{{p = ((te))-1;} CreateToken (EToken_This); }
	break;
	case 69:
	{{p = ((te))-1;} CreateToken (EToken_PreConstruct); }
	break;
	case 70:
	{{p = ((te))-1;} CreateToken (EToken_Construct); }
	break;
	case 71:
	{{p = ((te))-1;} CreateToken (EToken_Destruct); }
	break;
	case 72:
	{{p = ((te))-1;} CreateToken (EToken_Operator); }
	break;
	case 73:
	{{p = ((te))-1;} CreateToken (EToken_Postfix); }
	break;
	case 74:
	{{p = ((te))-1;} CreateToken (EToken_PropValue); }
	break;
	case 75:
	{{p = ((te))-1;} CreateToken (EToken_OnChange); }
	break;
	case 76:
	{{p = ((te))-1;} CreateToken (EToken_New); }
	break;
	case 77:
	{{p = ((te))-1;} CreateToken (EToken_Delete); }
	break;
	case 78:
	{{p = ((te))-1;} CreateToken (EToken_SizeOf); }
	break;
	case 79:
	{{p = ((te))-1;} CreateToken (EToken_CountOf); }
	break;
	case 80:
	{{p = ((te))-1;} CreateToken (EToken_TypeOf); }
	break;
	case 81:
	{{p = ((te))-1;} CreateToken (EToken_If); }
	break;
	case 82:
	{{p = ((te))-1;} CreateToken (EToken_Else); }
	break;
	case 83:
	{{p = ((te))-1;} CreateToken (EToken_For); }
	break;
	case 84:
	{{p = ((te))-1;} CreateToken (EToken_While); }
	break;
	case 86:
	{{p = ((te))-1;} CreateToken (EToken_Break); }
	break;
	case 87:
	{{p = ((te))-1;} CreateToken (EToken_Continue); }
	break;
	case 88:
	{{p = ((te))-1;} CreateToken (EToken_Return); }
	break;
	case 89:
	{{p = ((te))-1;} CreateToken (EToken_Switch); }
	break;
	case 90:
	{{p = ((te))-1;} CreateToken (EToken_Case); }
	break;
	case 91:
	{{p = ((te))-1;} CreateToken (EToken_Default); }
	break;
	case 92:
	{{p = ((te))-1;} CreateToken (EToken_Once); }
	break;
	case 93:
	{{p = ((te))-1;} CreateToken (EToken_Silent); }
	break;
	case 94:
	{{p = ((te))-1;} CreateToken (EToken_True); }
	break;
	case 95:
	{{p = ((te))-1;} CreateToken (EToken_False); }
	break;
	case 122:
	{{p = ((te))-1;} CreateStringToken (EToken_Identifier); }
	break;
	case 123:
	{{p = ((te))-1;} CreateCharToken (EToken_Integer); }
	break;
	case 124:
	{{p = ((te))-1;} CreateStringToken (EToken_Literal, 1, 1, true); }
	break;
	case 125:
	{{p = ((te))-1;} CreateIntegerToken (10); }
	break;
	case 127:
	{{p = ((te))-1;} CreateHexLiteralToken (); }
	break;
	case 135:
	{{p = ((te))-1;} CreateToken (ts [0]); }
	break;
	}
	}
	break;
/* #line 1971 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl.cpp" */
		}
	}

_again:
	_acts = _axl_jnc_actions + _axl_jnc_to_state_actions[cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 1:
/* #line 1 "NONE" */
	{ts = 0;}
	break;
/* #line 1982 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl.cpp" */
		}
	}

	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	if ( _axl_jnc_eof_trans[cs] > 0 ) {
		_trans = _axl_jnc_eof_trans[cs] - 1;
		goto _eof_trans;
	}
	}

	}

/* #line 288 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */

	bool Result = cs != axl_jnc_error;
	if (!Result)
	{
		CToken* pToken = CreateToken (EToken_Error);
		pToken->m_Data.m_Error.CreateStringError ("lexer error");
	}

	return Result;
}

//.............................................................................

} // namespace jnc {
} // namespace axl {


