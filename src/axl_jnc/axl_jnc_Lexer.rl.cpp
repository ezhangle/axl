
/* #line 1 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
#include "pch.h"
#include "axl_jnc_Lexer.h"

// warning C4065: switch statement contains 'default' but no 'case' labels

#pragma warning (disable: 4065)

namespace axl {
namespace jnc {

//.............................................................................


/* #line 2 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl.cpp" */
static const unsigned char _axl_jnc_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 99, 1, 100, 1, 101, 1, 
	102, 1, 103, 1, 104, 1, 105, 1, 
	106, 1, 107, 1, 108, 1, 109, 1, 
	110, 1, 111, 1, 112, 1, 113, 1, 
	114, 1, 115, 1, 116, 1, 117, 1, 
	118, 1, 119, 1, 120, 1, 121, 1, 
	122, 1, 123, 1, 124, 1, 125, 1, 
	126, 1, 127, 1, 129, 1, 130, 1, 
	131, 1, 132, 1, 133, 1, 134, 1, 
	135, 1, 136, 1, 137, 1, 138, 1, 
	139, 1, 140, 1, 141, 1, 142, 1, 
	143, 1, 144, 1, 145, 1, 146, 1, 
	147, 1, 148, 1, 149, 1, 150, 1, 
	151, 2, 0, 6, 2, 0, 122, 2, 
	0, 123, 2, 0, 124, 2, 0, 128, 
	2, 3, 12, 2, 3, 13, 2, 3, 
	14, 2, 3, 15, 2, 3, 16, 2, 
	3, 17, 2, 3, 18, 2, 3, 19, 
	2, 3, 20, 2, 3, 21, 2, 3, 
	22, 2, 3, 23, 2, 3, 24, 2, 
	3, 25, 2, 3, 26, 2, 3, 27, 
	2, 3, 28, 2, 3, 29, 2, 3, 
	30, 2, 3, 31, 2, 3, 32, 2, 
	3, 33, 2, 3, 34, 2, 3, 35, 
	2, 3, 36, 2, 3, 37, 2, 3, 
	38, 2, 3, 39, 2, 3, 40, 2, 
	3, 41, 2, 3, 42, 2, 3, 43, 
	2, 3, 44, 2, 3, 45, 2, 3, 
	46, 2, 3, 47, 2, 3, 48, 2, 
	3, 49, 2, 3, 50, 2, 3, 51, 
	2, 3, 52, 2, 3, 53, 2, 3, 
	54, 2, 3, 55, 2, 3, 56, 2, 
	3, 57, 2, 3, 58, 2, 3, 59, 
	2, 3, 60, 2, 3, 61, 2, 3, 
	62, 2, 3, 63, 2, 3, 64, 2, 
	3, 65, 2, 3, 66, 2, 3, 67, 
	2, 3, 68, 2, 3, 69, 2, 3, 
	70, 2, 3, 71, 2, 3, 72, 2, 
	3, 73, 2, 3, 74, 2, 3, 75, 
	2, 3, 76, 2, 3, 77, 2, 3, 
	78, 2, 3, 79, 2, 3, 80, 2, 
	3, 81, 2, 3, 82, 2, 3, 83, 
	2, 3, 84, 2, 3, 85, 2, 3, 
	86, 2, 3, 87, 2, 3, 88, 2, 
	3, 89, 2, 3, 90, 2, 3, 91, 
	2, 3, 92, 2, 3, 93, 2, 3, 
	94, 2, 3, 95, 2, 3, 96, 2, 
	3, 97, 2, 3, 98
};

static const short _axl_jnc_key_offsets[] = {
	0, 3, 6, 7, 9, 12, 14, 21, 
	24, 76, 79, 80, 83, 84, 85, 86, 
	88, 91, 92, 93, 95, 98, 99, 102, 
	103, 108, 110, 113, 114, 120, 121, 123, 
	124, 125, 127, 128, 129, 136, 145, 152, 
	153, 163, 171, 179, 187, 195, 203, 211, 
	219, 227, 235, 243, 251, 260, 268, 276, 
	284, 294, 303, 311, 319, 327, 335, 343, 
	351, 359, 367, 375, 383, 391, 399, 407, 
	415, 423, 431, 443, 451, 459, 467, 475, 
	483, 491, 499, 507, 515, 523, 531, 540, 
	548, 556, 564, 572, 580, 588, 596, 604, 
	612, 621, 631, 639, 647, 655, 663, 671, 
	679, 687, 695, 703, 711, 719, 727, 735, 
	743, 751, 759, 772, 780, 788, 796, 804, 
	812, 820, 828, 836, 844, 852, 860, 868, 
	880, 888, 896, 904, 912, 920, 928, 936, 
	944, 952, 960, 968, 976, 984, 992, 1000, 
	1008, 1016, 1024, 1032, 1040, 1048, 1056, 1065, 
	1074, 1082, 1090, 1098, 1106, 1118, 1126, 1134, 
	1142, 1150, 1158, 1166, 1175, 1183, 1191, 1199, 
	1207, 1215, 1223, 1231, 1239, 1247, 1255, 1265, 
	1273, 1281, 1289, 1297, 1305, 1313, 1321, 1329, 
	1337, 1345, 1353, 1361, 1369, 1377, 1388, 1396, 
	1404, 1412, 1420, 1428, 1437, 1445, 1453, 1461, 
	1469, 1477, 1485, 1493, 1501, 1509, 1517, 1525, 
	1533, 1541, 1549, 1557, 1565, 1576, 1584, 1592, 
	1600, 1608, 1616, 1624, 1632, 1641, 1649, 1657, 
	1665, 1673, 1681, 1689, 1697, 1705, 1713, 1722, 
	1731, 1739, 1747, 1755, 1763, 1771, 1779, 1787, 
	1795, 1803, 1811, 1819, 1827, 1835, 1843, 1851, 
	1859, 1867, 1876, 1884, 1892, 1900, 1908, 1916, 
	1924, 1932, 1940, 1951, 1959, 1969, 1977, 1985, 
	1993, 2001, 2009, 2017, 2025, 2033, 2041, 2051, 
	2060, 2068, 2076, 2084, 2092, 2100, 2108, 2116, 
	2124, 2132, 2140, 2148, 2156, 2164, 2172, 2182, 
	2191, 2200, 2208, 2216, 2224, 2232, 2240, 2248, 
	2256, 2265, 2273, 2281, 2289, 2299, 2307, 2315, 
	2323, 2332, 2340, 2348, 2357, 2365, 2373, 2381, 
	2389, 2397, 2405, 2413, 2421, 2429, 2439, 2447, 
	2455, 2463, 2471, 2479, 2487, 2495, 2503, 2511, 
	2519, 2528, 2536, 2544, 2552, 2560, 2568, 2576, 
	2585, 2593, 2601, 2609, 2617, 2625, 2627, 2631, 
	2637, 2644, 2645, 2646
};

static const char _axl_jnc_trans_keys[] = {
	10, 34, 92, 10, 39, 92, 46, 10, 
	42, 10, 42, 47, 48, 57, 34, 48, 
	57, 65, 70, 97, 102, 10, 34, 92, 
	9, 10, 13, 32, 33, 34, 36, 37, 
	38, 39, 40, 41, 42, 43, 45, 46, 
	47, 48, 58, 60, 61, 62, 64, 69, 
	94, 95, 97, 98, 99, 100, 101, 102, 
	103, 104, 105, 109, 110, 111, 112, 114, 
	115, 116, 117, 118, 119, 124, 49, 57, 
	65, 90, 106, 122, 9, 13, 32, 61, 
	10, 34, 92, 10, 34, 61, 38, 61, 
	10, 39, 92, 10, 61, 43, 61, 45, 
	61, 62, 46, 42, 47, 61, 10, 46, 
	88, 120, 48, 57, 48, 57, 46, 48, 
	57, 10, 48, 57, 65, 70, 97, 102, 
	61, 60, 61, 61, 61, 61, 62, 61, 
	61, 95, 48, 57, 65, 90, 97, 122, 
	43, 45, 95, 48, 57, 65, 90, 97, 
	122, 95, 48, 57, 65, 90, 97, 122, 
	61, 95, 98, 108, 117, 48, 57, 65, 
	90, 97, 122, 95, 115, 48, 57, 65, 
	90, 97, 122, 95, 116, 48, 57, 65, 
	90, 97, 122, 95, 114, 48, 57, 65, 
	90, 97, 122, 95, 97, 48, 57, 65, 
	90, 98, 122, 95, 99, 48, 57, 65, 
	90, 97, 122, 95, 116, 48, 57, 65, 
	90, 97, 122, 95, 105, 48, 57, 65, 
	90, 97, 122, 95, 97, 48, 57, 65, 
	90, 98, 122, 95, 115, 48, 57, 65, 
	90, 97, 122, 95, 116, 48, 57, 65, 
	90, 97, 122, 95, 111, 48, 57, 65, 
	90, 97, 122, 95, 101, 103, 48, 57, 
	65, 90, 97, 122, 95, 118, 48, 57, 
	65, 90, 97, 122, 95, 101, 48, 57, 
	65, 90, 97, 122, 95, 116, 48, 57, 
	65, 90, 97, 122, 95, 105, 111, 114, 
	48, 57, 65, 90, 97, 122, 95, 103, 
	110, 48, 57, 65, 90, 97, 122, 95, 
	101, 48, 57, 65, 90, 97, 122, 95, 
	110, 48, 57, 65, 90, 97, 122, 95, 
	100, 48, 57, 65, 90, 97, 122, 95, 
	105, 48, 57, 65, 90, 97, 122, 95, 
	97, 48, 57, 65, 90, 98, 122, 95, 
	110, 48, 57, 65, 90, 97, 122, 95, 
	100, 48, 57, 65, 90, 97, 122, 95, 
	97, 48, 57, 65, 90, 98, 122, 95, 
	98, 48, 57, 65, 90, 97, 122, 95, 
	108, 48, 57, 65, 90, 97, 122, 95, 
	101, 48, 57, 65, 90, 97, 122, 95, 
	111, 48, 57, 65, 90, 97, 122, 95, 
	108, 48, 57, 65, 90, 97, 122, 95, 
	101, 48, 57, 65, 90, 97, 122, 95, 
	97, 48, 57, 65, 90, 98, 122, 95, 
	107, 48, 57, 65, 90, 97, 122, 95, 
	97, 100, 104, 108, 111, 48, 57, 65, 
	90, 98, 122, 95, 115, 48, 57, 65, 
	90, 97, 122, 95, 101, 48, 57, 65, 
	90, 97, 122, 95, 101, 48, 57, 65, 
	90, 97, 122, 95, 99, 48, 57, 65, 
	90, 97, 122, 95, 108, 48, 57, 65, 
	90, 97, 122, 95, 97, 48, 57, 65, 
	90, 98, 122, 95, 114, 48, 57, 65, 
	90, 97, 122, 95, 97, 48, 57, 65, 
	90, 98, 122, 95, 115, 48, 57, 65, 
	90, 97, 122, 95, 115, 48, 57, 65, 
	90, 97, 122, 95, 110, 48, 57, 65, 
	90, 97, 122, 95, 115, 116, 48, 57, 
	65, 90, 97, 122, 95, 116, 48, 57, 
	65, 90, 97, 122, 95, 114, 48, 57, 
	65, 90, 97, 122, 95, 117, 48, 57, 
	65, 90, 97, 122, 95, 99, 48, 57, 
	65, 90, 97, 122, 95, 116, 48, 57, 
	65, 90, 97, 122, 95, 105, 48, 57, 
	65, 90, 97, 122, 95, 110, 48, 57, 
	65, 90, 97, 122, 95, 117, 48, 57, 
	65, 90, 97, 122, 95, 101, 48, 57, 
	65, 90, 97, 122, 95, 101, 111, 48, 
	57, 65, 90, 97, 122, 95, 102, 108, 
	115, 48, 57, 65, 90, 97, 122, 95, 
	97, 48, 57, 65, 90, 98, 122, 95, 
	117, 48, 57, 65, 90, 97, 122, 95, 
	108, 48, 57, 65, 90, 97, 122, 95, 
	116, 48, 57, 65, 90, 97, 122, 95, 
	101, 48, 57, 65, 90, 97, 122, 95, 
	116, 48, 57, 65, 90, 97, 122, 95, 
	101, 48, 57, 65, 90, 97, 122, 95, 
	116, 48, 57, 65, 90, 97, 122, 95, 
	114, 48, 57, 65, 90, 97, 122, 95, 
	117, 48, 57, 65, 90, 97, 122, 95, 
	99, 48, 57, 65, 90, 97, 122, 95, 
	116, 48, 57, 65, 90, 97, 122, 95, 
	117, 48, 57, 65, 90, 97, 122, 95, 
	98, 48, 57, 65, 90, 97, 122, 95, 
	108, 48, 57, 65, 90, 97, 122, 95, 
	101, 48, 57, 65, 90, 97, 122, 43, 
	45, 95, 108, 110, 118, 120, 48, 57, 
	65, 90, 97, 122, 95, 115, 48, 57, 
	65, 90, 97, 122, 95, 101, 48, 57, 
	65, 90, 97, 122, 95, 117, 48, 57, 
	65, 90, 97, 122, 95, 109, 48, 57, 
	65, 90, 97, 122, 95, 99, 48, 57, 
	65, 90, 97, 122, 95, 101, 48, 57, 
	65, 90, 97, 122, 95, 110, 48, 57, 
	65, 90, 97, 122, 95, 116, 48, 57, 
	65, 90, 97, 122, 95, 116, 48, 57, 
	65, 90, 97, 122, 95, 101, 48, 57, 
	65, 90, 97, 122, 95, 110, 48, 57, 
	65, 90, 97, 122, 95, 100, 48, 57, 
	65, 90, 97, 122, 95, 97, 108, 111, 
	114, 117, 48, 57, 65, 90, 98, 122, 
	95, 108, 48, 57, 65, 90, 97, 122, 
	95, 115, 48, 57, 65, 90, 97, 122, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	95, 111, 48, 57, 65, 90, 97, 122, 
	95, 97, 48, 57, 65, 90, 98, 122, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	95, 114, 48, 57, 65, 90, 97, 122, 
	95, 105, 48, 57, 65, 90, 97, 122, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	95, 110, 48, 57, 65, 90, 97, 122, 
	95, 100, 48, 57, 65, 90, 97, 122, 
	95, 110, 48, 57, 65, 90, 97, 122, 
	95, 99, 48, 57, 65, 90, 97, 122, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	95, 105, 48, 57, 65, 90, 97, 122, 
	95, 111, 48, 57, 65, 90, 97, 122, 
	95, 110, 48, 57, 65, 90, 97, 122, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	95, 97, 48, 57, 65, 90, 98, 122, 
	95, 112, 48, 57, 65, 90, 97, 122, 
	95, 102, 110, 48, 57, 65, 90, 97, 
	122, 95, 100, 116, 48, 57, 65, 90, 
	97, 122, 95, 101, 48, 57, 65, 90, 
	97, 122, 95, 120, 48, 57, 65, 90, 
	97, 122, 95, 101, 48, 57, 65, 90, 
	97, 122, 95, 100, 48, 57, 65, 90, 
	97, 122, 49, 51, 54, 56, 95, 112, 
	48, 57, 65, 90, 97, 122, 54, 95, 
	48, 57, 65, 90, 97, 122, 50, 95, 
	48, 57, 65, 90, 97, 122, 52, 95, 
	48, 57, 65, 90, 97, 122, 95, 116, 
	48, 57, 65, 90, 97, 122, 95, 114, 
	48, 57, 65, 90, 97, 122, 95, 117, 
	48, 57, 65, 90, 97, 122, 95, 108, 
	116, 48, 57, 65, 90, 97, 122, 95, 
	116, 48, 57, 65, 90, 97, 122, 95, 
	105, 48, 57, 65, 90, 97, 122, 95, 
	99, 48, 57, 65, 90, 97, 122, 95, 
	97, 48, 57, 65, 90, 98, 122, 95, 
	115, 48, 57, 65, 90, 97, 122, 95, 
	116, 48, 57, 65, 90, 97, 122, 95, 
	97, 48, 57, 65, 90, 98, 122, 95, 
	98, 48, 57, 65, 90, 97, 122, 95, 
	108, 48, 57, 65, 90, 97, 122, 95, 
	101, 48, 57, 65, 90, 97, 122, 95, 
	97, 101, 117, 48, 57, 65, 90, 98, 
	122, 95, 109, 48, 57, 65, 90, 97, 
	122, 95, 101, 48, 57, 65, 90, 97, 
	122, 95, 115, 48, 57, 65, 90, 97, 
	122, 95, 112, 48, 57, 65, 90, 97, 
	122, 95, 97, 48, 57, 65, 90, 98, 
	122, 95, 99, 48, 57, 65, 90, 97, 
	122, 95, 101, 48, 57, 65, 90, 97, 
	122, 95, 119, 48, 57, 65, 90, 97, 
	122, 95, 108, 48, 57, 65, 90, 97, 
	122, 95, 108, 48, 57, 65, 90, 97, 
	122, 95, 97, 48, 57, 65, 90, 98, 
	122, 95, 98, 48, 57, 65, 90, 97, 
	122, 95, 108, 48, 57, 65, 90, 97, 
	122, 95, 101, 48, 57, 65, 90, 97, 
	122, 95, 98, 110, 112, 118, 48, 57, 
	65, 90, 97, 122, 95, 106, 48, 57, 
	65, 90, 97, 122, 95, 101, 48, 57, 
	65, 90, 97, 122, 95, 99, 48, 57, 
	65, 90, 97, 122, 95, 116, 48, 57, 
	65, 90, 97, 122, 95, 99, 48, 57, 
	65, 90, 97, 122, 95, 101, 104, 48, 
	57, 65, 90, 97, 122, 95, 97, 48, 
	57, 65, 90, 98, 122, 95, 110, 48, 
	57, 65, 90, 97, 122, 95, 103, 48, 
	57, 65, 90, 97, 122, 95, 101, 48, 
	57, 65, 90, 97, 122, 95, 101, 48, 
	57, 65, 90, 97, 122, 95, 114, 48, 
	57, 65, 90, 97, 122, 95, 97, 48, 
	57, 65, 90, 98, 122, 95, 116, 48, 
	57, 65, 90, 97, 122, 95, 111, 48, 
	57, 65, 90, 97, 122, 95, 114, 48, 
	57, 65, 90, 97, 122, 95, 101, 48, 
	57, 65, 90, 97, 122, 95, 114, 48, 
	57, 65, 90, 97, 122, 95, 114, 48, 
	57, 65, 90, 97, 122, 95, 105, 48, 
	57, 65, 90, 97, 122, 95, 100, 48, 
	57, 65, 90, 97, 122, 95, 101, 48, 
	57, 65, 90, 97, 122, 95, 97, 111, 
	114, 117, 48, 57, 65, 90, 98, 122, 
	95, 99, 48, 57, 65, 90, 97, 122, 
	95, 107, 48, 57, 65, 90, 97, 122, 
	95, 115, 48, 57, 65, 90, 97, 122, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	95, 102, 48, 57, 65, 90, 97, 122, 
	95, 105, 48, 57, 65, 90, 97, 122, 
	95, 120, 48, 57, 65, 90, 97, 122, 
	95, 101, 111, 48, 57, 65, 90, 97, 
	122, 95, 99, 48, 57, 65, 90, 97, 
	122, 95, 111, 48, 57, 65, 90, 97, 
	122, 95, 110, 48, 57, 65, 90, 97, 
	122, 95, 115, 48, 57, 65, 90, 97, 
	122, 95, 116, 48, 57, 65, 90, 97, 
	122, 95, 114, 48, 57, 65, 90, 97, 
	122, 95, 117, 48, 57, 65, 90, 97, 
	122, 95, 99, 48, 57, 65, 90, 97, 
	122, 95, 116, 48, 57, 65, 90, 97, 
	122, 95, 112, 116, 48, 57, 65, 90, 
	97, 122, 95, 101, 118, 48, 57, 65, 
	90, 97, 122, 95, 114, 48, 57, 65, 
	90, 97, 122, 95, 116, 48, 57, 65, 
	90, 97, 122, 95, 121, 48, 57, 65, 
	90, 97, 122, 95, 97, 48, 57, 65, 
	90, 98, 122, 95, 108, 48, 57, 65, 
	90, 97, 122, 95, 117, 48, 57, 65, 
	90, 97, 122, 95, 101, 48, 57, 65, 
	90, 97, 122, 95, 101, 48, 57, 65, 
	90, 97, 122, 95, 99, 48, 57, 65, 
	90, 97, 122, 95, 116, 48, 57, 65, 
	90, 97, 122, 95, 101, 48, 57, 65, 
	90, 97, 122, 95, 100, 48, 57, 65, 
	90, 97, 122, 95, 98, 48, 57, 65, 
	90, 97, 122, 95, 108, 48, 57, 65, 
	90, 97, 122, 95, 105, 48, 57, 65, 
	90, 97, 122, 95, 99, 48, 57, 65, 
	90, 97, 122, 95, 101, 48, 57, 65, 
	90, 97, 122, 95, 97, 116, 48, 57, 
	65, 90, 98, 122, 95, 100, 48, 57, 
	65, 90, 97, 122, 95, 111, 48, 57, 
	65, 90, 97, 122, 95, 110, 48, 57, 
	65, 90, 97, 122, 95, 108, 48, 57, 
	65, 90, 97, 122, 95, 121, 48, 57, 
	65, 90, 97, 122, 95, 117, 48, 57, 
	65, 90, 97, 122, 95, 114, 48, 57, 
	65, 90, 97, 122, 95, 110, 48, 57, 
	65, 90, 97, 122, 95, 101, 105, 116, 
	119, 48, 57, 65, 90, 97, 122, 95, 
	116, 48, 57, 65, 90, 97, 122, 95, 
	103, 108, 122, 48, 57, 65, 90, 97, 
	121, 95, 110, 48, 57, 65, 90, 97, 
	122, 95, 101, 48, 57, 65, 90, 97, 
	122, 95, 100, 48, 57, 65, 90, 97, 
	122, 95, 101, 48, 57, 65, 90, 97, 
	122, 95, 110, 48, 57, 65, 90, 97, 
	122, 95, 116, 48, 57, 65, 90, 97, 
	122, 95, 101, 48, 57, 65, 90, 97, 
	122, 95, 111, 48, 57, 65, 90, 97, 
	122, 95, 102, 48, 57, 65, 90, 97, 
	122, 95, 97, 100, 114, 48, 57, 65, 
	90, 98, 122, 95, 99, 116, 48, 57, 
	65, 90, 97, 122, 95, 107, 48, 57, 
	65, 90, 97, 122, 95, 105, 48, 57, 
	65, 90, 97, 122, 95, 99, 48, 57, 
	65, 90, 97, 122, 95, 99, 48, 57, 
	65, 90, 97, 122, 95, 97, 48, 57, 
	65, 90, 98, 122, 95, 108, 48, 57, 
	65, 90, 97, 122, 95, 108, 48, 57, 
	65, 90, 97, 122, 95, 117, 48, 57, 
	65, 90, 97, 122, 95, 99, 48, 57, 
	65, 90, 97, 122, 95, 116, 48, 57, 
	65, 90, 97, 122, 95, 105, 48, 57, 
	65, 90, 97, 122, 95, 116, 48, 57, 
	65, 90, 97, 122, 95, 99, 48, 57, 
	65, 90, 97, 122, 95, 104, 48, 57, 
	65, 90, 97, 122, 95, 104, 114, 121, 
	48, 57, 65, 90, 97, 122, 95, 105, 
	114, 48, 57, 65, 90, 97, 122, 95, 
	110, 115, 48, 57, 65, 90, 97, 122, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	95, 97, 48, 57, 65, 90, 98, 122, 
	95, 100, 48, 57, 65, 90, 97, 122, 
	95, 117, 48, 57, 65, 90, 97, 122, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	95, 112, 48, 57, 65, 90, 97, 122, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	95, 100, 111, 48, 57, 65, 90, 97, 
	122, 95, 101, 48, 57, 65, 90, 97, 
	122, 95, 102, 48, 57, 65, 90, 97, 
	122, 95, 102, 48, 57, 65, 90, 97, 
	122, 95, 104, 110, 115, 48, 57, 65, 
	90, 97, 122, 95, 101, 48, 57, 65, 
	90, 97, 122, 95, 97, 48, 57, 65, 
	90, 98, 122, 95, 112, 48, 57, 65, 
	90, 97, 122, 95, 105, 115, 48, 57, 
	65, 90, 97, 122, 95, 111, 48, 57, 
	65, 90, 97, 122, 95, 110, 48, 57, 
	65, 90, 97, 122, 95, 97, 105, 48, 
	57, 65, 90, 98, 122, 95, 102, 48, 
	57, 65, 90, 97, 122, 95, 101, 48, 
	57, 65, 90, 97, 122, 95, 103, 48, 
	57, 65, 90, 97, 122, 95, 110, 48, 
	57, 65, 90, 97, 122, 95, 101, 48, 
	57, 65, 90, 97, 122, 95, 100, 48, 
	57, 65, 90, 97, 122, 95, 105, 48, 
	57, 65, 90, 97, 122, 95, 110, 48, 
	57, 65, 90, 97, 122, 95, 103, 48, 
	57, 65, 90, 97, 122, 95, 97, 105, 
	111, 48, 57, 65, 90, 98, 122, 95, 
	114, 48, 57, 65, 90, 97, 122, 95, 
	105, 48, 57, 65, 90, 97, 122, 95, 
	97, 48, 57, 65, 90, 98, 122, 95, 
	110, 48, 57, 65, 90, 97, 122, 95, 
	116, 48, 57, 65, 90, 97, 122, 95, 
	114, 48, 57, 65, 90, 97, 122, 95, 
	116, 48, 57, 65, 90, 97, 122, 95, 
	117, 48, 57, 65, 90, 97, 122, 95, 
	97, 48, 57, 65, 90, 98, 122, 95, 
	108, 48, 57, 65, 90, 97, 122, 95, 
	105, 108, 48, 57, 65, 90, 97, 122, 
	95, 100, 48, 57, 65, 90, 97, 122, 
	95, 97, 48, 57, 65, 90, 98, 122, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	95, 105, 48, 57, 65, 90, 97, 122, 
	95, 108, 48, 57, 65, 90, 97, 122, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	95, 101, 104, 48, 57, 65, 90, 97, 
	122, 95, 97, 48, 57, 65, 90, 98, 
	122, 95, 107, 48, 57, 65, 90, 97, 
	122, 95, 105, 48, 57, 65, 90, 97, 
	122, 95, 108, 48, 57, 65, 90, 97, 
	122, 95, 101, 48, 57, 65, 90, 97, 
	122, 61, 124, 10, 34, 36, 92, 40, 
	95, 65, 90, 97, 122, 95, 48, 57, 
	65, 90, 97, 122, 10, 58, 10, 34, 
	41, 0
};

static const char _axl_jnc_single_lengths[] = {
	3, 3, 1, 2, 3, 0, 1, 3, 
	46, 3, 1, 3, 1, 1, 1, 2, 
	3, 1, 1, 2, 3, 1, 3, 1, 
	3, 0, 1, 1, 0, 1, 2, 1, 
	1, 2, 1, 1, 1, 3, 1, 1, 
	4, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	4, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 6, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 4, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 7, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 6, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 3, 
	2, 2, 2, 2, 6, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 4, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 5, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 5, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 5, 2, 4, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 4, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 4, 3, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 4, 2, 2, 2, 
	3, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 4, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 4, 2, 
	1, 1, 1, 3
};

static const char _axl_jnc_range_lengths[] = {
	0, 0, 0, 0, 0, 1, 3, 0, 
	3, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 3, 0, 0, 0, 
	0, 0, 0, 0, 3, 3, 3, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 0, 0, 2, 
	3, 0, 0, 0
};

static const short _axl_jnc_index_offsets[] = {
	0, 4, 8, 10, 13, 17, 19, 24, 
	28, 78, 82, 84, 88, 90, 92, 94, 
	97, 101, 103, 105, 108, 112, 114, 118, 
	120, 125, 127, 130, 132, 136, 138, 141, 
	143, 145, 148, 150, 152, 157, 164, 169, 
	171, 179, 185, 191, 197, 203, 209, 215, 
	221, 227, 233, 239, 245, 252, 258, 264, 
	270, 278, 285, 291, 297, 303, 309, 315, 
	321, 327, 333, 339, 345, 351, 357, 363, 
	369, 375, 381, 391, 397, 403, 409, 415, 
	421, 427, 433, 439, 445, 451, 457, 464, 
	470, 476, 482, 488, 494, 500, 506, 512, 
	518, 525, 533, 539, 545, 551, 557, 563, 
	569, 575, 581, 587, 593, 599, 605, 611, 
	617, 623, 629, 640, 646, 652, 658, 664, 
	670, 676, 682, 688, 694, 700, 706, 712, 
	722, 728, 734, 740, 746, 752, 758, 764, 
	770, 776, 782, 788, 794, 800, 806, 812, 
	818, 824, 830, 836, 842, 848, 854, 861, 
	868, 874, 880, 886, 892, 902, 908, 914, 
	920, 926, 932, 938, 945, 951, 957, 963, 
	969, 975, 981, 987, 993, 999, 1005, 1013, 
	1019, 1025, 1031, 1037, 1043, 1049, 1055, 1061, 
	1067, 1073, 1079, 1085, 1091, 1097, 1106, 1112, 
	1118, 1124, 1130, 1136, 1143, 1149, 1155, 1161, 
	1167, 1173, 1179, 1185, 1191, 1197, 1203, 1209, 
	1215, 1221, 1227, 1233, 1239, 1248, 1254, 1260, 
	1266, 1272, 1278, 1284, 1290, 1297, 1303, 1309, 
	1315, 1321, 1327, 1333, 1339, 1345, 1351, 1358, 
	1365, 1371, 1377, 1383, 1389, 1395, 1401, 1407, 
	1413, 1419, 1425, 1431, 1437, 1443, 1449, 1455, 
	1461, 1467, 1474, 1480, 1486, 1492, 1498, 1504, 
	1510, 1516, 1522, 1531, 1537, 1545, 1551, 1557, 
	1563, 1569, 1575, 1581, 1587, 1593, 1599, 1607, 
	1614, 1620, 1626, 1632, 1638, 1644, 1650, 1656, 
	1662, 1668, 1674, 1680, 1686, 1692, 1698, 1706, 
	1713, 1720, 1726, 1732, 1738, 1744, 1750, 1756, 
	1762, 1769, 1775, 1781, 1787, 1795, 1801, 1807, 
	1813, 1820, 1826, 1832, 1839, 1845, 1851, 1857, 
	1863, 1869, 1875, 1881, 1887, 1893, 1901, 1907, 
	1913, 1919, 1925, 1931, 1937, 1943, 1949, 1955, 
	1961, 1968, 1974, 1980, 1986, 1992, 1998, 2004, 
	2011, 2017, 2023, 2029, 2035, 2041, 2044, 2049, 
	2054, 2059, 2061, 2063
};

static const short _axl_jnc_indicies[] = {
	2, 3, 4, 1, 6, 7, 8, 5, 
	10, 9, 12, 13, 11, 12, 13, 14, 
	11, 15, 0, 17, 18, 18, 18, 16, 
	19, 20, 21, 17, 23, 24, 23, 23, 
	25, 26, 27, 28, 29, 30, 31, 32, 
	33, 34, 35, 36, 37, 38, 40, 41, 
	42, 43, 44, 46, 47, 45, 48, 49, 
	50, 51, 52, 53, 54, 55, 56, 57, 
	58, 59, 60, 61, 62, 63, 64, 65, 
	66, 67, 39, 45, 45, 22, 23, 23, 
	23, 68, 70, 69, 2, 3, 4, 1, 
	71, 1, 72, 69, 73, 69, 74, 75, 
	69, 6, 7, 8, 5, 76, 5, 77, 
	69, 78, 79, 69, 80, 81, 82, 69, 
	83, 69, 11, 84, 85, 69, 86, 84, 
	88, 89, 89, 39, 87, 15, 90, 88, 
	39, 87, 91, 17, 18, 18, 18, 92, 
	94, 93, 95, 96, 69, 98, 97, 99, 
	69, 100, 101, 69, 103, 102, 104, 69, 
	45, 45, 45, 45, 0, 88, 88, 45, 
	106, 45, 45, 105, 45, 106, 45, 45, 
	105, 107, 69, 45, 108, 109, 110, 45, 
	45, 45, 105, 45, 111, 45, 45, 45, 
	105, 45, 112, 45, 45, 45, 105, 45, 
	113, 45, 45, 45, 105, 45, 114, 45, 
	45, 45, 105, 45, 115, 45, 45, 45, 
	105, 45, 116, 45, 45, 45, 105, 45, 
	117, 45, 45, 45, 105, 45, 118, 45, 
	45, 45, 105, 45, 119, 45, 45, 45, 
	105, 45, 120, 45, 45, 45, 105, 45, 
	121, 45, 45, 45, 105, 45, 123, 124, 
	45, 45, 45, 122, 45, 125, 45, 45, 
	45, 105, 45, 126, 45, 45, 45, 105, 
	45, 127, 45, 45, 45, 105, 45, 128, 
	129, 130, 45, 45, 45, 105, 45, 131, 
	132, 45, 45, 45, 105, 45, 133, 45, 
	45, 45, 105, 45, 134, 45, 45, 45, 
	105, 45, 135, 45, 45, 45, 105, 45, 
	136, 45, 45, 45, 105, 45, 137, 45, 
	45, 45, 105, 45, 138, 45, 45, 45, 
	105, 45, 139, 45, 45, 45, 105, 45, 
	140, 45, 45, 45, 105, 45, 141, 45, 
	45, 45, 105, 45, 142, 45, 45, 45, 
	105, 45, 143, 45, 45, 45, 105, 45, 
	144, 45, 45, 45, 105, 45, 145, 45, 
	45, 45, 105, 45, 146, 45, 45, 45, 
	105, 45, 147, 45, 45, 45, 105, 45, 
	148, 45, 45, 45, 105, 45, 149, 150, 
	151, 152, 153, 45, 45, 45, 105, 45, 
	154, 45, 45, 45, 105, 45, 155, 45, 
	45, 45, 105, 45, 156, 45, 45, 45, 
	105, 45, 157, 45, 45, 45, 105, 45, 
	158, 45, 45, 45, 105, 45, 159, 45, 
	45, 45, 105, 45, 160, 45, 45, 45, 
	105, 45, 161, 45, 45, 45, 105, 45, 
	162, 45, 45, 45, 105, 45, 163, 45, 
	45, 45, 105, 45, 164, 45, 45, 45, 
	105, 45, 165, 166, 45, 45, 45, 105, 
	45, 167, 45, 45, 45, 105, 45, 169, 
	45, 45, 45, 168, 45, 170, 45, 45, 
	45, 105, 45, 171, 45, 45, 45, 105, 
	45, 172, 45, 45, 45, 105, 45, 173, 
	45, 45, 45, 105, 45, 174, 45, 45, 
	45, 105, 45, 175, 45, 45, 45, 105, 
	45, 176, 45, 45, 45, 105, 45, 177, 
	178, 45, 45, 45, 105, 45, 179, 180, 
	181, 45, 45, 45, 105, 45, 182, 45, 
	45, 45, 105, 45, 183, 45, 45, 45, 
	105, 45, 184, 45, 45, 45, 105, 45, 
	185, 45, 45, 45, 105, 45, 186, 45, 
	45, 45, 105, 45, 187, 45, 45, 45, 
	105, 45, 188, 45, 45, 45, 105, 45, 
	189, 45, 45, 45, 105, 45, 190, 45, 
	45, 45, 105, 45, 191, 45, 45, 45, 
	105, 45, 192, 45, 45, 45, 105, 45, 
	193, 45, 45, 45, 105, 45, 195, 45, 
	45, 45, 194, 45, 196, 45, 45, 45, 
	105, 45, 197, 45, 45, 45, 105, 45, 
	198, 45, 45, 45, 105, 88, 88, 45, 
	199, 200, 201, 202, 106, 45, 45, 105, 
	45, 203, 45, 45, 45, 105, 45, 204, 
	45, 45, 45, 105, 45, 205, 45, 45, 
	45, 105, 45, 206, 45, 45, 45, 105, 
	45, 208, 45, 45, 45, 207, 45, 209, 
	45, 45, 45, 105, 45, 210, 45, 45, 
	45, 105, 45, 211, 45, 45, 45, 105, 
	45, 212, 45, 45, 45, 105, 45, 213, 
	45, 45, 45, 105, 45, 214, 45, 45, 
	45, 105, 45, 215, 45, 45, 45, 105, 
	45, 216, 217, 218, 219, 220, 45, 45, 
	45, 105, 45, 221, 45, 45, 45, 105, 
	45, 222, 45, 45, 45, 105, 45, 223, 
	45, 45, 45, 105, 45, 224, 45, 45, 
	45, 105, 45, 225, 45, 45, 45, 105, 
	45, 226, 45, 45, 45, 105, 45, 227, 
	45, 45, 45, 105, 45, 228, 45, 45, 
	45, 105, 45, 229, 45, 45, 45, 105, 
	45, 230, 45, 45, 45, 105, 45, 231, 
	45, 45, 45, 105, 45, 232, 45, 45, 
	45, 105, 45, 233, 45, 45, 45, 105, 
	45, 234, 45, 45, 45, 105, 45, 235, 
	45, 45, 45, 105, 45, 236, 45, 45, 
	45, 105, 45, 237, 45, 45, 45, 105, 
	45, 238, 45, 45, 45, 105, 45, 239, 
	45, 45, 45, 105, 45, 240, 45, 45, 
	45, 105, 45, 241, 45, 45, 45, 105, 
	45, 242, 45, 45, 45, 105, 45, 243, 
	244, 45, 45, 45, 105, 45, 245, 246, 
	45, 45, 45, 105, 45, 247, 45, 45, 
	45, 105, 45, 248, 45, 45, 45, 105, 
	45, 249, 45, 45, 45, 105, 45, 250, 
	45, 45, 45, 105, 252, 253, 254, 255, 
	45, 256, 45, 45, 45, 251, 257, 45, 
	45, 45, 45, 105, 258, 45, 45, 45, 
	45, 105, 259, 45, 45, 45, 45, 105, 
	45, 260, 45, 45, 45, 105, 45, 261, 
	45, 45, 45, 105, 45, 262, 45, 45, 
	45, 105, 45, 263, 264, 45, 45, 45, 
	105, 45, 265, 45, 45, 45, 105, 45, 
	266, 45, 45, 45, 105, 45, 267, 45, 
	45, 45, 105, 45, 268, 45, 45, 45, 
	105, 45, 269, 45, 45, 45, 105, 45, 
	270, 45, 45, 45, 105, 45, 271, 45, 
	45, 45, 105, 45, 272, 45, 45, 45, 
	105, 45, 273, 45, 45, 45, 105, 45, 
	274, 45, 45, 45, 105, 45, 275, 276, 
	277, 45, 45, 45, 105, 45, 278, 45, 
	45, 45, 105, 45, 279, 45, 45, 45, 
	105, 45, 280, 45, 45, 45, 105, 45, 
	281, 45, 45, 45, 105, 45, 282, 45, 
	45, 45, 105, 45, 283, 45, 45, 45, 
	105, 45, 284, 45, 45, 45, 105, 45, 
	285, 45, 45, 45, 105, 45, 286, 45, 
	45, 45, 105, 45, 287, 45, 45, 45, 
	105, 45, 289, 45, 45, 45, 288, 45, 
	290, 45, 45, 45, 105, 45, 291, 45, 
	45, 45, 105, 45, 292, 45, 45, 45, 
	105, 45, 293, 294, 295, 296, 45, 45, 
	45, 105, 45, 297, 45, 45, 45, 105, 
	45, 298, 45, 45, 45, 105, 45, 299, 
	45, 45, 45, 105, 45, 300, 45, 45, 
	45, 105, 45, 301, 45, 45, 45, 105, 
	45, 302, 303, 45, 45, 45, 105, 45, 
	304, 45, 45, 45, 105, 45, 305, 45, 
	45, 45, 105, 45, 306, 45, 45, 45, 
	105, 45, 307, 45, 45, 45, 105, 45, 
	308, 45, 45, 45, 105, 45, 309, 45, 
	45, 45, 105, 45, 310, 45, 45, 45, 
	105, 45, 311, 45, 45, 45, 105, 45, 
	312, 45, 45, 45, 105, 45, 313, 45, 
	45, 45, 105, 45, 314, 45, 45, 45, 
	105, 45, 315, 45, 45, 45, 105, 45, 
	316, 45, 45, 45, 105, 45, 317, 45, 
	45, 45, 105, 45, 318, 45, 45, 45, 
	105, 45, 319, 45, 45, 45, 105, 45, 
	320, 321, 322, 323, 45, 45, 45, 105, 
	45, 324, 45, 45, 45, 105, 45, 325, 
	45, 45, 45, 105, 45, 326, 45, 45, 
	45, 105, 45, 327, 45, 45, 45, 105, 
	45, 328, 45, 45, 45, 105, 45, 329, 
	45, 45, 45, 105, 45, 330, 45, 45, 
	45, 105, 45, 331, 332, 45, 45, 45, 
	105, 45, 333, 45, 45, 45, 105, 45, 
	334, 45, 45, 45, 105, 45, 335, 45, 
	45, 45, 105, 45, 336, 45, 45, 45, 
	105, 45, 337, 45, 45, 45, 105, 45, 
	338, 45, 45, 45, 105, 45, 339, 45, 
	45, 45, 105, 45, 340, 45, 45, 45, 
	105, 45, 341, 45, 45, 45, 105, 45, 
	342, 343, 45, 45, 45, 105, 45, 344, 
	345, 45, 45, 45, 105, 45, 346, 45, 
	45, 45, 105, 45, 347, 45, 45, 45, 
	105, 45, 348, 45, 45, 45, 105, 45, 
	349, 45, 45, 45, 105, 45, 350, 45, 
	45, 45, 105, 45, 351, 45, 45, 45, 
	105, 45, 352, 45, 45, 45, 105, 45, 
	353, 45, 45, 45, 105, 45, 354, 45, 
	45, 45, 105, 45, 355, 45, 45, 45, 
	105, 45, 356, 45, 45, 45, 105, 45, 
	357, 45, 45, 45, 105, 45, 358, 45, 
	45, 45, 105, 45, 359, 45, 45, 45, 
	105, 45, 360, 45, 45, 45, 105, 45, 
	361, 45, 45, 45, 105, 45, 362, 45, 
	45, 45, 105, 45, 363, 364, 45, 45, 
	45, 105, 45, 365, 45, 45, 45, 105, 
	45, 366, 45, 45, 45, 105, 45, 367, 
	45, 45, 45, 105, 45, 368, 45, 45, 
	45, 105, 45, 369, 45, 45, 45, 105, 
	45, 370, 45, 45, 45, 105, 45, 371, 
	45, 45, 45, 105, 45, 372, 45, 45, 
	45, 105, 45, 373, 374, 375, 376, 45, 
	45, 45, 105, 45, 377, 45, 45, 45, 
	105, 45, 378, 379, 380, 45, 45, 45, 
	105, 45, 381, 45, 45, 45, 105, 45, 
	382, 45, 45, 45, 105, 45, 383, 45, 
	45, 45, 105, 45, 384, 45, 45, 45, 
	105, 45, 385, 45, 45, 45, 105, 45, 
	386, 45, 45, 45, 105, 45, 387, 45, 
	45, 45, 105, 45, 388, 45, 45, 45, 
	105, 45, 389, 45, 45, 45, 105, 45, 
	390, 391, 392, 45, 45, 45, 105, 45, 
	393, 394, 45, 45, 45, 105, 45, 395, 
	45, 45, 45, 105, 45, 396, 45, 45, 
	45, 105, 45, 397, 45, 45, 45, 105, 
	45, 398, 45, 45, 45, 105, 45, 399, 
	45, 45, 45, 105, 45, 400, 45, 45, 
	45, 105, 45, 401, 45, 45, 45, 105, 
	45, 402, 45, 45, 45, 105, 45, 403, 
	45, 45, 45, 105, 45, 404, 45, 45, 
	45, 105, 45, 405, 45, 45, 45, 105, 
	45, 406, 45, 45, 45, 105, 45, 407, 
	45, 45, 45, 105, 45, 408, 45, 45, 
	45, 105, 45, 409, 410, 411, 45, 45, 
	45, 105, 45, 412, 413, 45, 45, 45, 
	105, 45, 414, 415, 45, 45, 45, 105, 
	45, 416, 45, 45, 45, 105, 45, 417, 
	45, 45, 45, 105, 45, 418, 45, 45, 
	45, 105, 45, 419, 45, 45, 45, 105, 
	45, 420, 45, 45, 45, 105, 45, 421, 
	45, 45, 45, 105, 45, 422, 45, 45, 
	45, 105, 45, 423, 424, 45, 45, 45, 
	105, 45, 425, 45, 45, 45, 105, 45, 
	426, 45, 45, 45, 105, 45, 427, 45, 
	45, 45, 105, 45, 428, 429, 430, 45, 
	45, 45, 105, 45, 431, 45, 45, 45, 
	105, 45, 432, 45, 45, 45, 105, 45, 
	433, 45, 45, 45, 105, 45, 434, 435, 
	45, 45, 45, 105, 45, 436, 45, 45, 
	45, 105, 45, 437, 45, 45, 45, 105, 
	45, 438, 439, 45, 45, 45, 105, 45, 
	440, 45, 45, 45, 105, 45, 441, 45, 
	45, 45, 105, 45, 442, 45, 45, 45, 
	105, 45, 443, 45, 45, 45, 105, 45, 
	444, 45, 45, 45, 105, 45, 445, 45, 
	45, 45, 105, 45, 446, 45, 45, 45, 
	105, 45, 447, 45, 45, 45, 105, 45, 
	448, 45, 45, 45, 105, 45, 449, 450, 
	451, 45, 45, 45, 105, 45, 452, 45, 
	45, 45, 105, 45, 453, 45, 45, 45, 
	105, 45, 454, 45, 45, 45, 105, 45, 
	455, 45, 45, 45, 105, 45, 456, 45, 
	45, 45, 105, 45, 457, 45, 45, 45, 
	105, 45, 458, 45, 45, 45, 105, 45, 
	459, 45, 45, 45, 105, 45, 460, 45, 
	45, 45, 105, 45, 461, 45, 45, 45, 
	105, 45, 462, 463, 45, 45, 45, 105, 
	45, 464, 45, 45, 45, 105, 45, 465, 
	45, 45, 45, 105, 45, 466, 45, 45, 
	45, 105, 45, 467, 45, 45, 45, 105, 
	45, 468, 45, 45, 45, 105, 45, 469, 
	45, 45, 45, 105, 45, 470, 471, 45, 
	45, 45, 105, 45, 472, 45, 45, 45, 
	105, 45, 473, 45, 45, 45, 105, 45, 
	474, 45, 45, 45, 105, 45, 475, 45, 
	45, 45, 105, 45, 476, 45, 45, 45, 
	105, 477, 478, 69, 480, 481, 482, 483, 
	479, 485, 486, 486, 486, 484, 486, 486, 
	486, 486, 487, 484, 488, 490, 489, 491, 
	491, 491, 490, 0
};

static const short _axl_jnc_trans_targs[] = {
	8, 0, 8, 8, 12, 1, 8, 8, 
	17, 8, 8, 3, 3, 4, 8, 25, 
	8, 7, 28, 8, 8, 27, 8, 9, 
	8, 10, 11, 13, 14, 15, 16, 8, 
	8, 18, 19, 20, 21, 22, 24, 26, 
	29, 30, 32, 33, 35, 36, 37, 39, 
	40, 56, 74, 96, 114, 127, 145, 147, 
	150, 162, 174, 189, 212, 248, 258, 286, 
	300, 317, 335, 341, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 2, 23, 8, 8, 8, 
	5, 6, 8, 8, 8, 8, 8, 31, 
	8, 8, 8, 8, 8, 34, 8, 8, 
	8, 8, 38, 8, 41, 47, 50, 42, 
	43, 44, 45, 46, 36, 48, 49, 36, 
	51, 52, 8, 53, 54, 36, 55, 36, 
	57, 69, 71, 58, 64, 59, 60, 61, 
	62, 63, 36, 65, 66, 67, 68, 36, 
	70, 36, 72, 73, 36, 75, 77, 80, 
	82, 85, 76, 36, 78, 79, 36, 81, 
	36, 83, 84, 36, 86, 87, 92, 88, 
	8, 89, 90, 91, 36, 93, 94, 95, 
	36, 97, 110, 98, 102, 105, 99, 100, 
	101, 36, 103, 104, 36, 106, 107, 108, 
	109, 36, 8, 111, 112, 113, 36, 115, 
	117, 120, 123, 116, 36, 118, 119, 8, 
	36, 121, 122, 36, 124, 125, 126, 36, 
	128, 131, 134, 135, 139, 129, 130, 36, 
	132, 133, 36, 36, 136, 137, 138, 36, 
	140, 141, 142, 143, 144, 36, 146, 36, 
	148, 149, 36, 36, 151, 152, 156, 153, 
	154, 155, 36, 8, 157, 158, 159, 36, 
	160, 36, 36, 36, 161, 36, 163, 164, 
	170, 165, 166, 167, 168, 169, 36, 171, 
	172, 173, 36, 175, 182, 183, 176, 177, 
	178, 179, 180, 181, 36, 36, 184, 185, 
	8, 186, 187, 188, 36, 190, 194, 200, 
	206, 191, 192, 193, 36, 195, 36, 196, 
	197, 198, 199, 36, 201, 202, 203, 204, 
	205, 36, 207, 208, 209, 210, 211, 36, 
	213, 215, 220, 244, 214, 36, 216, 217, 
	218, 219, 36, 221, 230, 222, 223, 224, 
	225, 226, 227, 228, 229, 36, 231, 239, 
	232, 235, 233, 234, 36, 236, 237, 238, 
	36, 240, 241, 242, 243, 36, 245, 246, 
	247, 36, 249, 250, 255, 251, 252, 253, 
	254, 36, 256, 257, 36, 259, 260, 270, 
	282, 36, 261, 264, 267, 262, 263, 36, 
	265, 266, 36, 268, 269, 36, 271, 275, 
	279, 272, 273, 36, 274, 36, 276, 277, 
	278, 36, 280, 281, 36, 283, 284, 285, 
	36, 287, 292, 294, 288, 289, 36, 36, 
	290, 291, 36, 293, 36, 295, 296, 297, 
	299, 298, 36, 36, 301, 304, 314, 302, 
	303, 36, 305, 307, 306, 36, 308, 310, 
	309, 36, 311, 312, 313, 36, 315, 316, 
	36, 318, 323, 328, 319, 320, 321, 322, 
	36, 324, 325, 326, 327, 36, 329, 330, 
	36, 331, 332, 333, 334, 36, 336, 338, 
	337, 36, 339, 340, 36, 8, 8, 342, 
	342, 342, 343, 345, 342, 342, 344, 342, 
	342, 346, 347, 346
};

static const short _axl_jnc_trans_actions[] = {
	127, 0, 135, 73, 393, 0, 132, 71, 
	390, 125, 67, 0, 1, 0, 77, 0, 
	123, 0, 0, 138, 75, 399, 83, 0, 
	141, 0, 402, 0, 0, 0, 402, 79, 
	81, 0, 0, 0, 7, 7, 396, 396, 
	0, 0, 0, 0, 0, 387, 387, 0, 
	0, 0, 0, 0, 387, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 119, 121, 37, 105, 
	69, 53, 31, 59, 103, 49, 25, 45, 
	27, 47, 29, 0, 0, 51, 115, 107, 
	0, 0, 113, 111, 109, 117, 43, 0, 
	39, 97, 55, 35, 41, 0, 99, 57, 
	65, 101, 0, 61, 0, 0, 0, 0, 
	0, 0, 0, 0, 177, 0, 0, 159, 
	0, 0, 87, 0, 0, 243, 0, 249, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 201, 0, 0, 0, 0, 246, 
	0, 264, 0, 0, 357, 0, 0, 0, 
	0, 0, 0, 369, 0, 0, 225, 0, 
	288, 0, 0, 300, 0, 0, 0, 0, 
	85, 0, 0, 0, 315, 0, 0, 0, 
	360, 0, 0, 0, 0, 0, 0, 0, 
	0, 372, 0, 0, 336, 0, 0, 0, 
	0, 318, 93, 0, 0, 0, 282, 0, 
	0, 0, 0, 0, 348, 0, 0, 91, 
	291, 0, 0, 240, 0, 0, 0, 150, 
	0, 0, 0, 0, 0, 0, 0, 384, 
	0, 0, 279, 351, 0, 0, 0, 192, 
	0, 0, 0, 0, 0, 231, 0, 303, 
	0, 0, 171, 345, 0, 0, 0, 0, 
	0, 0, 252, 89, 0, 0, 0, 267, 
	0, 270, 273, 276, 0, 285, 0, 0, 
	0, 0, 0, 0, 0, 0, 237, 0, 
	0, 0, 210, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 144, 333, 0, 0, 
	95, 0, 0, 0, 204, 0, 0, 0, 
	0, 0, 0, 0, 258, 0, 375, 0, 
	0, 0, 0, 330, 0, 0, 0, 0, 
	0, 321, 0, 0, 0, 0, 0, 183, 
	0, 0, 0, 0, 0, 153, 0, 0, 
	0, 0, 324, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 312, 0, 0, 
	0, 0, 0, 0, 234, 0, 0, 0, 
	327, 0, 0, 0, 0, 189, 0, 0, 
	0, 186, 0, 0, 0, 0, 0, 0, 
	0, 207, 0, 0, 363, 0, 0, 0, 
	0, 306, 0, 0, 0, 0, 0, 195, 
	0, 0, 378, 0, 0, 339, 0, 0, 
	0, 0, 0, 168, 0, 162, 0, 0, 
	0, 228, 0, 0, 294, 0, 0, 0, 
	366, 0, 0, 0, 0, 0, 219, 309, 
	0, 0, 165, 0, 381, 0, 0, 0, 
	0, 0, 156, 342, 0, 0, 0, 0, 
	0, 174, 0, 0, 0, 297, 0, 0, 
	0, 222, 0, 0, 0, 198, 0, 0, 
	147, 0, 0, 0, 0, 0, 0, 0, 
	261, 0, 0, 0, 0, 180, 0, 0, 
	255, 0, 0, 0, 0, 213, 0, 0, 
	0, 216, 0, 0, 354, 63, 33, 15, 
	129, 13, 0, 0, 19, 11, 0, 17, 
	9, 21, 0, 23
};

static const short _axl_jnc_to_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	3, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 3, 0, 
	0, 0, 3, 0
};

static const short _axl_jnc_from_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	5, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 5, 0, 
	0, 0, 5, 0
};

static const short _axl_jnc_eof_trans[] = {
	1, 1, 10, 10, 10, 1, 17, 1, 
	0, 69, 70, 70, 72, 70, 70, 70, 
	70, 77, 70, 70, 70, 70, 70, 87, 
	88, 91, 88, 92, 93, 94, 70, 98, 
	70, 70, 103, 70, 1, 106, 106, 70, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 123, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	169, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 195, 106, 
	106, 106, 106, 106, 106, 106, 106, 208, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 252, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 289, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 70, 0, 485, 
	488, 485, 0, 492
};

static const int axl_jnc_start = 8;
static const int axl_jnc_first_final = 8;
static const int axl_jnc_error = -1;

static const int axl_jnc_en_lit_fmt = 342;
static const int axl_jnc_en_fmt_spec = 346;
static const int axl_jnc_en_main = 8;


/* #line 272 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */


//.............................................................................

void 
CLexer::Init ()
{
	
/* #line 1120 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl.cpp" */
	{
	cs = axl_jnc_start;
	top = 0;
	ts = 0;
	te = 0;
	act = 0;
	}

/* #line 280 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
}

bool
CLexer::Exec ()
{
	
/* #line 1127 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl.cpp" */
	{
	int _klen;
	unsigned int _trans;
	const unsigned char *_acts;
	unsigned int _nacts;
	const char *_keys;

	if ( p == pe )
		goto _test_eof;
_resume:
	_acts = _axl_jnc_actions + _axl_jnc_from_state_actions[cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 2:
/* #line 1 "NONE" */
	{ts = p;}
	break;
/* #line 1144 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl.cpp" */
		}
	}

	_keys = _axl_jnc_trans_keys + _axl_jnc_key_offsets[cs];
	_trans = _axl_jnc_index_offsets[cs];

	_klen = _axl_jnc_single_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( (*p) < *_mid )
				_upper = _mid - 1;
			else if ( (*p) > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (unsigned int)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _axl_jnc_range_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( (*p) < _mid[0] )
				_upper = _mid - 2;
			else if ( (*p) > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += (unsigned int)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	_trans = _axl_jnc_indicies[_trans];
_eof_trans:
	cs = _axl_jnc_trans_targs[_trans];

	if ( _axl_jnc_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _axl_jnc_actions + _axl_jnc_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 0:
/* #line 44 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{ NewLine (p + 1); }
	break;
	case 3:
/* #line 1 "NONE" */
	{te = p+1;}
	break;
	case 4:
/* #line 56 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;}
	break;
	case 5:
/* #line 58 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateFmtLiteralToken (EToken_FmtLiteral); m_ParenthesesLevelStack.Append (1); {
	stack = PrePush ();
{stack[top++] = cs; cs = 8; goto _again;}} }}
	break;
	case 6:
/* #line 59 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateFmtLiteralToken (EToken_Literal); {cs = stack[--top]; {
	PostPop ();
}goto _again;} }}
	break;
	case 7:
/* #line 60 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;}
	break;
	case 8:
/* #line 57 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateFmtSimpleIdentifierToken (); }}
	break;
	case 9:
/* #line 60 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;}
	break;
	case 10:
/* #line 67 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ ASSERT (false); {cs = stack[--top]; {
	PostPop ();
}goto _again;} }}
	break;
	case 11:
/* #line 66 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateStringToken (EToken_FmtSpecifier, 1); {cs = stack[--top]; {
	PostPop ();
}goto _again;} }}
	break;
	case 12:
/* #line 83 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 8;}
	break;
	case 13:
/* #line 84 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 9;}
	break;
	case 14:
/* #line 85 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 10;}
	break;
	case 15:
/* #line 86 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 11;}
	break;
	case 16:
/* #line 92 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 12;}
	break;
	case 17:
/* #line 93 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 13;}
	break;
	case 18:
/* #line 94 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 14;}
	break;
	case 19:
/* #line 95 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 15;}
	break;
	case 20:
/* #line 96 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 16;}
	break;
	case 21:
/* #line 97 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 17;}
	break;
	case 22:
/* #line 98 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 18;}
	break;
	case 23:
/* #line 99 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 19;}
	break;
	case 24:
/* #line 100 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 20;}
	break;
	case 25:
/* #line 101 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 21;}
	break;
	case 26:
/* #line 107 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 22;}
	break;
	case 27:
/* #line 108 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 23;}
	break;
	case 28:
/* #line 109 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 24;}
	break;
	case 29:
/* #line 115 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 25;}
	break;
	case 30:
/* #line 116 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 26;}
	break;
	case 31:
/* #line 117 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 27;}
	break;
	case 32:
/* #line 118 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 28;}
	break;
	case 33:
/* #line 120 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 30;}
	break;
	case 34:
/* #line 121 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 31;}
	break;
	case 35:
/* #line 122 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 32;}
	break;
	case 36:
/* #line 123 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 33;}
	break;
	case 37:
/* #line 124 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 34;}
	break;
	case 38:
/* #line 125 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 35;}
	break;
	case 39:
/* #line 126 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 36;}
	break;
	case 40:
/* #line 127 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 37;}
	break;
	case 41:
/* #line 128 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 38;}
	break;
	case 42:
/* #line 129 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 39;}
	break;
	case 43:
/* #line 130 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 40;}
	break;
	case 44:
/* #line 131 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 41;}
	break;
	case 45:
/* #line 132 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 42;}
	break;
	case 46:
/* #line 133 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 43;}
	break;
	case 47:
/* #line 134 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 44;}
	break;
	case 48:
/* #line 135 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 45;}
	break;
	case 49:
/* #line 142 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 47;}
	break;
	case 50:
/* #line 143 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 48;}
	break;
	case 51:
/* #line 144 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 49;}
	break;
	case 52:
/* #line 145 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 50;}
	break;
	case 53:
/* #line 146 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 51;}
	break;
	case 54:
/* #line 147 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 52;}
	break;
	case 55:
/* #line 148 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 53;}
	break;
	case 56:
/* #line 149 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 54;}
	break;
	case 57:
/* #line 150 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 55;}
	break;
	case 58:
/* #line 151 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 56;}
	break;
	case 59:
/* #line 153 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 58;}
	break;
	case 60:
/* #line 154 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 59;}
	break;
	case 61:
/* #line 161 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 61;}
	break;
	case 62:
/* #line 162 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 62;}
	break;
	case 63:
/* #line 163 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 63;}
	break;
	case 64:
/* #line 164 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 64;}
	break;
	case 65:
/* #line 170 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 65;}
	break;
	case 66:
/* #line 171 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 66;}
	break;
	case 67:
/* #line 172 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 67;}
	break;
	case 68:
/* #line 173 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 68;}
	break;
	case 69:
/* #line 174 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 69;}
	break;
	case 70:
/* #line 175 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 70;}
	break;
	case 71:
/* #line 176 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 71;}
	break;
	case 72:
/* #line 177 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 72;}
	break;
	case 73:
/* #line 178 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 73;}
	break;
	case 74:
/* #line 179 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 74;}
	break;
	case 75:
/* #line 185 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 75;}
	break;
	case 76:
/* #line 186 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 76;}
	break;
	case 77:
/* #line 187 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 77;}
	break;
	case 78:
/* #line 188 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 78;}
	break;
	case 79:
/* #line 194 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 79;}
	break;
	case 80:
/* #line 195 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 80;}
	break;
	case 81:
/* #line 196 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 81;}
	break;
	case 82:
/* #line 197 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 82;}
	break;
	case 83:
/* #line 199 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 84;}
	break;
	case 84:
/* #line 200 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 85;}
	break;
	case 85:
/* #line 201 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 86;}
	break;
	case 86:
/* #line 202 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 87;}
	break;
	case 87:
/* #line 203 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 88;}
	break;
	case 88:
/* #line 204 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 89;}
	break;
	case 89:
/* #line 205 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 90;}
	break;
	case 90:
/* #line 206 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 91;}
	break;
	case 91:
/* #line 212 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 92;}
	break;
	case 92:
/* #line 213 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 93;}
	break;
	case 93:
/* #line 251 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 120;}
	break;
	case 94:
/* #line 252 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 121;}
	break;
	case 95:
/* #line 253 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 122;}
	break;
	case 96:
/* #line 254 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 123;}
	break;
	case 97:
/* #line 256 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 125;}
	break;
	case 98:
/* #line 268 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 133;}
	break;
	case 99:
/* #line 220 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Inc); }}
	break;
	case 100:
/* #line 221 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Dec); }}
	break;
	case 101:
/* #line 222 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Ptr); }}
	break;
	case 102:
/* #line 225 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_LogAnd); }}
	break;
	case 103:
/* #line 226 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_LogOr); }}
	break;
	case 104:
/* #line 227 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Eq); }}
	break;
	case 105:
/* #line 228 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Ne); }}
	break;
	case 106:
/* #line 229 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Le); }}
	break;
	case 107:
/* #line 230 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Ge); }}
	break;
	case 108:
/* #line 231 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_RefAssign); }}
	break;
	case 109:
/* #line 232 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_AddAssign); }}
	break;
	case 110:
/* #line 233 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_SubAssign); }}
	break;
	case 111:
/* #line 234 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_MulAssign); }}
	break;
	case 112:
/* #line 235 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_DivAssign); }}
	break;
	case 113:
/* #line 236 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_ModAssign); }}
	break;
	case 114:
/* #line 237 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_ShlAssign); }}
	break;
	case 115:
/* #line 238 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_ShrAssign); }}
	break;
	case 116:
/* #line 239 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_AndAssign); }}
	break;
	case 117:
/* #line 240 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_XorAssign); }}
	break;
	case 118:
/* #line 241 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_OrAssign); }}
	break;
	case 119:
/* #line 242 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_AtAssign); }}
	break;
	case 120:
/* #line 243 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Ellipsis); }}
	break;
	case 121:
/* #line 245 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ PreCreateFmtLiteralToken (); {
	stack = PrePush ();
{stack[top++] = cs; cs = 342; goto _again;}} }}
	break;
	case 122:
/* #line 252 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateCharToken (EToken_Integer); }}
	break;
	case 123:
/* #line 253 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateStringToken (EToken_Literal, 1, 1); }}
	break;
	case 124:
/* #line 256 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateHexLiteralToken (); }}
	break;
	case 125:
/* #line 261 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;}
	break;
	case 126:
/* #line 263 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ OnLeftParentheses (); }}
	break;
	case 127:
/* #line 264 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ if (!OnRightParentheses ()) {cs = stack[--top]; {
	PostPop ();
}goto _again;} }}
	break;
	case 128:
/* #line 267 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;}
	break;
	case 129:
/* #line 268 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (ts [0]); }}
	break;
	case 130:
/* #line 119 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateToken (EToken_Const); }}
	break;
	case 131:
/* #line 141 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateToken (EToken_Auto); }}
	break;
	case 132:
/* #line 152 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateToken (EToken_Int); }}
	break;
	case 133:
/* #line 160 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateToken (EToken_Enum); }}
	break;
	case 134:
/* #line 198 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateToken (EToken_Do); }}
	break;
	case 135:
/* #line 214 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateToken (EToken_Null); }}
	break;
	case 136:
/* #line 223 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateToken (EToken_Shl); }}
	break;
	case 137:
/* #line 224 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateToken (EToken_Shr); }}
	break;
	case 138:
/* #line 251 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateStringToken (EToken_Identifier); }}
	break;
	case 139:
/* #line 252 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateCharToken (EToken_Integer); }}
	break;
	case 140:
/* #line 253 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateStringToken (EToken_Literal, 1, 1); }}
	break;
	case 141:
/* #line 254 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateIntegerToken (10); }}
	break;
	case 142:
/* #line 255 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateIntegerToken (16, 2); }}
	break;
	case 143:
/* #line 256 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateHexLiteralToken (); }}
	break;
	case 144:
/* #line 258 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateFpToken (); }}
	break;
	case 145:
/* #line 260 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;}
	break;
	case 146:
/* #line 265 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ if (!OnColon ()) {
	stack = PrePush ();
{stack[top++] = cs; cs = 346; goto _again;}} }}
	break;
	case 147:
/* #line 267 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;}
	break;
	case 148:
/* #line 268 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateToken (ts [0]); }}
	break;
	case 149:
/* #line 254 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{{p = ((te))-1;}{ CreateIntegerToken (10); }}
	break;
	case 150:
/* #line 268 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */
	{{p = ((te))-1;}{ CreateToken (ts [0]); }}
	break;
	case 151:
/* #line 1 "NONE" */
	{	switch( act ) {
	case 8:
	{{p = ((te))-1;} CreateToken (EToken_Namespace); }
	break;
	case 9:
	{{p = ((te))-1;} CreateToken (EToken_Using); }
	break;
	case 10:
	{{p = ((te))-1;} CreateToken (EToken_Extend); }
	break;
	case 11:
	{{p = ((te))-1;} CreateToken (EToken_Pack); }
	break;
	case 12:
	{{p = ((te))-1;} CreateToken (EToken_Typedef); }
	break;
	case 13:
	{{p = ((te))-1;} CreateToken (EToken_Alias); }
	break;
	case 14:
	{{p = ((te))-1;} CreateToken (EToken_Static); }
	break;
	case 15:
	{{p = ((te))-1;} CreateToken (EToken_Thread); }
	break;
	case 16:
	{{p = ((te))-1;} CreateToken (EToken_Stack); }
	break;
	case 17:
	{{p = ((te))-1;} CreateToken (EToken_Heap); }
	break;
	case 18:
	{{p = ((te))-1;} CreateToken (EToken_UHeap); }
	break;
	case 19:
	{{p = ((te))-1;} CreateToken (EToken_Abstract); }
	break;
	case 20:
	{{p = ((te))-1;} CreateToken (EToken_Virtual); }
	break;
	case 21:
	{{p = ((te))-1;} CreateToken (EToken_Override); }
	break;
	case 22:
	{{p = ((te))-1;} CreateToken (EToken_Public); }
	break;
	case 23:
	{{p = ((te))-1;} CreateToken (EToken_Protected); }
	break;
	case 24:
	{{p = ((te))-1;} CreateToken (EToken_Friend); }
	break;
	case 25:
	{{p = ((te))-1;} CreateToken (EToken_Signed); }
	break;
	case 26:
	{{p = ((te))-1;} CreateToken (EToken_Unsigned); }
	break;
	case 27:
	{{p = ((te))-1;} CreateToken (EToken_BigEndian); }
	break;
	case 28:
	{{p = ((te))-1;} CreateToken (EToken_Nullable); }
	break;
	case 30:
	{{p = ((te))-1;} CreateToken (EToken_ReadOnly); }
	break;
	case 31:
	{{p = ((te))-1;} CreateToken (EToken_Mutable); }
	break;
	case 32:
	{{p = ((te))-1;} CreateToken (EToken_Volatile); }
	break;
	case 33:
	{{p = ((te))-1;} CreateToken (EToken_Weak); }
	break;
	case 34:
	{{p = ((te))-1;} CreateToken (EToken_Thin); }
	break;
	case 35:
	{{p = ((te))-1;} CreateToken (EToken_Unsafe); }
	break;
	case 36:
	{{p = ((te))-1;} CreateToken (EToken_Cdecl); }
	break;
	case 37:
	{{p = ((te))-1;} CreateToken (EToken_Stdcall); }
	break;
	case 38:
	{{p = ((te))-1;} CreateToken (EToken_Function); }
	break;
	case 39:
	{{p = ((te))-1;} CreateToken (EToken_Property); }
	break;
	case 40:
	{{p = ((te))-1;} CreateToken (EToken_Multicast); }
	break;
	case 41:
	{{p = ((te))-1;} CreateToken (EToken_Event); }
	break;
	case 42:
	{{p = ((te))-1;} CreateToken (EToken_AutoEv); }
	break;
	case 43:
	{{p = ((te))-1;} CreateToken (EToken_Bindable); }
	break;
	case 44:
	{{p = ((te))-1;} CreateToken (EToken_AutoGet); }
	break;
	case 45:
	{{p = ((te))-1;} CreateToken (EToken_Indexed); }
	break;
	case 47:
	{{p = ((te))-1;} CreateToken (EToken_Void); }
	break;
	case 48:
	{{p = ((te))-1;} CreateToken (EToken_Object); }
	break;
	case 49:
	{{p = ((te))-1;} CreateToken (EToken_Variant); }
	break;
	case 50:
	{{p = ((te))-1;} CreateToken (EToken_Bool); }
	break;
	case 51:
	{{p = ((te))-1;} CreateToken (EToken_Int8); }
	break;
	case 52:
	{{p = ((te))-1;} CreateToken (EToken_Int16); }
	break;
	case 53:
	{{p = ((te))-1;} CreateToken (EToken_Int32); }
	break;
	case 54:
	{{p = ((te))-1;} CreateToken (EToken_Int64); }
	break;
	case 55:
	{{p = ((te))-1;} CreateToken (EToken_Float); }
	break;
	case 56:
	{{p = ((te))-1;} CreateToken (EToken_Double); }
	break;
	case 58:
	{{p = ((te))-1;} CreateToken (EToken_IntPtr); }
	break;
	case 59:
	{{p = ((te))-1;} CreateToken (EToken_Char); }
	break;
	case 61:
	{{p = ((te))-1;} CreateToken (EToken_EnumC); }
	break;
	case 62:
	{{p = ((te))-1;} CreateToken (EToken_Struct); }
	break;
	case 63:
	{{p = ((te))-1;} CreateToken (EToken_Union); }
	break;
	case 64:
	{{p = ((te))-1;} CreateToken (EToken_Class); }
	break;
	case 65:
	{{p = ((te))-1;} CreateToken (EToken_Get); }
	break;
	case 66:
	{{p = ((te))-1;} CreateToken (EToken_Set); }
	break;
	case 67:
	{{p = ((te))-1;} CreateToken (EToken_This); }
	break;
	case 68:
	{{p = ((te))-1;} CreateToken (EToken_PreConstruct); }
	break;
	case 69:
	{{p = ((te))-1;} CreateToken (EToken_Construct); }
	break;
	case 70:
	{{p = ((te))-1;} CreateToken (EToken_Destruct); }
	break;
	case 71:
	{{p = ((te))-1;} CreateToken (EToken_Operator); }
	break;
	case 72:
	{{p = ((te))-1;} CreateToken (EToken_Postfix); }
	break;
	case 73:
	{{p = ((te))-1;} CreateToken (EToken_PropValue); }
	break;
	case 74:
	{{p = ((te))-1;} CreateToken (EToken_OnChange); }
	break;
	case 75:
	{{p = ((te))-1;} CreateToken (EToken_New); }
	break;
	case 76:
	{{p = ((te))-1;} CreateToken (EToken_Delete); }
	break;
	case 77:
	{{p = ((te))-1;} CreateToken (EToken_SizeOf); }
	break;
	case 78:
	{{p = ((te))-1;} CreateToken (EToken_TypeOf); }
	break;
	case 79:
	{{p = ((te))-1;} CreateToken (EToken_If); }
	break;
	case 80:
	{{p = ((te))-1;} CreateToken (EToken_Else); }
	break;
	case 81:
	{{p = ((te))-1;} CreateToken (EToken_For); }
	break;
	case 82:
	{{p = ((te))-1;} CreateToken (EToken_While); }
	break;
	case 84:
	{{p = ((te))-1;} CreateToken (EToken_Break); }
	break;
	case 85:
	{{p = ((te))-1;} CreateToken (EToken_Continue); }
	break;
	case 86:
	{{p = ((te))-1;} CreateToken (EToken_Return); }
	break;
	case 87:
	{{p = ((te))-1;} CreateToken (EToken_Switch); }
	break;
	case 88:
	{{p = ((te))-1;} CreateToken (EToken_Case); }
	break;
	case 89:
	{{p = ((te))-1;} CreateToken (EToken_Default); }
	break;
	case 90:
	{{p = ((te))-1;} CreateToken (EToken_Once); }
	break;
	case 91:
	{{p = ((te))-1;} CreateToken (EToken_Silent); }
	break;
	case 92:
	{{p = ((te))-1;} CreateToken (EToken_True); }
	break;
	case 93:
	{{p = ((te))-1;} CreateToken (EToken_False); }
	break;
	case 120:
	{{p = ((te))-1;} CreateStringToken (EToken_Identifier); }
	break;
	case 121:
	{{p = ((te))-1;} CreateCharToken (EToken_Integer); }
	break;
	case 122:
	{{p = ((te))-1;} CreateStringToken (EToken_Literal, 1, 1); }
	break;
	case 123:
	{{p = ((te))-1;} CreateIntegerToken (10); }
	break;
	case 125:
	{{p = ((te))-1;} CreateHexLiteralToken (); }
	break;
	case 133:
	{{p = ((te))-1;} CreateToken (ts [0]); }
	break;
	}
	}
	break;
/* #line 1936 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl.cpp" */
		}
	}

_again:
	_acts = _axl_jnc_actions + _axl_jnc_to_state_actions[cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 1:
/* #line 1 "NONE" */
	{ts = 0;}
	break;
/* #line 1947 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl.cpp" */
		}
	}

	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	if ( _axl_jnc_eof_trans[cs] > 0 ) {
		_trans = _axl_jnc_eof_trans[cs] - 1;
		goto _eof_trans;
	}
	}

	}

/* #line 286 "D:/Prj/Ninja/axl/src/axl_jnc/axl_jnc_Lexer.rl" */

	bool Result = cs != axl_jnc_error;
	if (!Result)
	{
		CToken* pToken = CreateToken (EToken_Error);
		pToken->m_Data.m_Error.CreateStringError ("lexer error");
	}

	return Result;
}

//.............................................................................

} // namespace jnc {
} // namespace axl {


