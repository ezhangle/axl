//.............................................................................

start
expression_save_value_s
	:	expression_s
			{
				m_ExpressionValue = $1.m_Value;
			}
	;

class
{
	CValue m_Value;	
}
start
expression_s
	:	conditional_expr_s <&$.m_Value>
	;

class 
{
	CValue m_Value;
}
nullable
expression_or_empty_s
	:	conditional_expr_s <&$.m_Value>
	|	epsilon
	;

class
{
	rtl::CBoxListT <CValue> m_ValueList;
}
expression_list_s
	:	expression_s 
			{
				$.m_ValueList.InsertTail ($1.m_Value);
			}
		(',' expression_s $e2
			{
				$.m_ValueList.InsertTail ($e2.m_Value);
			}
		)*
	;

// expression_or_empty_list might seem overcomplicated but
// this is done to avoid having a singe EValue_Void in case of empty list

class
{
	rtl::CBoxListT <CValue> m_ValueList;
}
nullable
expression_or_empty_list_s
	:	expression_s
			{
				$.m_ValueList.InsertTail ($1.m_Value);
			}
		(',' expression_or_empty_s $e2
			{
				$.m_ValueList.InsertTail ($e2.m_Value);
			}
		)*
	|		{
				$.m_ValueList.InsertTail (CValue ());
			}	
		(',' expression_or_empty_s $e2
			{
				$.m_ValueList.InsertTail ($e2.m_Value);
			}
		)+
	|	epsilon 
	;

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

conditional_expr_s <CValue* $pValue>
	local 
	{
		CValue $TrueValue;
		CValue $FalseValue;
	}
	:	logical_or_expr_s <$pValue> 
		('?' conditional_expr_s <&$TrueValue> ':' conditional_expr_s <&$FalseValue>
			{
				return m_pModule->m_OperatorMgr.GetConditionalOperatorResultType ($TrueValue, $FalseValue, $pValue);
			}
		)?
	;

logical_or_expr_s <CValue* $pValue>
	local
	{
		CValue $OpValue2;
	}
	:	logical_and_expr_s <$pValue> 
		(EToken_LogOr logical_and_expr_s <&$OpValue2>
			{
				return m_pModule->m_OperatorMgr.GetBinaryOperatorResultType (EBinOp_LogAnd, $pValue, $OpValue2);
			}
		)*
	;

logical_and_expr_s <CValue* $pValue>
	local
	{
		CValue $OpValue2;
	}
	:	inclusive_or_expr_s <$pValue> 
		(EToken_LogAnd inclusive_or_expr_s <&$OpValue2>
			{
				return m_pModule->m_OperatorMgr.GetBinaryOperatorResultType (EBinOp_LogOr, $pValue, $OpValue2);
			}
		)*
	;

inclusive_or_expr_s <CValue* $pValue>
	local
	{
		CValue $OpValue2;
	}
	:	exclusive_or_expr_s <$pValue> 
		('|' exclusive_or_expr_s <&$OpValue2>
			{
				return m_pModule->m_OperatorMgr.GetBinaryOperatorResultType (EBinOp_BwOr, $pValue, $OpValue2);
			}
		)*
	;

exclusive_or_expr_s <CValue* $pValue>
	local
	{
		CValue $OpValue2;
	}
	:	and_expr_s <$pValue> 
		('^' and_expr_s <&$OpValue2>
			{
				return m_pModule->m_OperatorMgr.GetBinaryOperatorResultType (EBinOp_BwXor, $pValue, $OpValue2);
			}
		)*
	;

and_expr_s <CValue* $pValue>
	local
	{
		CValue $OpValue2;
	}
	:	equality_expr_s <$pValue> 
		('&' equality_expr_s <&$OpValue2>
			{
				return m_pModule->m_OperatorMgr.GetBinaryOperatorResultType (EBinOp_BwAnd, $pValue, $OpValue2);
			}
		)*
	;

equality_expr_s <CValue* $pValue>
	local
	{
		CValue $OpValue2;
	}
	:	relational_expr_s <$pValue> 
		(equality_operator $o relational_expr_s <&$OpValue2>
			{
				return m_pModule->m_OperatorMgr.GetBinaryOperatorResultType ($o.m_OpKind, $pValue, $OpValue2);
			}
		)*
	;

relational_expr_s <CValue* $pValue>
	local
	{
		CValue $OpValue2;
	}
	:	shift_expr_s <$pValue> 
		(relational_operator $o shift_expr_s <&$OpValue2>
			{
				return m_pModule->m_OperatorMgr.GetBinaryOperatorResultType ($o.m_OpKind, $pValue, $OpValue2);
			}
		)*
	;

shift_expr_s <CValue* $pValue>
	local
	{
		CValue $OpValue2;
	}
	:	additive_expr_s <$pValue> 
		(shift_operator $o additive_expr_s <&$OpValue2>
			{
				return m_pModule->m_OperatorMgr.GetBinaryOperatorResultType ($o.m_OpKind, $pValue, $OpValue2);
			}
		)*
	;

additive_expr_s <CValue* $pValue>
	local
	{
		CValue $OpValue2;
	}
	:	multiplicative_expr_s <$pValue> 
		(additive_operator $o multiplicative_expr_s <&$OpValue2>
			{
				return m_pModule->m_OperatorMgr.GetBinaryOperatorResultType ($o.m_OpKind, $pValue, $OpValue2);
			}
		)*
	;

multiplicative_expr_s <CValue* $pValue>
	local
	{
		CValue $OpValue2;
	}
	:	at_expr_s <$pValue> 
		(multiplicative_operator $o at_expr_s <&$OpValue2>
			{
				return m_pModule->m_OperatorMgr.GetBinaryOperatorResultType ($o.m_OpKind, $pValue, $OpValue2);
			}
		)*
	;

at_expr_s <CValue* $pValue>
	local
	{
		CValue $OpValue2;
	}
	:	assignment_expr_s <$pValue> 
		('@' assignment_expr_s <&$OpValue2>
			{
				return m_pModule->m_OperatorMgr.GetBinaryOperatorResultType (EBinOp_At, $pValue, $OpValue2);
			}
		)*
	;

assignment_expr_s <CValue* $pValue>
	local
	{
		CValue $OpValue2;
	}
	:	unary_expr_s <$pValue> 
		(
				{
					if (IsReactor ())
						m_ReactorBindSiteCount = 0; // reset on assignment
				}
			assignment_operator $o conditional_expr_s <&$OpValue2>
				{
					return m_pModule->m_OperatorMgr.GetBinaryOperatorResultType ($o.m_OpKind, $pValue, $OpValue2);
				}
		)?
	;

unary_expr_s <CValue* $pValue>
	:	postfix_expr_s <$pValue> 
	|	unary_operator_expr_s <$pValue> 
	;

unary_operator_expr_s <CValue* $pValue>
	leave 
	{
		if (IsReactor () && IsBindableType ($pValue->GetType ()))
			m_ReactorBindSiteCount++;
	}
	:	'+' unary_expr_s <$pValue> 
			{
				return m_pModule->m_OperatorMgr.GetUnaryOperatorResultType (EUnOp_Plus, $pValue);
			}
	|	'-' unary_expr_s <$pValue> 
			{
				return m_pModule->m_OperatorMgr.GetUnaryOperatorResultType (EUnOp_Minus, $pValue);
			}
	|	'~' unary_expr_s <$pValue> 
			{
				return m_pModule->m_OperatorMgr.GetUnaryOperatorResultType (EUnOp_BwNot, $pValue);
			}
	|	'&' unary_expr_s <$pValue> 
			{
				return m_pModule->m_OperatorMgr.GetUnaryOperatorResultType (EUnOp_Addr, $pValue);
			}
	|	'*' unary_expr_s <$pValue> 
			{
				return m_pModule->m_OperatorMgr.GetUnaryOperatorResultType (EUnOp_Indir, $pValue);
			}
	|	'!' unary_expr_s <$pValue> 
			{
				return m_pModule->m_OperatorMgr.GetUnaryOperatorResultType (EUnOp_LogNot, $pValue);
			}
	|	EToken_Inc unary_expr_s <$pValue> 
			{
				return m_pModule->m_OperatorMgr.GetUnaryOperatorResultType (EUnOp_PreInc, $pValue);
			}
	|	EToken_Dec unary_expr_s <$pValue> 
			{
				return m_pModule->m_OperatorMgr.GetUnaryOperatorResultType (EUnOp_PreDec, $pValue);
			}
	|	EToken_Try unary_expr_s <$pValue> 
			{
				// try operator does not change type of value				
			}
	|	EToken_SizeOf '(' type_name_or_expr $t ')'
			{
				$pValue->SetType (EType_SizeT);
			}
	|	EToken_CountOf '(' type_name_or_expr $t ')'
			{
				$pValue->SetType (EType_SizeT);
			}
	|	EToken_TypeOf '(' type_name_or_expr $t ')'
			{
				CType* pType = $t.m_pType->GetTypeKind () == EType_DataRef ? ((CDataPtrType*) $t.m_pType)->GetTargetType () : $t.m_pType;
				$pValue->SetType ($t.m_pType);
			}
	|	EToken_OffsetOf '(' type_name $t ',' EToken_Identifier $n ')' 
			{
			}
	|	EToken_BindingOf '(' conditional_expr_s <$pValue> ')' 
			{
				return m_pModule->m_OperatorMgr.GetPropertyOnChangeType ($pValue);
			}
	|	resolver (cast_operator_rslv) 
		'(' storage_specifier? type_name $t ')' unary_expr_s <$pValue> 
			{
				$pValue->SetType ($t.m_pType);
			}
	|	storage_specifier $s? EToken_New new_operator_sype_s $t
			{
				EStorage StorageKind = IsValidLocator ($s) ? $s.m_StorageKind : EStorage_Heap;
				return NewOperator_s (StorageKind, $t.m_pType, $pValue);			
			}
	|	EToken_Delete unary_expr_s <$pValue> 
			{
				$pValue->SetVoid ();
			}
	;

class
{
	CType* m_pType;
}
new_operator_sype_s
	:	type_name
			{
				$.m_pType = $1.m_pType;
			}
	|	resolver (type_name_w_constructor_rslv) priority (2) // set higher priority than type_specifier::qualified_name
		qualified_type_name $t EToken_Construct? '(' expression_or_empty_list_s ')'
			{
				$.m_pType = $t.m_pType;
			}
	;

postfix_expr_s <CValue* $pValue>
	:	primary_expr_s <$pValue>
		postfix_operator_s <$pValue>*
	;

postfix_operator_s <CValue* $pValue>
	leave 
	{
		if (IsReactor () && IsBindableType ($pValue->GetType ()))
			m_ReactorBindSiteCount++;
	}
	:	'(' expression_or_empty_list_s ')'
			{
				return m_pModule->m_OperatorMgr.GetCallOperatorResultType ($pValue, &$2.m_ValueList);
			}		
	|	'~' '(' expression_or_empty_list_s ')'
			{
				return m_pModule->m_OperatorMgr.GetClosureOperatorResultType ($pValue, &$3.m_ValueList);
			}		
	|	'[' expression_or_empty_s ']'
			{
				return m_pModule->m_OperatorMgr.GetBinaryOperatorResultType (EBinOp_Idx, $pValue, $2.m_Value);
			}	
	|	EToken_Inc
			{
				return m_pModule->m_OperatorMgr.GetUnaryOperatorResultType (EUnOp_PostInc, $pValue);
			}
	|	EToken_Dec
			{
				return m_pModule->m_OperatorMgr.GetUnaryOperatorResultType (EUnOp_PostDec, $pValue);
			}
	|	'.'
		(EToken_Weak
			{
				return m_pModule->m_OperatorMgr.GetWeakenOperatorResultType ($pValue);
			}
		)?
		member_operator_s <$pValue>
	|	EToken_Ptr 
			{
				return m_pModule->m_OperatorMgr.GetUnaryOperatorResultType (EUnOp_Ptr, $pValue);
			}
		member_operator_s <$pValue>
	;

member_operator_s <CValue* $pValue>
	:	EToken_Identifier $n
			{
				return m_pModule->m_OperatorMgr.GetMemberOperatorResultType ($pValue, $n.m_Data.m_String);
			}
	|	EToken_Get
			{
				return m_pModule->m_OperatorMgr.GetPropertyGetterType ($pValue);
			}
	|	EToken_Set
			{
				return m_pModule->m_OperatorMgr.GetPropertySetterType ($pValue);
			}
	;

primary_expr_s <CValue* $pValue>
	leave 
	{
		if (IsReactor () && IsBindableType ($pValue->GetType ()))
			m_ReactorBindSiteCount++;
	}
	:	EToken_Identifier
			{
				return LookupIdentifierType ($1.m_Data.m_String, $pValue);
			}
	|	EToken_This
			{
				return GetThisValueType ($pValue);
			}
	|	EToken_RetVal
			{
				return GetPitcherReturnValueType ($pValue);
			}
	|	EToken_Integer
			{
				$pValue->SetType (GetInt64TypeKind ($1.m_Data.m_Int64));
			}
	|	EToken_Fp
			{
				$pValue->SetType (EType_Double);
			}
	|	EToken_True
			{
				$pValue->SetType (EType_Bool);
			}
	|	EToken_False
			{
				$pValue->SetType (EType_Bool);
			}
	|	EToken_Null
			{
				$pValue->SetNull ();
			}
	|	literal_s <$pValue> 
	|	'(' conditional_expr_s <$pValue> ')'
	;

literal_s <CValue* $pValue>
	local
	{
		TLiteral $Literal;
	}
	:	(	EToken_Literal 
				{			
					$Literal.m_BinData.Append ((const uchar_t*) $1.m_Data.m_String.cc (), $1.m_Data.m_String.GetLength ());
					$Literal.m_LastToken = EToken_Literal;
				}
		|	EToken_HexLiteral
				{			
					$Literal.m_BinData.Append ($2.m_Data.m_BinData, $2.m_Data.m_BinData.GetCount ());
					$Literal.m_LastToken = EToken_HexLiteral;
				}
		|	EToken_FmtLiteral expression $e EToken_FmtSpecifier $f?				
				{
					// mark we have a formatting literal from now on

					if (!$Literal.m_FmtLiteralValue)
						$Literal.m_FmtLiteralValue.SetConstBool (true); 
				}
		)+
			{
				return FinalizeLiteral_s (&$Literal, $pValue);
			}
	;

//.............................................................................
