//.............................................................................

class
{
	rtl::CBoxListT <CToken> m_TokenList;
}
expression_pass1
	: primary_expression_pass1 <&$.m_TokenList>+
	;

noast
primary_expression_pass1 <rtl::CBoxListT <CToken>* $pTokenList>
	: '{' primary_expression_pass1 <$pTokenList>+ '}'
	| '[' primary_expression_pass1 <$pTokenList>+ ']'
	| '(' primary_expression_pass1 <$pTokenList>* ')'
	| any
		{
			$pTokenList->InsertTail ($1);
		}
	;

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

start
expression
	: logical_or_expression ('?' expression ':' expression)?
	;

class
{
	CValue* m_pValue;
}
constant_expression
	: expression
		{
			$.m_pValue = NULL;
		}
	;

class
{
	intptr_t m_Value;
}
constant_integer_expression
	: expression
		{
			$.m_Value = 10;
		}
	;

logical_or_expression
	: logical_and_expression (EToken_LogicalOr logical_and_expression)*
	;

logical_and_expression
	: inclusive_or_expression (EToken_LogicalAnd inclusive_or_expression)*
	;

inclusive_or_expression
	: exclusive_or_expression ('|' exclusive_or_expression)*
	;

exclusive_or_expression
	: and_expression ('^' and_expression)*
	;

and_expression
	: equality_expression ('&' equality_expression)*
	;

equality_expression
	: relational_expression (equality_operator relational_expression)*
	;

equality_operator
	: EToken_Eq
	| EToken_Ne
	;

relational_expression
	: shift_expression (relational_operator shift_expression)*
	;

relational_operator
	: '<'
	| '>'
	| EToken_Le
	| EToken_Ge
	;

shift_expression
	: additive_expression (shift_operator additive_expression)*
	;

shift_operator
	: EToken_Shl
	| EToken_Shr
	;

additive_expression
	: multiplicative_expression (additivie_operator multiplicative_expression)*
	;

additivie_operator
	: '+'
	| '-'
	;

multiplicative_expression
	: unary_expression (multiplicative_operator unary_expression)*
	;

multiplicative_operator
	: '*'
	| '/'
	| '%'
	;

unary_expression
	: unary_operator* postfix_expression (assignment_operator expression)?
	;

unary_operator
	: '&'
	| '*'
	| '+'
	| '-'
	| '~'
	| '!'
	| EToken_Inc
	| EToken_Dec
	| EToken_SizeOf
	| EToken_TypeOf
	| '(' type_name ')'
	;

assignment_operator
	: '='
	| EToken_AddAssign
	| EToken_AddAssign
	| EToken_MulAssign
	| EToken_DivAssign
	| EToken_ModAssign
	| EToken_ShlAssign
	| EToken_ShrAssign
	| EToken_AndAssign
	| EToken_XorAssign
	| EToken_OrAssign
	;

postfix_expression
	: primary_expression postfix_operator*
	;

postfix_operator
	: member_operator
	| index_operator
	| call_operator
	| EToken_Inc
	| EToken_Dec
	;

member_operator
	: '.' EToken_Identifier
	; 

index_operator
	: '[' expression ']'
	; 

call_operator
	: '(' expression (',' expression)* ')'
	| '(' ')'
	; 

primary_expression
	: EToken_Identifier
	| EToken_Integer
	| EToken_Fp
	| EToken_Literal
	| '(' expression ')'
	;

//.............................................................................
