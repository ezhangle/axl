//.............................................................................

class
{
	CStructType* m_pType;
}
struct_specifier
	: struct_kind $k 
	  EToken_Identifier $n?
		{
			$.m_pType = DeclareStructType (
				$k.m_Type,
				IsValidLocator ($n) ? $n.m_Data.m_String : rtl::CString ()
				);

			if (!$.m_pType)
				return false;
		}
	  generic_formal_argument_list <$.m_pType>?
	  inheritance_list <$.m_pType>?
	  struct_block <$.m_pType>
	;

class
{
	EType m_Type;
}
struct_kind
	: EToken_Struct
		{
			$.m_Type = EType_Struct;
		}
	| EToken_Union
		{
			$.m_Type = EType_Union;
		}
	;

struct_block <CStructType* $pType>
	: '{' 
		{
			m_pModule->m_NamespaceMgr.OpenNamespace ($pType);	
		}
	  struct_member_declaration <$pType>* 
	  '}'
		{
			m_pModule->m_NamespaceMgr.CloseNamespace ();
		}
	;

struct_member_declaration <CStructType* $pType>
	: attribute_block?
	  type_specifier_modifier_list $s
	  struct_member_declarator_list <&$s.m_TypeSpecifier, $pType>
	  ';'
	| compound_statement_pass1
	| ';'
	;

struct_member_declarator_list <CTypeSpecifierModifiers* $pTypeSpecifier, CStructType* $pType>
	: struct_member_declarator <$pTypeSpecifier, $pType> (',' struct_member_declarator <$pTypeSpecifier, $pType>)*
	;

struct_member_declarator <CTypeSpecifierModifiers* $pTypeSpecifier, CStructType* $pType>
	: declarator (':' struct_member_bit_field)? ('=' initializer)?
		{
			bool Result = DeclareStructMember ($pType, $pTypeSpecifier, &$1.m_Declarator) != NULL;
			if (!Result)
				return false;
		}
	;

struct_member_bit_field
	: constant_integer_expression
	;

//.............................................................................
