//.............................................................................

class
{
	CEnumType* m_pType;
}
enum_specifier
	leave
	{
		if ($.m_pType->GetTypeKind () == EType_EnumC ||
			$.m_pType->GetName ().IsEmpty ())
		{
			bool Result = m_pModule->m_NamespaceMgr.GetCurrentNamespace ()->ExposeEnumMembers ($.m_pType);
			if (!Result)
				return false;
		}
	}
	: enum_kind $k 
	  EToken_Identifier $n?
		{
			$.m_pType = DeclareEnumType (
				$k.m_Type,
				IsValidLocator ($n) ? $n.m_Data.m_String : rtl::CString ()
				);

			if (!$.m_pType)
				return false;
		}	
	  enum_block <$.m_pType>
	;

class
{
	EType m_Type;
}
enum_kind
	: EToken_Enum
		{
			$.m_Type = EType_Enum;
		}
	| EToken_EnumC
		{
			$.m_Type = EType_EnumC;
		}
	;

enum_block <CEnumType* $pType>
	: '{' 
		{
			m_pModule->m_NamespaceMgr.OpenNamespace ($pType);	
		}
	  enum_member_list <$pType> 
	  '}'
		{
			m_pModule->m_NamespaceMgr.CloseNamespace ();	
		}
	;

enum_member_list <CEnumType* $pType>
	: enum_member <$pType> (',' enum_member <$pType>)*
	;

enum_member <CEnumType* $pType>
	: EToken_Identifier ('=' expression_pass1 $e)?
		{
			CEnumMember* pMember = $pType->CreateMember ($1.m_Data.m_String);
			if (!pMember)
				return false;

			pMember->m_Pos = $1.m_Pos;
			
			if (IsValidLocator ($e)) 
				pMember->SetExpression (&$e.m_TokenList);
		}
	| epsilon
	;

//.............................................................................
