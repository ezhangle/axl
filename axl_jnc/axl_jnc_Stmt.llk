//.............................................................................

class
{
	rtl::CBoxListT <CToken> m_TokenList;
}
function_body_pass1
	: compound_stmt_pass1 <&$.m_TokenList>
	;

noast
compound_stmt_pass1 <rtl::CBoxListT <CToken>* $pTokenList>
	: '{' $l
		{
			$pTokenList->InsertTail ($l);
		}
	  statement_pass1 <$pTokenList>* 
	  '}' $r
		{
			$pTokenList->InsertTail ($r);
		}
	;

noast
statement_pass1 <rtl::CBoxListT <CToken>* $pTokenList>
	: compound_stmt_pass1 <$pTokenList>
	| any
		{
			$pTokenList->InsertTail ($1);
		}
	;

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

class CCompoundStmt
{
	CScope* m_pScope;
}
start
compound_stmt
	: '{' $l
		{
			$.m_pScope = m_pModule->m_NamespaceMgr.OpenScope ($l.m_Pos);
		}
	  local_declaration* 
	  '}' $r
		{
			m_pModule->m_NamespaceMgr.CloseScope ($r.m_Pos);
		}
	;

noast
statement
	: compound_stmt
	| expression_stmt
	| if_stmt
	| switch_stmt
	| while_stmt
	| do_stmt
	| for_stmt
	| break_stmt
	| continue_stmt
	| return_stmt
	| ';'
	;

expression_stmt
	: expression ';'
	;

if_stmt
	: EToken_If '(' expression ')' statement (EToken_Else statement)?
	;

switch_stmt
	: EToken_Switch '(' expression ')' '{' switch_block_stmt* '}'
	;

switch_block_stmt
	: EToken_Case constant_integer_expr ':'
	| EToken_Default ':'
	| statement
	;

while_stmt
	: EToken_While '(' expression ')' statement
	;

do_stmt
	: EToken_Do statement EToken_While '(' expression ')' ';'
	;

for_stmt
	: EToken_For '(' expression? ';' expression? ';' expression? ')' statement
	;

break_stmt
	: EToken_Break constant_integer_expr $e? ';'
	;

continue_stmt 
	: EToken_Continue constant_integer_expr $e? ';'
	;

return_stmt
	: EToken_Return expression $e? ';'
		{
			return ReturnStmt (IsValidLocator ($e) ? $e.m_Value : CValue ());
		}
	;

//.............................................................................
