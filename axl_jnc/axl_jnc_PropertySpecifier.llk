//.............................................................................

class
{
	CPropertyType* m_pType;
}
property_specifier
	: EToken_Property 
		{
			$.m_pType = m_pModule->m_TypeMgr.CreatePropertyType ();
		}
	  property_block $b <$.m_pType>
	;

property_block <CPropertyType* $pType>
	: '{' property_accessor_declaration <$pType>+ '}'
	;

class
{
	CFunction* m_pAccessor;
}
property_accessor_declaration <CPropertyType* $pType>
	: type_specifier_modifier_list $t
	  property_declarator $d
		{
			$.m_pAccessor = DeclarePropertyAccessor ($pType, &$t.m_TypeSpecifier, &$d.m_Declarator);
			return $.m_pAccessor != NULL;
		}
	  declaration_terminator <$.m_pAccessor>
	| property_set_accessor_declarator $d
		{
			$.m_pAccessor = DeclarePropertyAccessor ($pType, NULL, &$d.m_Declarator);
			return $.m_pAccessor != NULL;
		}
	  declaration_terminator <$.m_pAccessor>
	| ';'
	;

class
{
	CDeclarator m_Declarator;
}
property_declarator
	: pointer <&$.m_Declarator>* 
	  property_accessor_kind $a
	  function_suffix <&$.m_Declarator>
		{
			$.m_Declarator.m_PropertyAccessorKind = $a.m_PropertyAccessorKind;
			$.m_Declarator.m_Pos = $a.m_FirstToken.m_Pos;
		}
	;

class
{
	CDeclarator m_Declarator;
}
property_set_accessor_declarator
	: EToken_Set
	  function_suffix <&$.m_Declarator>
		{
			$.m_Declarator.m_PropertyAccessorKind = EPropertyAccessor_Set;
			$.m_Declarator.m_Pos = $1.m_Pos;
		}
	;

class
{
	EPropertyAccessor m_PropertyAccessorKind;
}
property_accessor_kind
	: EToken_Get
		{
			$.m_PropertyAccessorKind = EPropertyAccessor_Get;
		}
	| EToken_Set
		{
			$.m_PropertyAccessorKind = EPropertyAccessor_Set;
		}
	;

//.............................................................................
