//.............................................................................

class
{
	CTypeSpecifier m_TypeSpecifier;
}	
declaration_specifier_list
	enter 
	{
		PushTypeSpecifier (&$.m_TypeSpecifier);
	}
	leave
	{
		PopTypeSpecifier (&$.m_TypeSpecifier);
	}
	: declaration_specifier <&$.m_TypeSpecifier>+
	;

declaration_specifier <CTypeSpecifier* $pTypeSpecifier>
	: attribute_block
	| storage_specifier
		{
			return SetStorageKind ($1.m_StorageKind);
		}
	| access_specifier
		{
			return SetAccessKind ($1.m_AccessKind);
		}
	| type_specifier
		{
			return $pTypeSpecifier->SetType ($1.m_pType);
		}
	| type_modifier 
		{
			return $pTypeSpecifier->SetTypeModifier ($1.m_Modifier);
		}
	;

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

class
{
	CTypeSpecifier m_TypeSpecifier;
}	
type_specifier_modifier_list
	enter 
	{
		PushTypeSpecifier (&$.m_TypeSpecifier);
	}
	leave
	{
		PopTypeSpecifier (&$.m_TypeSpecifier);
	}
	: type_specifier_modifier <&$.m_TypeSpecifier>+
	;

type_specifier_modifier <CTypeSpecifier* $pTypeSpecifier>
	: type_specifier
		{
			return $pTypeSpecifier->SetType ($1.m_pType);
		}
	| type_modifier 
		{
			return $pTypeSpecifier->SetTypeModifier ($1.m_Modifier);
		}
	;

//.............................................................................

class
{
	EStorage m_StorageKind;
}
storage_specifier
	: EToken_Typedef generic_formal_argument_list $g?
		{
			$.m_StorageKind = EStorage_Typedef;
		}
	| EToken_Static 
		{
			$.m_StorageKind = EStorage_Static;
		}
	| EToken_Abstract EToken_Virtual?
		{
			$.m_StorageKind = EStorage_Abstract;
		}
	| EToken_Virtual
		{
			$.m_StorageKind = EStorage_Virtual;
		}
	| EToken_NoVirtual
		{
			$.m_StorageKind = EStorage_NoVirtual;
		}
	| EToken_Mutable
		{
			$.m_StorageKind = EStorage_Mutable;
		}
	;

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

class
{
	EAccess m_AccessKind;
}
access_specifier
	: EToken_Public
		{
			$.m_AccessKind = EAccess_Public;
		}
	| EToken_Protected
		{
			$.m_AccessKind = EAccess_Protected;
		}
	;

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

class
{
	CType* m_pType;
}
type_specifier
	: EToken_Void
		{
			$.m_pType = m_pModule->m_TypeMgr.GetPrimitiveType (EType_Void);
		}
	| EToken_Variant
		{
			$.m_pType = m_pModule->m_TypeMgr.GetPrimitiveType (EType_Variant);
		}
	| EToken_Object
		{
			$.m_pType = m_pModule->m_TypeMgr.GetStdType (EStdType_ObjectClass);
		}
	| EToken_Bool
		{
			$.m_pType = m_pModule->m_TypeMgr.GetPrimitiveType (EType_Bool);
		}
	| EToken_Int
		{
			$.m_pType = m_pModule->m_TypeMgr.GetPrimitiveType (m_Endianness == EEndianness_BigEndian ? EType_Int32_be : EType_Int);
		}
	| EToken_IntPtr
		{
			$.m_pType = m_pModule->m_TypeMgr.GetPrimitiveType (m_Endianness == EEndianness_BigEndian ? EType_Int_pbe : EType_Int_p);
		}
	| EToken_Char
		{
			$.m_pType = m_pModule->m_TypeMgr.GetPrimitiveType (EType_Char);
		}
	| EToken_Short
		{
			$.m_pType = m_pModule->m_TypeMgr.GetPrimitiveType (m_Endianness == EEndianness_BigEndian ? EType_Int16_be : EType_Short);
		}
	| EToken_Long
		{
			$.m_pType = m_pModule->m_TypeMgr.GetPrimitiveType (m_Endianness == EEndianness_BigEndian ? EType_Int32_be : EType_Long);
		}
	| EToken_Float
		{
			$.m_pType = m_pModule->m_TypeMgr.GetPrimitiveType (EType_Float);
		}
	| EToken_Double
		{
			$.m_pType = m_pModule->m_TypeMgr.GetPrimitiveType (EType_Double);
		}
	| EToken_Int8
		{
			$.m_pType = m_pModule->m_TypeMgr.GetPrimitiveType (EType_Int8);
		}
	| EToken_Int16
		{
			$.m_pType = m_pModule->m_TypeMgr.GetPrimitiveType (m_Endianness == EEndianness_BigEndian ? EType_Int16_be : EType_Int16);
		}
	| EToken_Int32
		{
			$.m_pType = m_pModule->m_TypeMgr.GetPrimitiveType (m_Endianness == EEndianness_BigEndian ? EType_Int32_be : EType_Int32);
		}
	| EToken_Int64
		{
			$.m_pType = m_pModule->m_TypeMgr.GetPrimitiveType (m_Endianness == EEndianness_BigEndian ? EType_Int64_be : EType_Int64);
		}
	| EToken_WChar
		{
			$.m_pType = m_pModule->m_TypeMgr.GetPrimitiveType (EType_WChar);
		}
	| EToken_Auto
		{
			err::SetStringError (_T("'auto' type specifier is not yet supported"));
			return false; 
		}
	| enum_specifier
		{
			$.m_pType = $1.m_pType;
		}
	| struct_specifier
		{
			$.m_pType = $1.m_pType;
		}
	| union_specifier
		{
			$.m_pType = $1.m_pType;
		}
	| class_specifier
		{
			$.m_pType = $1.m_pType;
		}
	| property_template_specifier
		{
			$.m_pType = $1.m_pType;
		}
	| resolver (property_specifier_rslv)
	  property_specifier $t
		{
			$.m_pType = $t.m_pProperty->GetType ();
		}
	| autoev_specifier
		{
			$.m_pType = $1.m_pType;
		}
	| resolver (qualified_type_name_rslv)
	  qualified_type_name $t
	  generic_actual_argument_list?
		{
			$.m_pType = $t.m_pType;
		}
	;

// expression vs item_declaration_w_specifier

qualified_type_name_rslv
	:	{
			if (IsTypeSpecified ())
				return false;
		}
	  qualified_name $n		
		{
			return m_Stage == EStage_Pass1 || FindType ($n.m_Name) != NULL;
		}
	  ('(' // we need this check if we are already in type_specifier_modifier_list
		{
			return false;
		}
	  )?
	;

class
{
	CType* m_pType;
}
qualified_type_name
	: qualified_name
		{
			CType* pType = FindType ($1.m_Name);
			if (!pType)
			{
				err::SetFormatStringError (_T("'%s' is not a type"), $1.m_Name.GetFullName ());
				return false;
			}

			$.m_pType = pType;
		}
	;

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

class 
{
	ETypeModifier m_Modifier;
}
type_modifier
	: EToken_Signed
		{
			$.m_Modifier = ETypeModifier_Signed;
		}
	| EToken_Unsigned
		{
			$.m_Modifier = ETypeModifier_Unsigned;
		}
	| EToken_LittleEndian
		{
			$.m_Modifier = ETypeModifier_LittleEndian;
		}
	| EToken_BigEndian
		{
			$.m_Modifier = ETypeModifier_BigEndian;
		}
	| EToken_Const
		{
			$.m_Modifier = ETypeModifier_Const;
		}
	| EToken_ReadOnly
		{
			$.m_Modifier = ETypeModifier_ReadOnly;
		}
	| EToken_Volatile
		{
			$.m_Modifier = ETypeModifier_Volatile;
		}
	| EToken_Safe
		{
			$.m_Modifier = ETypeModifier_Safe;
		}
	| EToken_Unsafe
		{
			$.m_Modifier = ETypeModifier_Unsafe;
		}
	| EToken_NoNull
		{
			$.m_Modifier = ETypeModifier_NoNull;
		}
	| EToken_Strong
		{
			$.m_Modifier = ETypeModifier_Strong;
		}
	| EToken_Weak
		{
			$.m_Modifier = ETypeModifier_Weak;
		}
	| EToken_Cdecl
		{
			$.m_Modifier = ETypeModifier_Cdecl;
		}
	| EToken_Stdcall
		{
			$.m_Modifier = ETypeModifier_Stdcall;
		}
	| EToken_Function
		{
			$.m_Modifier = ETypeModifier_Function;
		}
	| EToken_Property
		{
			$.m_Modifier = ETypeModifier_Property;
		}
	| EToken_Multicast
		{
			$.m_Modifier = ETypeModifier_Multicast;
		}
	| EToken_Event
		{
			$.m_Modifier = ETypeModifier_Event;
		}
	| EToken_Bindable
		{
			$.m_Modifier = ETypeModifier_Bindable;
		}
	| EToken_AutoGet
		{
			$.m_Modifier = ETypeModifier_AutoGet;
		}
	| EToken_Indexed
		{
			$.m_Modifier = ETypeModifier_Indexed;
		}
	| EToken_Closure
		{
			$.m_Modifier = ETypeModifier_Closure;
		}
	| EToken_Thin
		{
			$.m_Modifier = ETypeModifier_Thin;
		}
	;

//.............................................................................
