//.............................................................................

class
{
	CClassType* m_pType;
}
class_specifier
	: class_kind EToken_Identifier
		{
			rtl::CString Name = $2.m_Data.m_String;
			rtl::CString QualifiedName = m_pModule->m_NamespaceMgr.CreateQualifiedName (Name);
			$.m_pType = m_pModule->m_TypeMgr.GetClassType ($1.m_Type, Name, QualifiedName);
			
			bool Result = Declare ($.m_pType, $1.m_FirstToken.m_Pos);
			if (!Result)
				return false;
		}
		(inheritance_list? class_block <$.m_pType>)?
	| class_kind 
		{
			$.m_pType = m_pModule->m_TypeMgr.CreateUnnamedClassType ($1.m_Type);
			Declare ($.m_pType, $1.m_FirstToken.m_Pos);
		}	
	  inheritance_list? 
	  class_block <$.m_pType>
	;

class
{
	EType m_Type;
}
class_kind
	: EToken_Interface
		{
			$.m_Type = EType_Interface;
		}
	| EToken_Class
		{
			$.m_Type = EType_Class;
		}
	;

inheritance_list
	: ':' qualified_type_identifier (',' qualified_type_identifier)*
	;

class_block <CClassType* $pType>
	: '{' class_member_declaration <$pType>* '}'
	;

class_member_declaration <CClassType* $pType>
	: attribute_block?
	  declaration_specifier_list $s
	  class_member_declarator_list <&$s.m_DeclSpecifiers, $pType>? 
	  declaration_terminator
	| compound_statement_1st_pass
	| ';'
	;

class_member_declarator_list <CDeclSpecifiers* $pDeclSpecifiers, CClassType* $pType>
	: class_member_declarator <$pDeclSpecifiers, $pType> (',' class_member_declarator <$pDeclSpecifiers, $pType>)*
	;

class_member_declarator <CDeclSpecifiers* $pDeclSpecifiers, CClassType* $pType>
	: declarator (':' struct_member_bit_field)? ('=' initializer)?
		{
			bool Result = DeclareClassMember ($pType, $pDeclSpecifiers, &$1.m_Declarator);
			if (!Result)
				return false;
		}
	;

//.............................................................................
