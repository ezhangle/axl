//.............................................................................

class
{
	CClassType* m_pType;
}
class_specifier
	: class_kind $k 
	  EToken_Identifier $n?
		{
			$.m_pType = DeclareClassType (
				$k.m_Type,
				IsValidLocator ($n) ? $n.m_Data.m_String : rtl::CString ()
				);

			if (!$.m_pType)
				return false;
		}
	  generic_formal_argument_list <$.m_pType>?
	  inheritance_list <$.m_pType>?
	  class_block <$.m_pType>
	;

class
{
	EType m_Type;
}
class_kind
	: EToken_Interface
		{
			$.m_Type = EType_Interface;
		}
	| EToken_Class
		{
			$.m_Type = EType_Class;
		}
	;

inheritance_list <CStructClassType* $pType>
	: ':' base_class <$pType> (',' base_class <$pType>)*
	;

base_class <CStructClassType* $pType>
	: type_name
		{
			return $pType->AddBaseType ($1.m_pType);
		}
	;

class_block <CClassType* $pType>
	: '{' 
		{
			m_pModule->m_NamespaceMgr.OpenNamespace ($pType);	
		}
	  class_member_declaration <$pType>* 
	  '}'
		{
			m_pModule->m_NamespaceMgr.CloseNamespace ();
		}
	;

class_member_declaration <CClassType* $pType>
	: attribute_block?
	  declaration_specifier_list $s
	  class_member_declarator_list <&$s.m_DeclSpecifiers, $pType>? 
	  declaration_terminator
	| compound_statement_pass1
	| ';'
	;

class_member_declarator_list <CDeclSpecifiers* $pDeclSpecifiers, CClassType* $pType>
	: class_member_declarator <$pDeclSpecifiers, $pType> (',' class_member_declarator <$pDeclSpecifiers, $pType>)*
	;

class_member_declarator <CDeclSpecifiers* $pDeclSpecifiers, CClassType* $pType>
	: declarator (':' struct_member_bit_field)? ('=' initializer)?
		{
			bool Result = DeclareClassMember ($pType, $pDeclSpecifiers, &$1.m_Declarator);
			if (!Result)
				return false;
		}
	;

//.............................................................................
