
/* #line 1 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
#include "stdafx.h"
#include "axl_jnc_Lexer.h"

// warning C4065: switch statement contains 'default' but no 'case' labels

#pragma warning (disable: 4065)

namespace axl {
namespace jnc {

//.............................................................................


/* #line 2 "axl_jnc_Lexer.cpp" */
static const char _axl_jnc_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 57, 1, 58, 1, 59, 1, 
	60, 1, 61, 1, 62, 1, 63, 1, 
	64, 1, 65, 1, 66, 1, 67, 1, 
	68, 1, 69, 1, 70, 1, 71, 1, 
	72, 1, 73, 1, 74, 1, 75, 1, 
	76, 1, 77, 1, 78, 1, 80, 1, 
	81, 1, 82, 1, 83, 1, 84, 1, 
	85, 1, 86, 1, 87, 1, 88, 1, 
	89, 1, 90, 1, 91, 1, 92, 1, 
	93, 1, 94, 1, 95, 1, 96, 2, 
	0, 76, 2, 0, 77, 2, 0, 79, 
	2, 3, 4, 2, 3, 5, 2, 3, 
	6, 2, 3, 7, 2, 3, 8, 2, 
	3, 9, 2, 3, 10, 2, 3, 11, 
	2, 3, 12, 2, 3, 13, 2, 3, 
	14, 2, 3, 15, 2, 3, 16, 2, 
	3, 17, 2, 3, 18, 2, 3, 19, 
	2, 3, 20, 2, 3, 21, 2, 3, 
	22, 2, 3, 23, 2, 3, 24, 2, 
	3, 25, 2, 3, 26, 2, 3, 27, 
	2, 3, 28, 2, 3, 29, 2, 3, 
	30, 2, 3, 31, 2, 3, 32, 2, 
	3, 33, 2, 3, 34, 2, 3, 35, 
	2, 3, 36, 2, 3, 37, 2, 3, 
	38, 2, 3, 39, 2, 3, 40, 2, 
	3, 41, 2, 3, 42, 2, 3, 43, 
	2, 3, 44, 2, 3, 45, 2, 3, 
	46, 2, 3, 47, 2, 3, 48, 2, 
	3, 49, 2, 3, 50, 2, 3, 51, 
	2, 3, 52, 2, 3, 53, 2, 3, 
	54, 2, 3, 55, 2, 3, 56
};

static const short _axl_jnc_key_offsets[] = {
	0, 3, 6, 7, 9, 12, 18, 62, 
	65, 66, 69, 70, 71, 73, 76, 77, 
	78, 80, 82, 83, 86, 87, 91, 93, 
	99, 101, 102, 103, 105, 106, 113, 114, 
	122, 130, 138, 148, 156, 164, 172, 180, 
	188, 196, 204, 212, 220, 228, 236, 244, 
	255, 263, 271, 279, 287, 295, 303, 311, 
	319, 328, 336, 344, 352, 360, 368, 377, 
	385, 393, 401, 409, 417, 425, 433, 441, 
	449, 458, 466, 474, 482, 490, 498, 508, 
	516, 524, 532, 540, 548, 556, 564, 572, 
	580, 590, 598, 606, 614, 622, 630, 642, 
	650, 658, 666, 674, 682, 690, 698, 706, 
	715, 723, 731, 739, 747, 755, 763, 771, 
	779, 787, 795, 803, 811, 819, 827, 835, 
	843, 851, 859, 867, 875, 885, 893, 901, 
	910, 918, 926, 934, 942, 950, 958, 966, 
	974, 982, 990, 998, 1006, 1014, 1022, 1030, 
	1038, 1046, 1054, 1066, 1074, 1082, 1090, 1098, 
	1107, 1115, 1123, 1131, 1139, 1147, 1155, 1164, 
	1172, 1180, 1188, 1196, 1204, 1212, 1220, 1228, 
	1236, 1244, 1253, 1261, 1269, 1277, 1285, 1294, 
	1302, 1310, 1318, 1327, 1336, 1344, 1352, 1360, 
	1368, 1376, 1384, 1392, 1400, 1408, 1416, 1425, 
	1433, 1441, 1449, 1457, 1465, 1473, 1481, 1490, 
	1498, 1506, 1514, 1521, 1529, 1537, 1545, 1553
};

static const char _axl_jnc_trans_keys[] = {
	10, 34, 92, 10, 39, 92, 46, 10, 
	42, 10, 42, 47, 48, 57, 65, 70, 
	97, 102, 9, 10, 13, 32, 33, 34, 
	37, 38, 39, 42, 43, 45, 46, 47, 
	48, 60, 61, 62, 94, 95, 97, 98, 
	99, 100, 101, 102, 103, 105, 108, 110, 
	112, 114, 115, 116, 117, 118, 119, 124, 
	49, 57, 65, 90, 104, 122, 9, 13, 
	32, 61, 10, 34, 92, 10, 61, 38, 
	61, 10, 39, 92, 10, 61, 43, 61, 
	45, 61, 46, 42, 47, 61, 10, 88, 
	120, 48, 57, 48, 57, 48, 57, 65, 
	70, 97, 102, 60, 61, 61, 61, 61, 
	62, 61, 95, 48, 57, 65, 90, 97, 
	122, 61, 95, 117, 48, 57, 65, 90, 
	97, 122, 95, 116, 48, 57, 65, 90, 
	97, 122, 95, 111, 48, 57, 65, 90, 
	97, 122, 95, 105, 111, 114, 48, 57, 
	65, 90, 97, 122, 95, 103, 48, 57, 
	65, 90, 97, 122, 95, 101, 48, 57, 
	65, 90, 97, 122, 95, 110, 48, 57, 
	65, 90, 97, 122, 95, 100, 48, 57, 
	65, 90, 97, 122, 95, 105, 48, 57, 
	65, 90, 97, 122, 95, 97, 48, 57, 
	65, 90, 98, 122, 95, 110, 48, 57, 
	65, 90, 97, 122, 95, 111, 48, 57, 
	65, 90, 97, 122, 95, 108, 48, 57, 
	65, 90, 97, 122, 95, 101, 48, 57, 
	65, 90, 97, 122, 95, 97, 48, 57, 
	65, 90, 98, 122, 95, 107, 48, 57, 
	65, 90, 97, 122, 95, 97, 104, 108, 
	111, 48, 57, 65, 90, 98, 122, 95, 
	115, 48, 57, 65, 90, 97, 122, 95, 
	101, 48, 57, 65, 90, 97, 122, 95, 
	97, 48, 57, 65, 90, 98, 122, 95, 
	114, 48, 57, 65, 90, 97, 122, 95, 
	97, 48, 57, 65, 90, 98, 122, 95, 
	115, 48, 57, 65, 90, 97, 122, 95, 
	115, 48, 57, 65, 90, 97, 122, 95, 
	110, 48, 57, 65, 90, 97, 122, 95, 
	115, 116, 48, 57, 65, 90, 97, 122, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	95, 105, 48, 57, 65, 90, 97, 122, 
	95, 110, 48, 57, 65, 90, 97, 122, 
	95, 117, 48, 57, 65, 90, 97, 122, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	95, 101, 111, 48, 57, 65, 90, 97, 
	122, 95, 102, 48, 57, 65, 90, 97, 
	122, 95, 97, 48, 57, 65, 90, 98, 
	122, 95, 117, 48, 57, 65, 90, 97, 
	122, 95, 108, 48, 57, 65, 90, 97, 
	122, 95, 116, 48, 57, 65, 90, 97, 
	122, 95, 117, 48, 57, 65, 90, 97, 
	122, 95, 98, 48, 57, 65, 90, 97, 
	122, 95, 108, 48, 57, 65, 90, 97, 
	122, 95, 101, 48, 57, 65, 90, 97, 
	122, 95, 108, 110, 48, 57, 65, 90, 
	97, 122, 95, 115, 48, 57, 65, 90, 
	97, 122, 95, 101, 48, 57, 65, 90, 
	97, 122, 95, 117, 48, 57, 65, 90, 
	97, 122, 95, 109, 48, 57, 65, 90, 
	97, 122, 95, 99, 48, 57, 65, 90, 
	97, 122, 95, 97, 108, 111, 48, 57, 
	65, 90, 98, 122, 95, 108, 48, 57, 
	65, 90, 97, 122, 95, 115, 48, 57, 
	65, 90, 97, 122, 95, 101, 48, 57, 
	65, 90, 97, 122, 95, 111, 48, 57, 
	65, 90, 97, 122, 95, 97, 48, 57, 
	65, 90, 98, 122, 95, 116, 48, 57, 
	65, 90, 97, 122, 95, 114, 48, 57, 
	65, 90, 97, 122, 95, 101, 48, 57, 
	65, 90, 97, 122, 95, 116, 48, 57, 
	65, 90, 97, 122, 95, 102, 109, 110, 
	48, 57, 65, 90, 97, 122, 95, 112, 
	48, 57, 65, 90, 97, 122, 95, 111, 
	48, 57, 65, 90, 97, 122, 95, 114, 
	48, 57, 65, 90, 97, 122, 95, 116, 
	48, 57, 65, 90, 97, 122, 95, 116, 
	48, 57, 65, 90, 97, 122, 49, 51, 
	54, 56, 95, 101, 48, 57, 65, 90, 
	97, 122, 54, 95, 48, 57, 65, 90, 
	97, 122, 50, 95, 48, 57, 65, 90, 
	97, 122, 52, 95, 48, 57, 65, 90, 
	97, 122, 95, 114, 48, 57, 65, 90, 
	97, 122, 95, 102, 48, 57, 65, 90, 
	97, 122, 95, 97, 48, 57, 65, 90, 
	98, 122, 95, 99, 48, 57, 65, 90, 
	97, 122, 95, 101, 48, 57, 65, 90, 
	97, 122, 95, 105, 111, 48, 57, 65, 
	90, 97, 122, 95, 116, 48, 57, 65, 
	90, 97, 122, 95, 116, 48, 57, 65, 
	90, 97, 122, 95, 108, 48, 57, 65, 
	90, 97, 122, 95, 101, 48, 57, 65, 
	90, 97, 122, 95, 101, 48, 57, 65, 
	90, 97, 122, 95, 110, 48, 57, 65, 
	90, 97, 122, 95, 100, 48, 57, 65, 
	90, 97, 122, 95, 105, 48, 57, 65, 
	90, 97, 122, 95, 97, 48, 57, 65, 
	90, 98, 122, 95, 110, 48, 57, 65, 
	90, 97, 122, 95, 110, 48, 57, 65, 
	90, 97, 122, 95, 103, 48, 57, 65, 
	90, 97, 122, 95, 97, 48, 57, 65, 
	90, 98, 122, 95, 109, 48, 57, 65, 
	90, 97, 122, 95, 101, 48, 57, 65, 
	90, 97, 122, 95, 115, 48, 57, 65, 
	90, 97, 122, 95, 112, 48, 57, 65, 
	90, 97, 122, 95, 97, 48, 57, 65, 
	90, 98, 122, 95, 99, 48, 57, 65, 
	90, 97, 122, 95, 101, 48, 57, 65, 
	90, 97, 122, 95, 97, 114, 117, 48, 
	57, 65, 90, 98, 122, 95, 99, 48, 
	57, 65, 90, 97, 122, 95, 107, 48, 
	57, 65, 90, 97, 122, 95, 105, 111, 
	48, 57, 65, 90, 97, 122, 95, 118, 
	48, 57, 65, 90, 97, 122, 95, 97, 
	48, 57, 65, 90, 98, 122, 95, 116, 
	48, 57, 65, 90, 97, 122, 95, 101, 
	48, 57, 65, 90, 97, 122, 95, 112, 
	48, 57, 65, 90, 97, 122, 95, 101, 
	48, 57, 65, 90, 97, 122, 95, 114, 
	48, 57, 65, 90, 97, 122, 95, 116, 
	48, 57, 65, 90, 97, 122, 95, 121, 
	48, 57, 65, 90, 97, 122, 95, 98, 
	48, 57, 65, 90, 97, 122, 95, 108, 
	48, 57, 65, 90, 97, 122, 95, 105, 
	48, 57, 65, 90, 97, 122, 95, 99, 
	48, 57, 65, 90, 97, 122, 95, 101, 
	48, 57, 65, 90, 97, 122, 95, 116, 
	48, 57, 65, 90, 97, 122, 95, 117, 
	48, 57, 65, 90, 97, 122, 95, 114, 
	48, 57, 65, 90, 97, 122, 95, 110, 
	48, 57, 65, 90, 97, 122, 95, 101, 
	104, 105, 116, 119, 48, 57, 65, 90, 
	97, 122, 95, 116, 48, 57, 65, 90, 
	97, 122, 95, 111, 48, 57, 65, 90, 
	97, 122, 95, 114, 48, 57, 65, 90, 
	97, 122, 95, 116, 48, 57, 65, 90, 
	97, 122, 95, 103, 122, 48, 57, 65, 
	90, 97, 121, 95, 110, 48, 57, 65, 
	90, 97, 122, 95, 101, 48, 57, 65, 
	90, 97, 122, 95, 100, 48, 57, 65, 
	90, 97, 122, 95, 101, 48, 57, 65, 
	90, 97, 122, 95, 111, 48, 57, 65, 
	90, 97, 122, 95, 102, 48, 57, 65, 
	90, 97, 122, 95, 97, 114, 48, 57, 
	65, 90, 98, 122, 95, 116, 48, 57, 
	65, 90, 97, 122, 95, 105, 48, 57, 
	65, 90, 97, 122, 95, 99, 48, 57, 
	65, 90, 97, 122, 95, 117, 48, 57, 
	65, 90, 97, 122, 95, 99, 48, 57, 
	65, 90, 97, 122, 95, 116, 48, 57, 
	65, 90, 97, 122, 95, 105, 48, 57, 
	65, 90, 97, 122, 95, 116, 48, 57, 
	65, 90, 97, 122, 95, 99, 48, 57, 
	65, 90, 97, 122, 95, 104, 48, 57, 
	65, 90, 97, 122, 95, 114, 121, 48, 
	57, 65, 90, 97, 122, 95, 117, 48, 
	57, 65, 90, 97, 122, 95, 101, 48, 
	57, 65, 90, 97, 122, 95, 112, 48, 
	57, 65, 90, 97, 122, 95, 101, 48, 
	57, 65, 90, 97, 122, 95, 100, 111, 
	48, 57, 65, 90, 97, 122, 95, 101, 
	48, 57, 65, 90, 97, 122, 95, 102, 
	48, 57, 65, 90, 97, 122, 95, 102, 
	48, 57, 65, 90, 97, 122, 95, 110, 
	115, 48, 57, 65, 90, 97, 122, 95, 
	105, 115, 48, 57, 65, 90, 97, 122, 
	95, 111, 48, 57, 65, 90, 97, 122, 
	95, 110, 48, 57, 65, 90, 97, 122, 
	95, 105, 48, 57, 65, 90, 97, 122, 
	95, 103, 48, 57, 65, 90, 97, 122, 
	95, 110, 48, 57, 65, 90, 97, 122, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	95, 100, 48, 57, 65, 90, 97, 122, 
	95, 105, 48, 57, 65, 90, 97, 122, 
	95, 110, 48, 57, 65, 90, 97, 122, 
	95, 103, 48, 57, 65, 90, 97, 122, 
	95, 97, 111, 48, 57, 65, 90, 98, 
	122, 95, 114, 48, 57, 65, 90, 97, 
	122, 95, 105, 48, 57, 65, 90, 97, 
	122, 95, 97, 48, 57, 65, 90, 98, 
	122, 95, 110, 48, 57, 65, 90, 97, 
	122, 95, 116, 48, 57, 65, 90, 97, 
	122, 95, 105, 48, 57, 65, 90, 97, 
	122, 95, 100, 48, 57, 65, 90, 97, 
	122, 95, 99, 104, 48, 57, 65, 90, 
	97, 122, 95, 104, 48, 57, 65, 90, 
	97, 122, 95, 97, 48, 57, 65, 90, 
	98, 122, 95, 114, 48, 57, 65, 90, 
	97, 122, 95, 48, 57, 65, 90, 97, 
	122, 95, 116, 48, 57, 65, 90, 97, 
	122, 95, 105, 48, 57, 65, 90, 97, 
	122, 95, 108, 48, 57, 65, 90, 97, 
	122, 95, 101, 48, 57, 65, 90, 97, 
	122, 61, 124, 0
};

static const char _axl_jnc_single_lengths[] = {
	3, 3, 1, 2, 3, 0, 38, 3, 
	1, 3, 1, 1, 2, 3, 1, 1, 
	2, 2, 1, 3, 1, 2, 0, 0, 
	2, 1, 1, 2, 1, 1, 1, 2, 
	2, 2, 4, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 5, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 4, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	4, 2, 2, 2, 2, 2, 6, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 4, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 6, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 3, 2, 
	2, 2, 3, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 1, 2, 2, 2, 2, 2
};

static const char _axl_jnc_range_lengths[] = {
	0, 0, 0, 0, 0, 3, 3, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 3, 
	0, 0, 0, 0, 0, 3, 0, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 0
};

static const short _axl_jnc_index_offsets[] = {
	0, 4, 8, 10, 13, 17, 21, 63, 
	67, 69, 73, 75, 77, 80, 84, 86, 
	88, 91, 94, 96, 100, 102, 106, 108, 
	112, 115, 117, 119, 122, 124, 129, 131, 
	137, 143, 149, 157, 163, 169, 175, 181, 
	187, 193, 199, 205, 211, 217, 223, 229, 
	238, 244, 250, 256, 262, 268, 274, 280, 
	286, 293, 299, 305, 311, 317, 323, 330, 
	336, 342, 348, 354, 360, 366, 372, 378, 
	384, 391, 397, 403, 409, 415, 421, 429, 
	435, 441, 447, 453, 459, 465, 471, 477, 
	483, 491, 497, 503, 509, 515, 521, 531, 
	537, 543, 549, 555, 561, 567, 573, 579, 
	586, 592, 598, 604, 610, 616, 622, 628, 
	634, 640, 646, 652, 658, 664, 670, 676, 
	682, 688, 694, 700, 706, 714, 720, 726, 
	733, 739, 745, 751, 757, 763, 769, 775, 
	781, 787, 793, 799, 805, 811, 817, 823, 
	829, 835, 841, 851, 857, 863, 869, 875, 
	882, 888, 894, 900, 906, 912, 918, 925, 
	931, 937, 943, 949, 955, 961, 967, 973, 
	979, 985, 992, 998, 1004, 1010, 1016, 1023, 
	1029, 1035, 1041, 1048, 1055, 1061, 1067, 1073, 
	1079, 1085, 1091, 1097, 1103, 1109, 1115, 1122, 
	1128, 1134, 1140, 1146, 1152, 1158, 1164, 1171, 
	1177, 1183, 1189, 1194, 1200, 1206, 1212, 1218
};

static const unsigned char _axl_jnc_trans_targs[] = {
	6, 6, 10, 0, 6, 6, 14, 1, 
	6, 6, 3, 4, 3, 3, 4, 6, 
	3, 23, 23, 23, 6, 7, 6, 7, 
	7, 8, 9, 11, 12, 13, 15, 16, 
	17, 18, 19, 21, 24, 26, 27, 30, 
	29, 31, 34, 47, 62, 72, 78, 86, 
	88, 103, 116, 124, 141, 146, 169, 178, 
	190, 198, 207, 22, 29, 29, 6, 7, 
	7, 7, 6, 6, 6, 6, 6, 10, 
	0, 6, 0, 6, 6, 6, 6, 6, 
	6, 6, 14, 1, 6, 1, 6, 6, 
	6, 6, 6, 6, 6, 6, 2, 6, 
	3, 20, 6, 6, 6, 20, 5, 5, 
	22, 6, 22, 6, 23, 23, 23, 6, 
	25, 6, 6, 6, 6, 6, 6, 6, 
	28, 6, 6, 6, 29, 29, 29, 29, 
	6, 6, 6, 29, 32, 29, 29, 29, 
	6, 29, 33, 29, 29, 29, 6, 29, 
	29, 29, 29, 29, 6, 29, 35, 42, 
	44, 29, 29, 29, 6, 29, 36, 29, 
	29, 29, 6, 29, 37, 29, 29, 29, 
	6, 29, 38, 29, 29, 29, 6, 29, 
	39, 29, 29, 29, 6, 29, 40, 29, 
	29, 29, 6, 29, 41, 29, 29, 29, 
	6, 29, 29, 29, 29, 29, 6, 29, 
	43, 29, 29, 29, 6, 29, 29, 29, 
	29, 29, 6, 29, 45, 29, 29, 29, 
	6, 29, 46, 29, 29, 29, 6, 29, 
	29, 29, 29, 29, 6, 29, 48, 50, 
	52, 55, 29, 29, 29, 6, 29, 49, 
	29, 29, 29, 6, 29, 29, 29, 29, 
	29, 6, 29, 51, 29, 29, 29, 6, 
	29, 29, 29, 29, 29, 6, 29, 53, 
	29, 29, 29, 6, 29, 54, 29, 29, 
	29, 6, 29, 29, 29, 29, 29, 6, 
	29, 56, 29, 29, 29, 6, 29, 57, 
	58, 29, 29, 29, 6, 29, 29, 29, 
	29, 29, 6, 29, 59, 29, 29, 29, 
	6, 29, 60, 29, 29, 29, 6, 29, 
	61, 29, 29, 29, 6, 29, 29, 29, 
	29, 29, 6, 29, 63, 68, 29, 29, 
	29, 6, 29, 64, 29, 29, 29, 6, 
	29, 65, 29, 29, 29, 6, 29, 66, 
	29, 29, 29, 6, 29, 67, 29, 29, 
	29, 6, 29, 29, 29, 29, 29, 6, 
	29, 69, 29, 29, 29, 6, 29, 70, 
	29, 29, 29, 6, 29, 71, 29, 29, 
	29, 6, 29, 29, 29, 29, 29, 6, 
	29, 73, 75, 29, 29, 29, 6, 29, 
	74, 29, 29, 29, 6, 29, 29, 29, 
	29, 29, 6, 29, 76, 29, 29, 29, 
	6, 29, 77, 29, 29, 29, 6, 29, 
	29, 29, 29, 29, 6, 29, 79, 82, 
	85, 29, 29, 29, 6, 29, 80, 29, 
	29, 29, 6, 29, 81, 29, 29, 29, 
	6, 29, 29, 29, 29, 29, 6, 29, 
	83, 29, 29, 29, 6, 29, 84, 29, 
	29, 29, 6, 29, 29, 29, 29, 29, 
	6, 29, 29, 29, 29, 29, 6, 29, 
	87, 29, 29, 29, 6, 29, 29, 29, 
	29, 29, 6, 29, 29, 89, 93, 29, 
	29, 29, 6, 29, 90, 29, 29, 29, 
	6, 29, 91, 29, 29, 29, 6, 29, 
	92, 29, 29, 29, 6, 29, 29, 29, 
	29, 29, 6, 29, 94, 29, 29, 29, 
	6, 95, 96, 97, 29, 29, 98, 29, 
	29, 29, 6, 29, 29, 29, 29, 29, 
	6, 29, 29, 29, 29, 29, 6, 29, 
	29, 29, 29, 29, 6, 29, 99, 29, 
	29, 29, 6, 29, 100, 29, 29, 29, 
	6, 29, 101, 29, 29, 29, 6, 29, 
	102, 29, 29, 29, 6, 29, 29, 29, 
	29, 29, 6, 29, 104, 114, 29, 29, 
	29, 6, 29, 105, 29, 29, 29, 6, 
	29, 106, 29, 29, 29, 6, 29, 107, 
	29, 29, 29, 6, 29, 108, 29, 29, 
	29, 6, 29, 109, 29, 29, 29, 6, 
	29, 110, 29, 29, 29, 6, 29, 111, 
	29, 29, 29, 6, 29, 112, 29, 29, 
	29, 6, 29, 113, 29, 29, 29, 6, 
	29, 29, 29, 29, 29, 6, 29, 115, 
	29, 29, 29, 6, 29, 29, 29, 29, 
	29, 6, 29, 117, 29, 29, 29, 6, 
	29, 118, 29, 29, 29, 6, 29, 119, 
	29, 29, 29, 6, 29, 120, 29, 29, 
	29, 6, 29, 121, 29, 29, 29, 6, 
	29, 122, 29, 29, 29, 6, 29, 123, 
	29, 29, 29, 6, 29, 29, 29, 29, 
	29, 6, 29, 125, 127, 137, 29, 29, 
	29, 6, 29, 126, 29, 29, 29, 6, 
	29, 29, 29, 29, 29, 6, 29, 128, 
	132, 29, 29, 29, 6, 29, 129, 29, 
	29, 29, 6, 29, 130, 29, 29, 29, 
	6, 29, 131, 29, 29, 29, 6, 29, 
	29, 29, 29, 29, 6, 29, 133, 29, 
	29, 29, 6, 29, 134, 29, 29, 29, 
	6, 29, 135, 29, 29, 29, 6, 29, 
	136, 29, 29, 29, 6, 29, 29, 29, 
	29, 29, 6, 29, 138, 29, 29, 29, 
	6, 29, 139, 29, 29, 29, 6, 29, 
	140, 29, 29, 29, 6, 29, 29, 29, 
	29, 29, 6, 29, 142, 29, 29, 29, 
	6, 29, 143, 29, 29, 29, 6, 29, 
	144, 29, 29, 29, 6, 29, 145, 29, 
	29, 29, 6, 29, 29, 29, 29, 29, 
	6, 29, 147, 148, 151, 158, 165, 29, 
	29, 29, 6, 29, 29, 29, 29, 29, 
	6, 29, 149, 29, 29, 29, 6, 29, 
	150, 29, 29, 29, 6, 29, 29, 29, 
	29, 29, 6, 29, 152, 155, 29, 29, 
	29, 6, 29, 153, 29, 29, 29, 6, 
	29, 154, 29, 29, 29, 6, 29, 29, 
	29, 29, 29, 6, 29, 156, 29, 29, 
	29, 6, 29, 157, 29, 29, 29, 6, 
	29, 29, 29, 29, 29, 6, 29, 159, 
	162, 29, 29, 29, 6, 29, 160, 29, 
	29, 29, 6, 29, 161, 29, 29, 29, 
	6, 29, 29, 29, 29, 29, 6, 29, 
	163, 29, 29, 29, 6, 29, 164, 29, 
	29, 29, 6, 29, 29, 29, 29, 29, 
	6, 29, 166, 29, 29, 29, 6, 29, 
	167, 29, 29, 29, 6, 29, 168, 29, 
	29, 29, 6, 29, 29, 29, 29, 29, 
	6, 29, 170, 172, 29, 29, 29, 6, 
	29, 171, 29, 29, 29, 6, 29, 29, 
	29, 29, 29, 6, 29, 173, 29, 29, 
	29, 6, 29, 174, 29, 29, 29, 6, 
	29, 175, 177, 29, 29, 29, 6, 29, 
	176, 29, 29, 29, 6, 29, 29, 29, 
	29, 29, 6, 29, 29, 29, 29, 29, 
	6, 29, 179, 187, 29, 29, 29, 6, 
	29, 180, 182, 29, 29, 29, 6, 29, 
	181, 29, 29, 29, 6, 29, 29, 29, 
	29, 29, 6, 29, 183, 29, 29, 29, 
	6, 29, 184, 29, 29, 29, 6, 29, 
	185, 29, 29, 29, 6, 29, 186, 29, 
	29, 29, 6, 29, 29, 29, 29, 29, 
	6, 29, 188, 29, 29, 29, 6, 29, 
	189, 29, 29, 29, 6, 29, 29, 29, 
	29, 29, 6, 29, 191, 196, 29, 29, 
	29, 6, 29, 192, 29, 29, 29, 6, 
	29, 193, 29, 29, 29, 6, 29, 194, 
	29, 29, 29, 6, 29, 195, 29, 29, 
	29, 6, 29, 29, 29, 29, 29, 6, 
	29, 197, 29, 29, 29, 6, 29, 29, 
	29, 29, 29, 6, 29, 199, 204, 29, 
	29, 29, 6, 29, 200, 29, 29, 29, 
	6, 29, 201, 29, 29, 29, 6, 29, 
	202, 29, 29, 29, 6, 203, 29, 29, 
	29, 6, 29, 29, 29, 29, 29, 6, 
	29, 205, 29, 29, 29, 6, 29, 206, 
	29, 29, 29, 6, 29, 29, 29, 29, 
	29, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 0
};

static const unsigned char _axl_jnc_trans_actions[] = {
	90, 49, 249, 0, 87, 47, 246, 0, 
	45, 83, 1, 0, 0, 1, 0, 51, 
	0, 0, 0, 0, 81, 0, 93, 0, 
	0, 0, 252, 0, 0, 252, 0, 0, 
	0, 7, 7, 7, 0, 0, 0, 0, 
	243, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 243, 243, 53, 0, 
	0, 0, 77, 11, 79, 90, 49, 249, 
	0, 69, 0, 29, 79, 19, 39, 79, 
	87, 47, 246, 0, 67, 0, 25, 79, 
	21, 31, 79, 23, 33, 79, 0, 79, 
	0, 0, 27, 79, 75, 0, 0, 0, 
	0, 71, 0, 71, 0, 0, 0, 73, 
	0, 13, 79, 35, 61, 9, 79, 15, 
	0, 79, 37, 63, 243, 243, 243, 243, 
	85, 41, 79, 243, 0, 243, 243, 243, 
	65, 243, 0, 243, 243, 243, 65, 243, 
	174, 243, 243, 243, 65, 243, 0, 0, 
	0, 243, 243, 243, 65, 243, 0, 243, 
	243, 243, 65, 243, 0, 243, 243, 243, 
	65, 243, 0, 243, 243, 243, 65, 243, 
	0, 243, 243, 243, 65, 243, 0, 243, 
	243, 243, 65, 243, 0, 243, 243, 243, 
	65, 243, 144, 243, 243, 243, 65, 243, 
	0, 243, 243, 243, 65, 243, 126, 243, 
	243, 243, 65, 243, 0, 243, 243, 243, 
	65, 243, 0, 243, 243, 243, 65, 243, 
	219, 243, 243, 243, 65, 243, 0, 0, 
	0, 0, 243, 243, 243, 65, 243, 0, 
	243, 243, 243, 65, 243, 231, 243, 243, 
	243, 65, 243, 0, 243, 243, 243, 65, 
	243, 129, 243, 243, 243, 65, 243, 0, 
	243, 243, 243, 65, 243, 0, 243, 243, 
	243, 65, 243, 186, 243, 243, 243, 65, 
	243, 0, 243, 243, 243, 65, 243, 0, 
	0, 243, 243, 243, 65, 243, 114, 243, 
	243, 243, 65, 243, 0, 243, 243, 243, 
	65, 243, 0, 243, 243, 243, 65, 243, 
	0, 243, 243, 243, 65, 243, 222, 243, 
	243, 243, 65, 243, 0, 0, 243, 243, 
	243, 65, 243, 0, 243, 243, 243, 65, 
	243, 0, 243, 243, 243, 65, 243, 0, 
	243, 243, 243, 65, 243, 0, 243, 243, 
	243, 65, 243, 234, 243, 243, 243, 65, 
	243, 0, 243, 243, 243, 59, 243, 0, 
	243, 243, 243, 65, 243, 0, 243, 243, 
	243, 65, 243, 153, 243, 243, 243, 65, 
	243, 0, 0, 243, 243, 243, 65, 243, 
	0, 243, 243, 243, 65, 243, 210, 243, 
	243, 243, 65, 243, 0, 243, 243, 243, 
	65, 243, 0, 243, 243, 243, 65, 243, 
	177, 243, 243, 243, 57, 243, 0, 0, 
	0, 243, 243, 243, 65, 243, 0, 243, 
	243, 243, 65, 243, 0, 243, 243, 243, 
	65, 243, 240, 243, 243, 243, 65, 243, 
	0, 243, 243, 243, 65, 243, 0, 243, 
	243, 243, 65, 243, 150, 243, 243, 243, 
	65, 243, 213, 243, 243, 243, 65, 243, 
	0, 243, 243, 243, 65, 243, 195, 243, 
	243, 243, 65, 243, 207, 0, 0, 243, 
	243, 243, 65, 243, 0, 243, 243, 243, 
	65, 243, 0, 243, 243, 243, 65, 243, 
	0, 243, 243, 243, 65, 243, 96, 243, 
	243, 243, 65, 243, 0, 243, 243, 243, 
	65, 0, 0, 0, 159, 243, 0, 243, 
	243, 243, 55, 162, 243, 243, 243, 243, 
	65, 165, 243, 243, 243, 243, 65, 168, 
	243, 243, 243, 243, 65, 243, 0, 243, 
	243, 243, 65, 243, 0, 243, 243, 243, 
	65, 243, 0, 243, 243, 243, 65, 243, 
	0, 243, 243, 243, 65, 243, 189, 243, 
	243, 243, 65, 243, 0, 0, 243, 243, 
	243, 65, 243, 0, 243, 243, 243, 65, 
	243, 0, 243, 243, 243, 65, 243, 0, 
	243, 243, 243, 65, 243, 0, 243, 243, 
	243, 65, 243, 0, 243, 243, 243, 65, 
	243, 0, 243, 243, 243, 65, 243, 0, 
	243, 243, 243, 65, 243, 0, 243, 243, 
	243, 65, 243, 0, 243, 243, 243, 65, 
	243, 147, 243, 243, 243, 65, 243, 0, 
	243, 243, 243, 65, 243, 135, 243, 243, 
	243, 65, 243, 0, 243, 243, 243, 65, 
	243, 0, 243, 243, 243, 65, 243, 0, 
	243, 243, 243, 65, 243, 0, 243, 243, 
	243, 65, 243, 0, 243, 243, 243, 65, 
	243, 0, 243, 243, 243, 65, 243, 0, 
	243, 243, 243, 65, 243, 99, 243, 243, 
	243, 65, 243, 0, 0, 0, 243, 243, 
	243, 65, 243, 0, 243, 243, 243, 65, 
	243, 105, 243, 243, 243, 65, 243, 0, 
	0, 243, 243, 243, 65, 243, 0, 243, 
	243, 243, 65, 243, 0, 243, 243, 243, 
	65, 243, 0, 243, 243, 243, 65, 243, 
	120, 243, 243, 243, 65, 243, 0, 243, 
	243, 243, 65, 243, 0, 243, 243, 243, 
	65, 243, 0, 243, 243, 243, 65, 243, 
	0, 243, 243, 243, 65, 243, 192, 243, 
	243, 243, 65, 243, 0, 243, 243, 243, 
	65, 243, 0, 243, 243, 243, 65, 243, 
	0, 243, 243, 243, 65, 243, 117, 243, 
	243, 243, 65, 243, 0, 243, 243, 243, 
	65, 243, 0, 243, 243, 243, 65, 243, 
	0, 243, 243, 243, 65, 243, 0, 243, 
	243, 243, 65, 243, 225, 243, 243, 243, 
	65, 243, 0, 0, 0, 0, 0, 243, 
	243, 243, 65, 243, 198, 243, 243, 243, 
	65, 243, 0, 243, 243, 243, 65, 243, 
	0, 243, 243, 243, 65, 243, 132, 243, 
	243, 243, 65, 243, 0, 0, 243, 243, 
	243, 65, 243, 0, 243, 243, 243, 65, 
	243, 0, 243, 243, 243, 65, 243, 138, 
	243, 243, 243, 65, 243, 0, 243, 243, 
	243, 65, 243, 0, 243, 243, 243, 65, 
	243, 201, 243, 243, 243, 65, 243, 0, 
	0, 243, 243, 243, 65, 243, 0, 243, 
	243, 243, 65, 243, 0, 243, 243, 243, 
	65, 243, 111, 243, 243, 243, 65, 243, 
	0, 243, 243, 243, 65, 243, 0, 243, 
	243, 243, 65, 243, 180, 243, 243, 243, 
	65, 243, 0, 243, 243, 243, 65, 243, 
	0, 243, 243, 243, 65, 243, 0, 243, 
	243, 243, 65, 243, 228, 243, 243, 243, 
	65, 243, 0, 0, 243, 243, 243, 65, 
	243, 0, 243, 243, 243, 65, 243, 237, 
	243, 243, 243, 65, 243, 0, 243, 243, 
	243, 65, 243, 0, 243, 243, 243, 65, 
	243, 0, 0, 243, 243, 243, 65, 243, 
	0, 243, 243, 243, 65, 243, 108, 243, 
	243, 243, 65, 243, 204, 243, 243, 243, 
	65, 243, 0, 0, 243, 243, 243, 65, 
	243, 0, 0, 243, 243, 243, 65, 243, 
	0, 243, 243, 243, 65, 243, 183, 243, 
	243, 243, 65, 243, 0, 243, 243, 243, 
	65, 243, 0, 243, 243, 243, 65, 243, 
	0, 243, 243, 243, 65, 243, 0, 243, 
	243, 243, 65, 243, 141, 243, 243, 243, 
	65, 243, 0, 243, 243, 243, 65, 243, 
	0, 243, 243, 243, 65, 243, 102, 243, 
	243, 243, 65, 243, 0, 0, 243, 243, 
	243, 65, 243, 0, 243, 243, 243, 65, 
	243, 0, 243, 243, 243, 65, 243, 0, 
	243, 243, 243, 65, 243, 0, 243, 243, 
	243, 65, 243, 171, 243, 243, 243, 65, 
	243, 0, 243, 243, 243, 65, 243, 123, 
	243, 243, 243, 65, 243, 0, 0, 243, 
	243, 243, 65, 243, 0, 243, 243, 243, 
	65, 243, 0, 243, 243, 243, 65, 243, 
	0, 243, 243, 243, 65, 0, 243, 243, 
	243, 65, 243, 156, 243, 243, 243, 65, 
	243, 0, 243, 243, 243, 65, 243, 0, 
	243, 243, 243, 65, 243, 216, 243, 243, 
	243, 65, 43, 17, 79, 85, 85, 83, 
	83, 83, 81, 77, 79, 79, 69, 79, 
	79, 79, 67, 79, 79, 79, 79, 79, 
	75, 71, 71, 73, 79, 61, 79, 79, 
	63, 85, 79, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	59, 65, 65, 65, 65, 65, 65, 65, 
	65, 57, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 55, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 79, 0
};

static const unsigned char _axl_jnc_to_state_actions[] = {
	0, 0, 0, 0, 0, 0, 3, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
};

static const unsigned char _axl_jnc_from_state_actions[] = {
	0, 0, 0, 0, 0, 0, 5, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
};

static const short _axl_jnc_eof_trans[] = {
	1250, 1250, 1226, 1226, 1226, 1227, 0, 1228, 
	1428, 1428, 1231, 1428, 1428, 1428, 1235, 1428, 
	1428, 1428, 1428, 1428, 1241, 1243, 1243, 1244, 
	1428, 1246, 1428, 1428, 1249, 1250, 1428, 1427, 
	1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 
	1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 
	1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 
	1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 
	1427, 1427, 1427, 1427, 1289, 1427, 1427, 1427, 
	1427, 1427, 1427, 1427, 1427, 1298, 1427, 1427, 
	1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 
	1427, 1427, 1427, 1427, 1427, 1427, 1315, 1427, 
	1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 
	1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 
	1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 
	1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 
	1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 
	1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 
	1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 
	1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 
	1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 
	1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 
	1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 
	1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 
	1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 
	1427, 1427, 1427, 1427, 1427, 1427, 1427, 1428
};

static const int axl_jnc_start = 6;
static const int axl_jnc_first_final = 6;
static const int axl_jnc_error = -1;

static const int axl_jnc_en_main = 6;


/* #line 161 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */


//.............................................................................

void 
CLexer::Init ()
{
	
/* #line 808 "axl_jnc_Lexer.cpp" */
	{
	cs = axl_jnc_start;
	ts = 0;
	te = 0;
	act = 0;
	}

/* #line 169 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
}

bool
CLexer::Exec ()
{
	
/* #line 814 "axl_jnc_Lexer.cpp" */
	{
	int _klen;
	unsigned int _trans;
	const char *_acts;
	unsigned int _nacts;
	const char *_keys;

	if ( p == pe )
		goto _test_eof;
_resume:
	_acts = _axl_jnc_actions + _axl_jnc_from_state_actions[cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 2:
/* #line 1 "NONE" */
	{ts = p;}
	break;
/* #line 831 "axl_jnc_Lexer.cpp" */
		}
	}

	_keys = _axl_jnc_trans_keys + _axl_jnc_key_offsets[cs];
	_trans = _axl_jnc_index_offsets[cs];

	_klen = _axl_jnc_single_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( (*p) < *_mid )
				_upper = _mid - 1;
			else if ( (*p) > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (unsigned int)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _axl_jnc_range_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( (*p) < _mid[0] )
				_upper = _mid - 2;
			else if ( (*p) > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += (unsigned int)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
_eof_trans:
	cs = _axl_jnc_trans_targs[_trans];

	if ( _axl_jnc_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _axl_jnc_actions + _axl_jnc_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 0:
/* #line 44 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{ NewLine (p + 1); }
	break;
	case 3:
/* #line 1 "NONE" */
	{te = p+1;}
	break;
	case 4:
/* #line 58 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 1;}
	break;
	case 5:
/* #line 59 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 2;}
	break;
	case 6:
/* #line 60 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 3;}
	break;
	case 7:
/* #line 61 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 4;}
	break;
	case 8:
/* #line 63 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 5;}
	break;
	case 9:
/* #line 64 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 6;}
	break;
	case 10:
/* #line 65 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 7;}
	break;
	case 11:
/* #line 66 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 8;}
	break;
	case 12:
/* #line 67 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 9;}
	break;
	case 13:
/* #line 69 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 10;}
	break;
	case 14:
/* #line 70 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 11;}
	break;
	case 15:
/* #line 72 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 13;}
	break;
	case 16:
/* #line 73 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 14;}
	break;
	case 17:
/* #line 74 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 15;}
	break;
	case 18:
/* #line 75 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 16;}
	break;
	case 19:
/* #line 76 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 17;}
	break;
	case 20:
/* #line 77 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 18;}
	break;
	case 21:
/* #line 78 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 19;}
	break;
	case 22:
/* #line 79 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 20;}
	break;
	case 23:
/* #line 80 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 21;}
	break;
	case 24:
/* #line 82 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 22;}
	break;
	case 25:
/* #line 84 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 23;}
	break;
	case 26:
/* #line 85 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 24;}
	break;
	case 27:
/* #line 86 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 25;}
	break;
	case 28:
/* #line 87 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 26;}
	break;
	case 29:
/* #line 89 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 27;}
	break;
	case 30:
/* #line 90 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 28;}
	break;
	case 31:
/* #line 93 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 30;}
	break;
	case 32:
/* #line 94 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 31;}
	break;
	case 33:
/* #line 95 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 32;}
	break;
	case 34:
/* #line 96 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 33;}
	break;
	case 35:
/* #line 97 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 34;}
	break;
	case 36:
/* #line 98 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 35;}
	break;
	case 37:
/* #line 99 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 36;}
	break;
	case 38:
/* #line 100 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 37;}
	break;
	case 39:
/* #line 102 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 38;}
	break;
	case 40:
/* #line 103 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 39;}
	break;
	case 41:
/* #line 105 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 40;}
	break;
	case 42:
/* #line 106 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 41;}
	break;
	case 43:
/* #line 107 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 42;}
	break;
	case 44:
/* #line 108 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 43;}
	break;
	case 45:
/* #line 110 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 45;}
	break;
	case 46:
/* #line 111 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 46;}
	break;
	case 47:
/* #line 112 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 47;}
	break;
	case 48:
/* #line 113 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 48;}
	break;
	case 49:
/* #line 114 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 49;}
	break;
	case 50:
/* #line 115 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 50;}
	break;
	case 51:
/* #line 117 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 51;}
	break;
	case 52:
/* #line 118 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 52;}
	break;
	case 53:
/* #line 146 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 74;}
	break;
	case 54:
/* #line 147 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 75;}
	break;
	case 55:
/* #line 148 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 76;}
	break;
	case 56:
/* #line 157 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 82;}
	break;
	case 57:
/* #line 122 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Eq); }}
	break;
	case 58:
/* #line 123 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Ne); }}
	break;
	case 59:
/* #line 124 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Le); }}
	break;
	case 60:
/* #line 125 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Ge); }}
	break;
	case 61:
/* #line 126 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_LogicalOr); }}
	break;
	case 62:
/* #line 127 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_LogicalAnd); }}
	break;
	case 63:
/* #line 128 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Inc); }}
	break;
	case 64:
/* #line 129 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Dec); }}
	break;
	case 65:
/* #line 132 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_MulAssign); }}
	break;
	case 66:
/* #line 133 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_DivAssign); }}
	break;
	case 67:
/* #line 134 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_ModAssign); }}
	break;
	case 68:
/* #line 135 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_AddAssign); }}
	break;
	case 69:
/* #line 136 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_SubAssign); }}
	break;
	case 70:
/* #line 137 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_ShlAssign); }}
	break;
	case 71:
/* #line 138 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_ShrAssign); }}
	break;
	case 72:
/* #line 139 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_AndAssign); }}
	break;
	case 73:
/* #line 140 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_XorAssign); }}
	break;
	case 74:
/* #line 141 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_OrAssign); }}
	break;
	case 75:
/* #line 142 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Ellipsis); }}
	break;
	case 76:
/* #line 147 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateCharToken (EToken_Integer); }}
	break;
	case 77:
/* #line 148 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateStringToken (EToken_Literal, 1, 1); }}
	break;
	case 78:
/* #line 153 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;}
	break;
	case 79:
/* #line 155 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;}
	break;
	case 80:
/* #line 157 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (ts [0]); }}
	break;
	case 81:
/* #line 71 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateToken (EToken_Int); }}
	break;
	case 82:
/* #line 92 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateToken (EToken_Enum); }}
	break;
	case 83:
/* #line 109 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateToken (EToken_Do); }}
	break;
	case 84:
/* #line 130 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateToken (EToken_Shl); }}
	break;
	case 85:
/* #line 131 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateToken (EToken_Shr); }}
	break;
	case 86:
/* #line 146 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateStringToken (EToken_Identifier); }}
	break;
	case 87:
/* #line 147 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateCharToken (EToken_Integer); }}
	break;
	case 88:
/* #line 148 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateStringToken (EToken_Literal, 1, 1); }}
	break;
	case 89:
/* #line 149 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateIntegerToken (10); }}
	break;
	case 90:
/* #line 150 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateIntegerToken (16, 2); }}
	break;
	case 91:
/* #line 152 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;}
	break;
	case 92:
/* #line 155 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;}
	break;
	case 93:
/* #line 157 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateToken (ts [0]); }}
	break;
	case 94:
/* #line 149 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{{p = ((te))-1;}{ CreateIntegerToken (10); }}
	break;
	case 95:
/* #line 157 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */
	{{p = ((te))-1;}{ CreateToken (ts [0]); }}
	break;
	case 96:
/* #line 1 "NONE" */
	{	switch( act ) {
	case 1:
	{{p = ((te))-1;} CreateToken (EToken_Import); }
	break;
	case 2:
	{{p = ((te))-1;} CreateToken (EToken_Namespace); }
	break;
	case 3:
	{{p = ((te))-1;} CreateToken (EToken_Using); }
	break;
	case 4:
	{{p = ((te))-1;} CreateToken (EToken_Pack); }
	break;
	case 5:
	{{p = ((te))-1;} CreateToken (EToken_Typedef); }
	break;
	case 6:
	{{p = ((te))-1;} CreateToken (EToken_Static); }
	break;
	case 7:
	{{p = ((te))-1;} CreateToken (EToken_Const); }
	break;
	case 8:
	{{p = ((te))-1;} CreateToken (EToken_Public); }
	break;
	case 9:
	{{p = ((te))-1;} CreateToken (EToken_Private); }
	break;
	case 10:
	{{p = ((te))-1;} CreateToken (EToken_Void); }
	break;
	case 11:
	{{p = ((te))-1;} CreateToken (EToken_Bool); }
	break;
	case 13:
	{{p = ((te))-1;} CreateToken (EToken_Char); }
	break;
	case 14:
	{{p = ((te))-1;} CreateToken (EToken_Short); }
	break;
	case 15:
	{{p = ((te))-1;} CreateToken (EToken_Long); }
	break;
	case 16:
	{{p = ((te))-1;} CreateToken (EToken_Signed); }
	break;
	case 17:
	{{p = ((te))-1;} CreateToken (EToken_Unsigned); }
	break;
	case 18:
	{{p = ((te))-1;} CreateToken (EToken_BigEndian); }
	break;
	case 19:
	{{p = ((te))-1;} CreateToken (EToken_LittleEndian); }
	break;
	case 20:
	{{p = ((te))-1;} CreateToken (EToken_Float); }
	break;
	case 21:
	{{p = ((te))-1;} CreateToken (EToken_Double); }
	break;
	case 22:
	{{p = ((te))-1;} CreateToken (EToken_WChar); }
	break;
	case 23:
	{{p = ((te))-1;} CreateToken (EToken_Int8); }
	break;
	case 24:
	{{p = ((te))-1;} CreateToken (EToken_Int16); }
	break;
	case 25:
	{{p = ((te))-1;} CreateToken (EToken_Int32); }
	break;
	case 26:
	{{p = ((te))-1;} CreateToken (EToken_Int64); }
	break;
	case 27:
	{{p = ((te))-1;} CreateToken (EToken_Variant); }
	break;
	case 28:
	{{p = ((te))-1;} CreateToken (EToken_Auto); }
	break;
	case 30:
	{{p = ((te))-1;} CreateToken (EToken_EnumC); }
	break;
	case 31:
	{{p = ((te))-1;} CreateToken (EToken_Struct); }
	break;
	case 32:
	{{p = ((te))-1;} CreateToken (EToken_Union); }
	break;
	case 33:
	{{p = ((te))-1;} CreateToken (EToken_Class); }
	break;
	case 34:
	{{p = ((te))-1;} CreateToken (EToken_Interface); }
	break;
	case 35:
	{{p = ((te))-1;} CreateToken (EToken_Property); }
	break;
	case 36:
	{{p = ((te))-1;} CreateToken (EToken_Get); }
	break;
	case 37:
	{{p = ((te))-1;} CreateToken (EToken_Set); }
	break;
	case 38:
	{{p = ((te))-1;} CreateToken (EToken_SizeOf); }
	break;
	case 39:
	{{p = ((te))-1;} CreateToken (EToken_TypeOf); }
	break;
	case 40:
	{{p = ((te))-1;} CreateToken (EToken_If); }
	break;
	case 41:
	{{p = ((te))-1;} CreateToken (EToken_Else); }
	break;
	case 42:
	{{p = ((te))-1;} CreateToken (EToken_For); }
	break;
	case 43:
	{{p = ((te))-1;} CreateToken (EToken_While); }
	break;
	case 45:
	{{p = ((te))-1;} CreateToken (EToken_Break); }
	break;
	case 46:
	{{p = ((te))-1;} CreateToken (EToken_Continue); }
	break;
	case 47:
	{{p = ((te))-1;} CreateToken (EToken_Return); }
	break;
	case 48:
	{{p = ((te))-1;} CreateToken (EToken_Switch); }
	break;
	case 49:
	{{p = ((te))-1;} CreateToken (EToken_Case); }
	break;
	case 50:
	{{p = ((te))-1;} CreateToken (EToken_Default); }
	break;
	case 51:
	{{p = ((te))-1;} CreateToken (EToken_True); }
	break;
	case 52:
	{{p = ((te))-1;} CreateToken (EToken_False); }
	break;
	case 74:
	{{p = ((te))-1;} CreateStringToken (EToken_Identifier); }
	break;
	case 75:
	{{p = ((te))-1;} CreateCharToken (EToken_Integer); }
	break;
	case 76:
	{{p = ((te))-1;} CreateStringToken (EToken_Literal, 1, 1); }
	break;
	case 82:
	{{p = ((te))-1;} CreateToken (ts [0]); }
	break;
	}
	}
	break;
/* #line 1341 "axl_jnc_Lexer.cpp" */
		}
	}

_again:
	_acts = _axl_jnc_actions + _axl_jnc_to_state_actions[cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 1:
/* #line 1 "NONE" */
	{ts = 0;}
	break;
/* #line 1352 "axl_jnc_Lexer.cpp" */
		}
	}

	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	if ( _axl_jnc_eof_trans[cs] > 0 ) {
		_trans = _axl_jnc_eof_trans[cs] - 1;
		goto _eof_trans;
	}
	}

	}

/* #line 175 "D:/Projects.v/AXL3/axl_jnc/axl_jnc_Lexer.rl" */

	bool Result = cs != axl_jnc_error;
	if (!Result)
	{
		CToken* pToken = CreateToken (EToken_Error);
		pToken->m_Data.m_Error = err::CError ("lexer error");
	}

	return Result;
}


//.............................................................................

} // namespace axl {
} // namespace jnc {
