
/* #line 1 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
#include "stdafx.h"
#include "axl_jnc_Lexer.h"

// warning C4065: switch statement contains 'default' but no 'case' labels

#pragma warning (disable: 4065)

namespace axl {
namespace jnc {

//.............................................................................


/* #line 2 "axl_jnc_Lexer.cpp" */
static const char _axl_jnc_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 75, 1, 76, 1, 77, 1, 
	78, 1, 79, 1, 80, 1, 81, 1, 
	82, 1, 83, 1, 84, 1, 85, 1, 
	86, 1, 87, 1, 88, 1, 89, 1, 
	90, 1, 91, 1, 92, 1, 93, 1, 
	94, 1, 95, 1, 96, 1, 97, 1, 
	98, 1, 100, 1, 101, 1, 102, 1, 
	103, 1, 104, 1, 105, 1, 106, 1, 
	107, 1, 108, 1, 109, 1, 110, 1, 
	111, 1, 112, 1, 113, 1, 114, 1, 
	115, 1, 116, 2, 0, 96, 2, 0, 
	97, 2, 0, 99, 2, 3, 4, 2, 
	3, 5, 2, 3, 6, 2, 3, 7, 
	2, 3, 8, 2, 3, 9, 2, 3, 
	10, 2, 3, 11, 2, 3, 12, 2, 
	3, 13, 2, 3, 14, 2, 3, 15, 
	2, 3, 16, 2, 3, 17, 2, 3, 
	18, 2, 3, 19, 2, 3, 20, 2, 
	3, 21, 2, 3, 22, 2, 3, 23, 
	2, 3, 24, 2, 3, 25, 2, 3, 
	26, 2, 3, 27, 2, 3, 28, 2, 
	3, 29, 2, 3, 30, 2, 3, 31, 
	2, 3, 32, 2, 3, 33, 2, 3, 
	34, 2, 3, 35, 2, 3, 36, 2, 
	3, 37, 2, 3, 38, 2, 3, 39, 
	2, 3, 40, 2, 3, 41, 2, 3, 
	42, 2, 3, 43, 2, 3, 44, 2, 
	3, 45, 2, 3, 46, 2, 3, 47, 
	2, 3, 48, 2, 3, 49, 2, 3, 
	50, 2, 3, 51, 2, 3, 52, 2, 
	3, 53, 2, 3, 54, 2, 3, 55, 
	2, 3, 56, 2, 3, 57, 2, 3, 
	58, 2, 3, 59, 2, 3, 60, 2, 
	3, 61, 2, 3, 62, 2, 3, 63, 
	2, 3, 64, 2, 3, 65, 2, 3, 
	66, 2, 3, 67, 2, 3, 68, 2, 
	3, 69, 2, 3, 70, 2, 3, 71, 
	2, 3, 72, 2, 3, 73, 2, 3, 
	74
};

static const short _axl_jnc_key_offsets[] = {
	0, 3, 6, 7, 9, 12, 18, 64, 
	67, 68, 71, 72, 73, 75, 78, 79, 
	80, 82, 85, 86, 89, 90, 94, 96, 
	102, 103, 105, 106, 107, 109, 110, 117, 
	118, 126, 134, 142, 152, 161, 169, 177, 
	185, 193, 201, 209, 217, 225, 233, 241, 
	249, 257, 265, 273, 281, 289, 301, 309, 
	317, 325, 333, 341, 349, 357, 365, 373, 
	381, 389, 398, 406, 414, 422, 430, 438, 
	448, 456, 464, 472, 480, 488, 496, 504, 
	512, 520, 528, 536, 545, 553, 561, 569, 
	577, 585, 593, 601, 609, 617, 625, 634, 
	642, 650, 659, 667, 675, 683, 691, 699, 
	709, 717, 725, 733, 741, 749, 757, 765, 
	773, 781, 789, 797, 805, 814, 822, 834, 
	842, 850, 858, 866, 874, 882, 890, 898, 
	907, 915, 923, 931, 939, 947, 955, 963, 
	971, 979, 987, 995, 1003, 1014, 1022, 1030, 
	1038, 1046, 1054, 1062, 1070, 1078, 1087, 1095, 
	1103, 1111, 1119, 1127, 1135, 1143, 1151, 1159, 
	1167, 1175, 1185, 1193, 1201, 1210, 1218, 1226, 
	1234, 1242, 1250, 1258, 1266, 1274, 1282, 1290, 
	1298, 1306, 1314, 1322, 1330, 1338, 1346, 1354, 
	1367, 1375, 1383, 1391, 1399, 1407, 1415, 1424, 
	1432, 1440, 1448, 1456, 1464, 1472, 1482, 1491, 
	1499, 1507, 1515, 1523, 1531, 1539, 1547, 1556, 
	1564, 1572, 1580, 1588, 1596, 1604, 1612, 1620, 
	1630, 1638, 1646, 1654, 1662, 1670, 1678, 1687, 
	1695, 1703, 1711, 1720, 1729, 1737, 1745, 1754, 
	1762, 1770, 1778, 1786, 1794, 1802, 1810, 1818, 
	1826, 1836, 1844, 1852, 1860, 1868, 1876, 1884, 
	1892, 1900, 1908, 1916, 1925, 1933, 1941, 1949, 
	1957, 1965, 1973, 1983, 1991, 1999, 2007, 2014, 
	2022, 2030, 2038, 2046, 2054, 2062
};

static const char _axl_jnc_trans_keys[] = {
	10, 34, 92, 10, 39, 92, 46, 10, 
	42, 10, 42, 47, 48, 57, 65, 70, 
	97, 102, 9, 10, 13, 32, 33, 34, 
	37, 38, 39, 42, 43, 45, 46, 47, 
	48, 58, 60, 61, 62, 94, 95, 97, 
	98, 99, 100, 101, 102, 103, 104, 105, 
	108, 110, 112, 114, 115, 116, 117, 118, 
	119, 124, 49, 57, 65, 90, 106, 122, 
	9, 13, 32, 61, 10, 34, 92, 10, 
	61, 38, 61, 10, 39, 92, 10, 61, 
	43, 61, 45, 61, 62, 46, 42, 47, 
	61, 10, 88, 120, 48, 57, 48, 57, 
	48, 57, 65, 70, 97, 102, 61, 60, 
	61, 61, 61, 61, 62, 61, 95, 48, 
	57, 65, 90, 97, 122, 61, 95, 117, 
	48, 57, 65, 90, 97, 122, 95, 116, 
	48, 57, 65, 90, 97, 122, 95, 111, 
	48, 57, 65, 90, 97, 122, 95, 105, 
	111, 114, 48, 57, 65, 90, 97, 122, 
	95, 103, 110, 48, 57, 65, 90, 97, 
	122, 95, 101, 48, 57, 65, 90, 97, 
	122, 95, 110, 48, 57, 65, 90, 97, 
	122, 95, 100, 48, 57, 65, 90, 97, 
	122, 95, 105, 48, 57, 65, 90, 97, 
	122, 95, 97, 48, 57, 65, 90, 98, 
	122, 95, 110, 48, 57, 65, 90, 97, 
	122, 95, 100, 48, 57, 65, 90, 97, 
	122, 95, 97, 48, 57, 65, 90, 98, 
	122, 95, 98, 48, 57, 65, 90, 97, 
	122, 95, 108, 48, 57, 65, 90, 97, 
	122, 95, 101, 48, 57, 65, 90, 97, 
	122, 95, 111, 48, 57, 65, 90, 97, 
	122, 95, 108, 48, 57, 65, 90, 97, 
	122, 95, 101, 48, 57, 65, 90, 97, 
	122, 95, 97, 48, 57, 65, 90, 98, 
	122, 95, 107, 48, 57, 65, 90, 97, 
	122, 95, 97, 100, 104, 108, 111, 48, 
	57, 65, 90, 98, 122, 95, 115, 48, 
	57, 65, 90, 97, 122, 95, 101, 48, 
	57, 65, 90, 97, 122, 95, 101, 48, 
	57, 65, 90, 97, 122, 95, 99, 48, 
	57, 65, 90, 97, 122, 95, 108, 48, 
	57, 65, 90, 97, 122, 95, 97, 48, 
	57, 65, 90, 98, 122, 95, 114, 48, 
	57, 65, 90, 97, 122, 95, 97, 48, 
	57, 65, 90, 98, 122, 95, 115, 48, 
	57, 65, 90, 97, 122, 95, 115, 48, 
	57, 65, 90, 97, 122, 95, 110, 48, 
	57, 65, 90, 97, 122, 95, 115, 116, 
	48, 57, 65, 90, 97, 122, 95, 116, 
	48, 57, 65, 90, 97, 122, 95, 105, 
	48, 57, 65, 90, 97, 122, 95, 110, 
	48, 57, 65, 90, 97, 122, 95, 117, 
	48, 57, 65, 90, 97, 122, 95, 101, 
	48, 57, 65, 90, 97, 122, 95, 101, 
	111, 121, 48, 57, 65, 90, 97, 122, 
	95, 102, 48, 57, 65, 90, 97, 122, 
	95, 97, 48, 57, 65, 90, 98, 122, 
	95, 117, 48, 57, 65, 90, 97, 122, 
	95, 108, 48, 57, 65, 90, 97, 122, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	95, 117, 48, 57, 65, 90, 97, 122, 
	95, 98, 48, 57, 65, 90, 97, 122, 
	95, 108, 48, 57, 65, 90, 97, 122, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	95, 110, 48, 57, 65, 90, 97, 122, 
	95, 97, 48, 57, 65, 90, 98, 122, 
	95, 115, 116, 48, 57, 65, 90, 97, 
	122, 95, 105, 48, 57, 65, 90, 97, 
	122, 95, 122, 48, 57, 65, 90, 97, 
	121, 95, 101, 48, 57, 65, 90, 97, 
	122, 95, 111, 48, 57, 65, 90, 97, 
	122, 95, 102, 48, 57, 65, 90, 97, 
	122, 95, 121, 48, 57, 65, 90, 97, 
	122, 95, 112, 48, 57, 65, 90, 97, 
	122, 95, 101, 48, 57, 65, 90, 97, 
	122, 95, 111, 48, 57, 65, 90, 97, 
	122, 95, 102, 48, 57, 65, 90, 97, 
	122, 95, 108, 110, 48, 57, 65, 90, 
	97, 122, 95, 115, 48, 57, 65, 90, 
	97, 122, 95, 101, 48, 57, 65, 90, 
	97, 122, 95, 100, 117, 48, 57, 65, 
	90, 97, 122, 95, 105, 48, 57, 65, 
	90, 97, 122, 95, 97, 48, 57, 65, 
	90, 98, 122, 95, 110, 48, 57, 65, 
	90, 97, 122, 95, 109, 48, 57, 65, 
	90, 97, 122, 95, 99, 48, 57, 65, 
	90, 97, 122, 95, 97, 108, 111, 48, 
	57, 65, 90, 98, 122, 95, 108, 48, 
	57, 65, 90, 97, 122, 95, 115, 48, 
	57, 65, 90, 97, 122, 95, 101, 48, 
	57, 65, 90, 97, 122, 95, 111, 48, 
	57, 65, 90, 97, 122, 95, 97, 48, 
	57, 65, 90, 98, 122, 95, 116, 48, 
	57, 65, 90, 97, 122, 95, 114, 48, 
	57, 65, 90, 97, 122, 95, 101, 48, 
	57, 65, 90, 97, 122, 95, 116, 48, 
	57, 65, 90, 97, 122, 95, 101, 48, 
	57, 65, 90, 97, 122, 95, 97, 48, 
	57, 65, 90, 98, 122, 95, 112, 48, 
	57, 65, 90, 97, 122, 95, 102, 110, 
	48, 57, 65, 90, 97, 122, 95, 116, 
	48, 57, 65, 90, 97, 122, 49, 51, 
	54, 56, 95, 101, 48, 57, 65, 90, 
	97, 122, 54, 95, 48, 57, 65, 90, 
	97, 122, 50, 95, 48, 57, 65, 90, 
	97, 122, 52, 95, 48, 57, 65, 90, 
	97, 122, 95, 114, 48, 57, 65, 90, 
	97, 122, 95, 102, 48, 57, 65, 90, 
	97, 122, 95, 97, 48, 57, 65, 90, 
	98, 122, 95, 99, 48, 57, 65, 90, 
	97, 122, 95, 101, 48, 57, 65, 90, 
	97, 122, 95, 105, 111, 48, 57, 65, 
	90, 97, 122, 95, 116, 48, 57, 65, 
	90, 97, 122, 95, 116, 48, 57, 65, 
	90, 97, 122, 95, 108, 48, 57, 65, 
	90, 97, 122, 95, 101, 48, 57, 65, 
	90, 97, 122, 95, 101, 48, 57, 65, 
	90, 97, 122, 95, 110, 48, 57, 65, 
	90, 97, 122, 95, 100, 48, 57, 65, 
	90, 97, 122, 95, 105, 48, 57, 65, 
	90, 97, 122, 95, 97, 48, 57, 65, 
	90, 98, 122, 95, 110, 48, 57, 65, 
	90, 97, 122, 95, 110, 48, 57, 65, 
	90, 97, 122, 95, 103, 48, 57, 65, 
	90, 97, 122, 95, 97, 101, 111, 117, 
	48, 57, 65, 90, 98, 122, 95, 109, 
	48, 57, 65, 90, 97, 122, 95, 101, 
	48, 57, 65, 90, 97, 122, 95, 115, 
	48, 57, 65, 90, 97, 122, 95, 112, 
	48, 57, 65, 90, 97, 122, 95, 97, 
	48, 57, 65, 90, 98, 122, 95, 99, 
	48, 57, 65, 90, 97, 122, 95, 101, 
	48, 57, 65, 90, 97, 122, 95, 119, 
	48, 57, 65, 90, 97, 122, 95, 110, 
	118, 48, 57, 65, 90, 97, 122, 95, 
	117, 48, 57, 65, 90, 97, 122, 95, 
	108, 48, 57, 65, 90, 97, 122, 95, 
	108, 48, 57, 65, 90, 97, 122, 95, 
	105, 48, 57, 65, 90, 97, 122, 95, 
	114, 48, 57, 65, 90, 97, 122, 95, 
	116, 48, 57, 65, 90, 97, 122, 95, 
	117, 48, 57, 65, 90, 97, 122, 95, 
	97, 48, 57, 65, 90, 98, 122, 95, 
	108, 48, 57, 65, 90, 97, 122, 95, 
	108, 48, 57, 65, 90, 97, 122, 95, 
	108, 48, 57, 65, 90, 97, 122, 95, 
	97, 114, 117, 48, 57, 65, 90, 98, 
	122, 95, 99, 48, 57, 65, 90, 97, 
	122, 95, 107, 48, 57, 65, 90, 97, 
	122, 95, 105, 111, 48, 57, 65, 90, 
	97, 122, 95, 118, 48, 57, 65, 90, 
	97, 122, 95, 97, 48, 57, 65, 90, 
	98, 122, 95, 116, 48, 57, 65, 90, 
	97, 122, 95, 101, 48, 57, 65, 90, 
	97, 122, 95, 112, 48, 57, 65, 90, 
	97, 122, 95, 101, 48, 57, 65, 90, 
	97, 122, 95, 114, 48, 57, 65, 90, 
	97, 122, 95, 116, 48, 57, 65, 90, 
	97, 122, 95, 121, 48, 57, 65, 90, 
	97, 122, 95, 98, 48, 57, 65, 90, 
	97, 122, 95, 108, 48, 57, 65, 90, 
	97, 122, 95, 105, 48, 57, 65, 90, 
	97, 122, 95, 99, 48, 57, 65, 90, 
	97, 122, 95, 101, 48, 57, 65, 90, 
	97, 122, 95, 116, 48, 57, 65, 90, 
	97, 122, 95, 117, 48, 57, 65, 90, 
	97, 122, 95, 114, 48, 57, 65, 90, 
	97, 122, 95, 110, 48, 57, 65, 90, 
	97, 122, 95, 97, 101, 104, 105, 116, 
	119, 48, 57, 65, 90, 98, 122, 95, 
	102, 48, 57, 65, 90, 97, 122, 95, 
	101, 48, 57, 65, 90, 97, 122, 95, 
	116, 48, 57, 65, 90, 97, 122, 95, 
	111, 48, 57, 65, 90, 97, 122, 95, 
	114, 48, 57, 65, 90, 97, 122, 95, 
	116, 48, 57, 65, 90, 97, 122, 95, 
	103, 122, 48, 57, 65, 90, 97, 121, 
	95, 110, 48, 57, 65, 90, 97, 122, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	95, 100, 48, 57, 65, 90, 97, 122, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	95, 111, 48, 57, 65, 90, 97, 122, 
	95, 102, 48, 57, 65, 90, 97, 122, 
	95, 97, 100, 114, 48, 57, 65, 90, 
	98, 122, 95, 99, 116, 48, 57, 65, 
	90, 97, 122, 95, 107, 48, 57, 65, 
	90, 97, 122, 95, 105, 48, 57, 65, 
	90, 97, 122, 95, 99, 48, 57, 65, 
	90, 97, 122, 95, 99, 48, 57, 65, 
	90, 97, 122, 95, 97, 48, 57, 65, 
	90, 98, 122, 95, 108, 48, 57, 65, 
	90, 97, 122, 95, 108, 48, 57, 65, 
	90, 97, 122, 95, 111, 117, 48, 57, 
	65, 90, 97, 122, 95, 110, 48, 57, 
	65, 90, 97, 122, 95, 103, 48, 57, 
	65, 90, 97, 122, 95, 99, 48, 57, 
	65, 90, 97, 122, 95, 116, 48, 57, 
	65, 90, 97, 122, 95, 105, 48, 57, 
	65, 90, 97, 122, 95, 116, 48, 57, 
	65, 90, 97, 122, 95, 99, 48, 57, 
	65, 90, 97, 122, 95, 104, 48, 57, 
	65, 90, 97, 122, 95, 104, 114, 121, 
	48, 57, 65, 90, 97, 122, 95, 105, 
	48, 57, 65, 90, 97, 122, 95, 115, 
	48, 57, 65, 90, 97, 122, 95, 117, 
	48, 57, 65, 90, 97, 122, 95, 101, 
	48, 57, 65, 90, 97, 122, 95, 112, 
	48, 57, 65, 90, 97, 122, 95, 101, 
	48, 57, 65, 90, 97, 122, 95, 100, 
	111, 48, 57, 65, 90, 97, 122, 95, 
	101, 48, 57, 65, 90, 97, 122, 95, 
	102, 48, 57, 65, 90, 97, 122, 95, 
	102, 48, 57, 65, 90, 97, 122, 95, 
	110, 115, 48, 57, 65, 90, 97, 122, 
	95, 105, 115, 48, 57, 65, 90, 97, 
	122, 95, 111, 48, 57, 65, 90, 97, 
	122, 95, 110, 48, 57, 65, 90, 97, 
	122, 95, 97, 105, 48, 57, 65, 90, 
	98, 122, 95, 102, 48, 57, 65, 90, 
	97, 122, 95, 101, 48, 57, 65, 90, 
	97, 122, 95, 103, 48, 57, 65, 90, 
	97, 122, 95, 110, 48, 57, 65, 90, 
	97, 122, 95, 101, 48, 57, 65, 90, 
	97, 122, 95, 100, 48, 57, 65, 90, 
	97, 122, 95, 105, 48, 57, 65, 90, 
	97, 122, 95, 110, 48, 57, 65, 90, 
	97, 122, 95, 103, 48, 57, 65, 90, 
	97, 122, 95, 97, 105, 111, 48, 57, 
	65, 90, 98, 122, 95, 114, 48, 57, 
	65, 90, 97, 122, 95, 105, 48, 57, 
	65, 90, 97, 122, 95, 97, 48, 57, 
	65, 90, 98, 122, 95, 110, 48, 57, 
	65, 90, 97, 122, 95, 116, 48, 57, 
	65, 90, 97, 122, 95, 114, 48, 57, 
	65, 90, 97, 122, 95, 116, 48, 57, 
	65, 90, 97, 122, 95, 117, 48, 57, 
	65, 90, 97, 122, 95, 97, 48, 57, 
	65, 90, 98, 122, 95, 108, 48, 57, 
	65, 90, 97, 122, 95, 105, 108, 48, 
	57, 65, 90, 97, 122, 95, 100, 48, 
	57, 65, 90, 97, 122, 95, 97, 48, 
	57, 65, 90, 98, 122, 95, 116, 48, 
	57, 65, 90, 97, 122, 95, 105, 48, 
	57, 65, 90, 97, 122, 95, 108, 48, 
	57, 65, 90, 97, 122, 95, 101, 48, 
	57, 65, 90, 97, 122, 95, 99, 101, 
	104, 48, 57, 65, 90, 97, 122, 95, 
	104, 48, 57, 65, 90, 97, 122, 95, 
	97, 48, 57, 65, 90, 98, 122, 95, 
	114, 48, 57, 65, 90, 97, 122, 95, 
	48, 57, 65, 90, 97, 122, 95, 116, 
	48, 57, 65, 90, 97, 122, 95, 97, 
	48, 57, 65, 90, 98, 122, 95, 107, 
	48, 57, 65, 90, 97, 122, 95, 105, 
	48, 57, 65, 90, 97, 122, 95, 108, 
	48, 57, 65, 90, 97, 122, 95, 101, 
	48, 57, 65, 90, 97, 122, 61, 124, 
	0
};

static const char _axl_jnc_single_lengths[] = {
	3, 3, 1, 2, 3, 0, 40, 3, 
	1, 3, 1, 1, 2, 3, 1, 1, 
	2, 3, 1, 3, 1, 2, 0, 0, 
	1, 2, 1, 1, 2, 1, 1, 1, 
	2, 2, 2, 4, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 6, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 4, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 3, 2, 2, 2, 2, 2, 4, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 6, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 5, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 4, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 7, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 4, 3, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 4, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 3, 3, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	4, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 4, 2, 2, 2, 1, 2, 
	2, 2, 2, 2, 2, 2
};

static const char _axl_jnc_range_lengths[] = {
	0, 0, 0, 0, 0, 3, 3, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 3, 
	0, 0, 0, 0, 0, 0, 3, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 0
};

static const short _axl_jnc_index_offsets[] = {
	0, 4, 8, 10, 13, 17, 21, 65, 
	69, 71, 75, 77, 79, 82, 86, 88, 
	90, 93, 97, 99, 103, 105, 109, 111, 
	115, 117, 120, 122, 124, 127, 129, 134, 
	136, 142, 148, 154, 162, 169, 175, 181, 
	187, 193, 199, 205, 211, 217, 223, 229, 
	235, 241, 247, 253, 259, 265, 275, 281, 
	287, 293, 299, 305, 311, 317, 323, 329, 
	335, 341, 348, 354, 360, 366, 372, 378, 
	386, 392, 398, 404, 410, 416, 422, 428, 
	434, 440, 446, 452, 459, 465, 471, 477, 
	483, 489, 495, 501, 507, 513, 519, 526, 
	532, 538, 545, 551, 557, 563, 569, 575, 
	583, 589, 595, 601, 607, 613, 619, 625, 
	631, 637, 643, 649, 655, 662, 668, 678, 
	684, 690, 696, 702, 708, 714, 720, 726, 
	733, 739, 745, 751, 757, 763, 769, 775, 
	781, 787, 793, 799, 805, 814, 820, 826, 
	832, 838, 844, 850, 856, 862, 869, 875, 
	881, 887, 893, 899, 905, 911, 917, 923, 
	929, 935, 943, 949, 955, 962, 968, 974, 
	980, 986, 992, 998, 1004, 1010, 1016, 1022, 
	1028, 1034, 1040, 1046, 1052, 1058, 1064, 1070, 
	1081, 1087, 1093, 1099, 1105, 1111, 1117, 1124, 
	1130, 1136, 1142, 1148, 1154, 1160, 1168, 1175, 
	1181, 1187, 1193, 1199, 1205, 1211, 1217, 1224, 
	1230, 1236, 1242, 1248, 1254, 1260, 1266, 1272, 
	1280, 1286, 1292, 1298, 1304, 1310, 1316, 1323, 
	1329, 1335, 1341, 1348, 1355, 1361, 1367, 1374, 
	1380, 1386, 1392, 1398, 1404, 1410, 1416, 1422, 
	1428, 1436, 1442, 1448, 1454, 1460, 1466, 1472, 
	1478, 1484, 1490, 1496, 1503, 1509, 1515, 1521, 
	1527, 1533, 1539, 1547, 1553, 1559, 1565, 1570, 
	1576, 1582, 1588, 1594, 1600, 1606
};

static const short _axl_jnc_indicies[] = {
	2, 3, 4, 1, 6, 7, 8, 5, 
	10, 9, 12, 13, 11, 12, 13, 14, 
	11, 16, 16, 16, 15, 18, 19, 18, 
	18, 20, 21, 22, 23, 24, 25, 26, 
	27, 28, 29, 30, 32, 33, 34, 35, 
	37, 36, 38, 39, 40, 41, 42, 43, 
	44, 45, 46, 47, 48, 49, 50, 51, 
	52, 53, 54, 55, 56, 31, 36, 36, 
	17, 18, 18, 18, 57, 59, 58, 2, 
	3, 4, 1, 60, 1, 61, 58, 62, 
	63, 58, 6, 7, 8, 5, 64, 5, 
	65, 58, 66, 67, 58, 68, 69, 70, 
	58, 71, 58, 11, 72, 73, 58, 74, 
	72, 76, 76, 31, 75, 31, 75, 16, 
	16, 16, 77, 78, 58, 79, 80, 58, 
	82, 81, 83, 58, 84, 85, 58, 87, 
	86, 36, 36, 36, 36, 0, 88, 58, 
	36, 90, 36, 36, 36, 89, 36, 91, 
	36, 36, 36, 89, 36, 92, 36, 36, 
	36, 89, 36, 93, 94, 95, 36, 36, 
	36, 89, 36, 96, 97, 36, 36, 36, 
	89, 36, 98, 36, 36, 36, 89, 36, 
	99, 36, 36, 36, 89, 36, 100, 36, 
	36, 36, 89, 36, 101, 36, 36, 36, 
	89, 36, 102, 36, 36, 36, 89, 36, 
	103, 36, 36, 36, 89, 36, 104, 36, 
	36, 36, 89, 36, 105, 36, 36, 36, 
	89, 36, 106, 36, 36, 36, 89, 36, 
	107, 36, 36, 36, 89, 36, 108, 36, 
	36, 36, 89, 36, 109, 36, 36, 36, 
	89, 36, 110, 36, 36, 36, 89, 36, 
	111, 36, 36, 36, 89, 36, 112, 36, 
	36, 36, 89, 36, 113, 36, 36, 36, 
	89, 36, 114, 115, 116, 117, 118, 36, 
	36, 36, 89, 36, 119, 36, 36, 36, 
	89, 36, 120, 36, 36, 36, 89, 36, 
	121, 36, 36, 36, 89, 36, 122, 36, 
	36, 36, 89, 36, 123, 36, 36, 36, 
	89, 36, 124, 36, 36, 36, 89, 36, 
	125, 36, 36, 36, 89, 36, 126, 36, 
	36, 36, 89, 36, 127, 36, 36, 36, 
	89, 36, 128, 36, 36, 36, 89, 36, 
	129, 36, 36, 36, 89, 36, 130, 131, 
	36, 36, 36, 89, 36, 132, 36, 36, 
	36, 89, 36, 133, 36, 36, 36, 89, 
	36, 134, 36, 36, 36, 89, 36, 135, 
	36, 36, 36, 89, 36, 136, 36, 36, 
	36, 89, 36, 137, 138, 139, 36, 36, 
	36, 89, 36, 140, 36, 36, 36, 89, 
	36, 141, 36, 36, 36, 89, 36, 142, 
	36, 36, 36, 89, 36, 143, 36, 36, 
	36, 89, 36, 144, 36, 36, 36, 89, 
	36, 146, 36, 36, 36, 145, 36, 147, 
	36, 36, 36, 89, 36, 148, 36, 36, 
	36, 89, 36, 149, 36, 36, 36, 89, 
	36, 150, 36, 36, 36, 89, 36, 151, 
	36, 36, 36, 89, 36, 152, 153, 36, 
	36, 36, 89, 36, 154, 36, 36, 36, 
	89, 36, 155, 36, 36, 36, 89, 36, 
	156, 36, 36, 36, 89, 36, 157, 36, 
	36, 36, 89, 36, 158, 36, 36, 36, 
	89, 36, 159, 36, 36, 36, 89, 36, 
	160, 36, 36, 36, 89, 36, 161, 36, 
	36, 36, 89, 36, 162, 36, 36, 36, 
	89, 36, 163, 36, 36, 36, 89, 36, 
	164, 165, 36, 36, 36, 89, 36, 166, 
	36, 36, 36, 89, 36, 167, 36, 36, 
	36, 89, 36, 168, 169, 36, 36, 36, 
	89, 36, 170, 36, 36, 36, 89, 36, 
	171, 36, 36, 36, 89, 36, 172, 36, 
	36, 36, 89, 36, 173, 36, 36, 36, 
	89, 36, 175, 36, 36, 36, 174, 36, 
	176, 177, 178, 36, 36, 36, 89, 36, 
	179, 36, 36, 36, 89, 36, 180, 36, 
	36, 36, 89, 36, 181, 36, 36, 36, 
	89, 36, 182, 36, 36, 36, 89, 36, 
	183, 36, 36, 36, 89, 36, 184, 36, 
	36, 36, 89, 36, 185, 36, 36, 36, 
	89, 36, 186, 36, 36, 36, 89, 36, 
	187, 36, 36, 36, 89, 36, 188, 36, 
	36, 36, 89, 36, 189, 36, 36, 36, 
	89, 36, 190, 36, 36, 36, 89, 36, 
	191, 192, 36, 36, 36, 89, 36, 193, 
	36, 36, 36, 89, 195, 196, 197, 198, 
	36, 199, 36, 36, 36, 194, 200, 36, 
	36, 36, 36, 89, 201, 36, 36, 36, 
	36, 89, 202, 36, 36, 36, 36, 89, 
	36, 203, 36, 36, 36, 89, 36, 204, 
	36, 36, 36, 89, 36, 205, 36, 36, 
	36, 89, 36, 206, 36, 36, 36, 89, 
	36, 207, 36, 36, 36, 89, 36, 208, 
	209, 36, 36, 36, 89, 36, 210, 36, 
	36, 36, 89, 36, 211, 36, 36, 36, 
	89, 36, 212, 36, 36, 36, 89, 36, 
	213, 36, 36, 36, 89, 36, 214, 36, 
	36, 36, 89, 36, 215, 36, 36, 36, 
	89, 36, 216, 36, 36, 36, 89, 36, 
	217, 36, 36, 36, 89, 36, 218, 36, 
	36, 36, 89, 36, 219, 36, 36, 36, 
	89, 36, 220, 36, 36, 36, 89, 36, 
	221, 36, 36, 36, 89, 36, 222, 223, 
	224, 225, 36, 36, 36, 89, 36, 226, 
	36, 36, 36, 89, 36, 227, 36, 36, 
	36, 89, 36, 228, 36, 36, 36, 89, 
	36, 229, 36, 36, 36, 89, 36, 230, 
	36, 36, 36, 89, 36, 231, 36, 36, 
	36, 89, 36, 232, 36, 36, 36, 89, 
	36, 233, 36, 36, 36, 89, 36, 234, 
	235, 36, 36, 36, 89, 36, 236, 36, 
	36, 36, 89, 36, 237, 36, 36, 36, 
	89, 36, 238, 36, 36, 36, 89, 36, 
	239, 36, 36, 36, 89, 36, 240, 36, 
	36, 36, 89, 36, 241, 36, 36, 36, 
	89, 36, 242, 36, 36, 36, 89, 36, 
	243, 36, 36, 36, 89, 36, 244, 36, 
	36, 36, 89, 36, 245, 36, 36, 36, 
	89, 36, 246, 36, 36, 36, 89, 36, 
	247, 248, 249, 36, 36, 36, 89, 36, 
	250, 36, 36, 36, 89, 36, 251, 36, 
	36, 36, 89, 36, 252, 253, 36, 36, 
	36, 89, 36, 254, 36, 36, 36, 89, 
	36, 255, 36, 36, 36, 89, 36, 256, 
	36, 36, 36, 89, 36, 257, 36, 36, 
	36, 89, 36, 258, 36, 36, 36, 89, 
	36, 259, 36, 36, 36, 89, 36, 260, 
	36, 36, 36, 89, 36, 261, 36, 36, 
	36, 89, 36, 262, 36, 36, 36, 89, 
	36, 263, 36, 36, 36, 89, 36, 264, 
	36, 36, 36, 89, 36, 265, 36, 36, 
	36, 89, 36, 266, 36, 36, 36, 89, 
	36, 267, 36, 36, 36, 89, 36, 268, 
	36, 36, 36, 89, 36, 269, 36, 36, 
	36, 89, 36, 270, 36, 36, 36, 89, 
	36, 271, 36, 36, 36, 89, 36, 272, 
	273, 274, 275, 276, 277, 36, 36, 36, 
	89, 36, 278, 36, 36, 36, 89, 36, 
	279, 36, 36, 36, 89, 36, 280, 36, 
	36, 36, 89, 36, 281, 36, 36, 36, 
	89, 36, 282, 36, 36, 36, 89, 36, 
	283, 36, 36, 36, 89, 36, 284, 285, 
	36, 36, 36, 89, 36, 286, 36, 36, 
	36, 89, 36, 287, 36, 36, 36, 89, 
	36, 288, 36, 36, 36, 89, 36, 289, 
	36, 36, 36, 89, 36, 290, 36, 36, 
	36, 89, 36, 291, 36, 36, 36, 89, 
	36, 292, 293, 294, 36, 36, 36, 89, 
	36, 295, 296, 36, 36, 36, 89, 36, 
	297, 36, 36, 36, 89, 36, 298, 36, 
	36, 36, 89, 36, 299, 36, 36, 36, 
	89, 36, 300, 36, 36, 36, 89, 36, 
	301, 36, 36, 36, 89, 36, 302, 36, 
	36, 36, 89, 36, 303, 36, 36, 36, 
	89, 36, 304, 305, 36, 36, 36, 89, 
	36, 306, 36, 36, 36, 89, 36, 307, 
	36, 36, 36, 89, 36, 308, 36, 36, 
	36, 89, 36, 309, 36, 36, 36, 89, 
	36, 310, 36, 36, 36, 89, 36, 311, 
	36, 36, 36, 89, 36, 312, 36, 36, 
	36, 89, 36, 313, 36, 36, 36, 89, 
	36, 314, 315, 316, 36, 36, 36, 89, 
	36, 317, 36, 36, 36, 89, 36, 318, 
	36, 36, 36, 89, 36, 319, 36, 36, 
	36, 89, 36, 320, 36, 36, 36, 89, 
	36, 321, 36, 36, 36, 89, 36, 322, 
	36, 36, 36, 89, 36, 323, 324, 36, 
	36, 36, 89, 36, 325, 36, 36, 36, 
	89, 36, 326, 36, 36, 36, 89, 36, 
	327, 36, 36, 36, 89, 36, 328, 329, 
	36, 36, 36, 89, 36, 330, 331, 36, 
	36, 36, 89, 36, 332, 36, 36, 36, 
	89, 36, 333, 36, 36, 36, 89, 36, 
	334, 335, 36, 36, 36, 89, 36, 336, 
	36, 36, 36, 89, 36, 337, 36, 36, 
	36, 89, 36, 338, 36, 36, 36, 89, 
	36, 339, 36, 36, 36, 89, 36, 340, 
	36, 36, 36, 89, 36, 341, 36, 36, 
	36, 89, 36, 342, 36, 36, 36, 89, 
	36, 343, 36, 36, 36, 89, 36, 344, 
	36, 36, 36, 89, 36, 345, 346, 347, 
	36, 36, 36, 89, 36, 348, 36, 36, 
	36, 89, 36, 349, 36, 36, 36, 89, 
	36, 350, 36, 36, 36, 89, 36, 351, 
	36, 36, 36, 89, 36, 352, 36, 36, 
	36, 89, 36, 353, 36, 36, 36, 89, 
	36, 354, 36, 36, 36, 89, 36, 355, 
	36, 36, 36, 89, 36, 356, 36, 36, 
	36, 89, 36, 357, 36, 36, 36, 89, 
	36, 358, 359, 36, 36, 36, 89, 36, 
	360, 36, 36, 36, 89, 36, 361, 36, 
	36, 36, 89, 36, 362, 36, 36, 36, 
	89, 36, 363, 36, 36, 36, 89, 36, 
	364, 36, 36, 36, 89, 36, 365, 36, 
	36, 36, 89, 36, 366, 367, 368, 36, 
	36, 36, 89, 36, 369, 36, 36, 36, 
	89, 36, 370, 36, 36, 36, 89, 36, 
	371, 36, 36, 36, 89, 372, 36, 36, 
	36, 89, 36, 373, 36, 36, 36, 89, 
	36, 374, 36, 36, 36, 89, 36, 375, 
	36, 36, 36, 89, 36, 376, 36, 36, 
	36, 89, 36, 377, 36, 36, 36, 89, 
	36, 378, 36, 36, 36, 89, 379, 380, 
	58, 0
};

static const short _axl_jnc_trans_targs[] = {
	6, 0, 6, 6, 10, 1, 6, 6, 
	14, 6, 6, 3, 3, 4, 6, 6, 
	23, 6, 7, 6, 8, 9, 11, 12, 
	13, 15, 16, 17, 18, 19, 21, 22, 
	24, 25, 27, 28, 30, 31, 32, 35, 
	53, 71, 94, 103, 111, 113, 116, 127, 
	140, 161, 178, 183, 215, 226, 240, 258, 
	269, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 2, 
	20, 6, 6, 6, 5, 6, 6, 26, 
	6, 6, 6, 6, 6, 29, 6, 6, 
	6, 6, 33, 34, 30, 36, 48, 50, 
	37, 43, 38, 39, 40, 41, 42, 30, 
	44, 45, 46, 47, 30, 49, 30, 51, 
	52, 30, 54, 56, 59, 61, 64, 55, 
	30, 57, 58, 30, 60, 30, 62, 63, 
	30, 65, 66, 67, 30, 68, 69, 70, 
	30, 72, 77, 81, 73, 74, 75, 76, 
	30, 6, 78, 79, 80, 30, 82, 83, 
	84, 89, 85, 86, 87, 88, 30, 90, 
	91, 92, 93, 30, 95, 97, 96, 30, 
	98, 101, 99, 100, 30, 102, 6, 30, 
	104, 107, 110, 105, 106, 30, 108, 109, 
	30, 30, 112, 30, 114, 115, 30, 30, 
	117, 118, 6, 119, 120, 121, 30, 122, 
	30, 30, 30, 123, 124, 125, 126, 30, 
	128, 138, 129, 130, 131, 132, 133, 134, 
	135, 136, 137, 30, 139, 30, 141, 148, 
	149, 159, 142, 143, 144, 145, 146, 147, 
	30, 30, 150, 153, 151, 152, 30, 154, 
	155, 156, 157, 158, 30, 160, 30, 162, 
	164, 174, 163, 30, 165, 169, 166, 167, 
	168, 30, 170, 171, 172, 173, 30, 175, 
	176, 177, 30, 179, 180, 181, 182, 30, 
	184, 186, 187, 190, 197, 211, 185, 30, 
	30, 188, 189, 30, 191, 194, 192, 193, 
	30, 195, 196, 30, 198, 202, 206, 199, 
	200, 30, 201, 30, 203, 204, 205, 30, 
	207, 209, 208, 30, 210, 30, 212, 213, 
	214, 30, 216, 218, 220, 217, 30, 219, 
	30, 221, 222, 223, 225, 224, 30, 30, 
	227, 237, 228, 230, 229, 30, 231, 233, 
	232, 30, 234, 235, 236, 30, 238, 239, 
	30, 241, 246, 251, 242, 243, 244, 245, 
	30, 247, 248, 249, 250, 30, 252, 253, 
	30, 254, 255, 256, 257, 30, 259, 264, 
	266, 260, 261, 262, 263, 30, 265, 30, 
	267, 268, 30, 6, 6
};

static const short _axl_jnc_trans_actions[] = {
	89, 0, 94, 53, 307, 0, 91, 51, 
	304, 87, 49, 0, 1, 0, 55, 85, 
	0, 57, 0, 97, 0, 310, 0, 0, 
	310, 0, 0, 0, 7, 7, 7, 0, 
	0, 0, 0, 0, 301, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 81, 83, 11, 73, 31, 19, 41, 
	71, 27, 21, 33, 23, 35, 25, 0, 
	0, 29, 79, 75, 0, 77, 47, 0, 
	13, 65, 37, 9, 15, 0, 67, 39, 
	43, 69, 0, 0, 175, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 139, 
	0, 0, 0, 0, 157, 0, 184, 0, 
	0, 274, 0, 0, 0, 0, 0, 0, 
	286, 0, 0, 166, 0, 205, 0, 0, 
	226, 0, 0, 0, 124, 0, 0, 0, 
	277, 0, 0, 0, 0, 0, 0, 0, 
	289, 63, 0, 0, 0, 202, 0, 0, 
	0, 0, 0, 0, 0, 0, 256, 0, 
	0, 0, 0, 259, 0, 0, 0, 265, 
	0, 0, 0, 0, 109, 0, 61, 217, 
	0, 0, 0, 0, 0, 295, 0, 0, 
	199, 268, 0, 235, 0, 0, 247, 262, 
	0, 0, 59, 0, 0, 0, 187, 0, 
	190, 193, 196, 0, 0, 0, 0, 229, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 136, 0, 211, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	100, 241, 0, 0, 0, 0, 148, 0, 
	0, 0, 0, 0, 163, 0, 298, 0, 
	0, 0, 0, 106, 0, 0, 0, 0, 
	0, 121, 0, 0, 0, 0, 232, 0, 
	0, 0, 118, 0, 0, 0, 0, 280, 
	0, 0, 0, 0, 0, 0, 0, 142, 
	238, 0, 0, 208, 0, 0, 0, 0, 
	130, 0, 0, 250, 0, 0, 0, 0, 
	0, 244, 0, 115, 0, 0, 0, 169, 
	0, 0, 0, 151, 0, 220, 0, 0, 
	0, 283, 0, 0, 0, 0, 172, 0, 
	292, 0, 0, 0, 0, 0, 112, 253, 
	0, 0, 0, 0, 0, 223, 0, 0, 
	0, 145, 0, 0, 0, 133, 0, 0, 
	103, 0, 0, 0, 0, 0, 0, 0, 
	181, 0, 0, 0, 0, 160, 0, 0, 
	178, 0, 0, 0, 0, 127, 0, 0, 
	0, 0, 0, 0, 0, 214, 0, 154, 
	0, 0, 271, 45, 17
};

static const short _axl_jnc_to_state_actions[] = {
	0, 0, 0, 0, 0, 0, 3, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0
};

static const short _axl_jnc_from_state_actions[] = {
	0, 0, 0, 0, 0, 0, 5, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0
};

static const short _axl_jnc_eof_trans[] = {
	1, 1, 10, 10, 10, 16, 0, 58, 
	59, 59, 61, 59, 59, 59, 65, 59, 
	59, 59, 59, 59, 75, 76, 76, 78, 
	59, 59, 82, 59, 59, 87, 1, 59, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 146, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 175, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 195, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 59
};

static const int axl_jnc_start = 6;
static const int axl_jnc_first_final = 6;
static const int axl_jnc_error = -1;

static const int axl_jnc_en_main = 6;


/* #line 180 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */


//.............................................................................

void 
CLexer::Init ()
{
	
/* #line 879 "axl_jnc_Lexer.cpp" */
	{
	cs = axl_jnc_start;
	ts = 0;
	te = 0;
	act = 0;
	}

/* #line 188 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
}

bool
CLexer::Exec ()
{
	
/* #line 885 "axl_jnc_Lexer.cpp" */
	{
	int _klen;
	unsigned int _trans;
	const char *_acts;
	unsigned int _nacts;
	const char *_keys;

	if ( p == pe )
		goto _test_eof;
_resume:
	_acts = _axl_jnc_actions + _axl_jnc_from_state_actions[cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 2:
/* #line 1 "NONE" */
	{ts = p;}
	break;
/* #line 902 "axl_jnc_Lexer.cpp" */
		}
	}

	_keys = _axl_jnc_trans_keys + _axl_jnc_key_offsets[cs];
	_trans = _axl_jnc_index_offsets[cs];

	_klen = _axl_jnc_single_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( (*p) < *_mid )
				_upper = _mid - 1;
			else if ( (*p) > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (unsigned int)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _axl_jnc_range_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( (*p) < _mid[0] )
				_upper = _mid - 2;
			else if ( (*p) > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += (unsigned int)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	_trans = _axl_jnc_indicies[_trans];
_eof_trans:
	cs = _axl_jnc_trans_targs[_trans];

	if ( _axl_jnc_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _axl_jnc_actions + _axl_jnc_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 0:
/* #line 44 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{ NewLine (p + 1); }
	break;
	case 3:
/* #line 1 "NONE" */
	{te = p+1;}
	break;
	case 4:
/* #line 58 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 1;}
	break;
	case 5:
/* #line 59 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 2;}
	break;
	case 6:
/* #line 60 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 3;}
	break;
	case 7:
/* #line 61 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 4;}
	break;
	case 8:
/* #line 63 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 5;}
	break;
	case 9:
/* #line 64 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 6;}
	break;
	case 10:
/* #line 66 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 7;}
	break;
	case 11:
/* #line 67 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 8;}
	break;
	case 12:
/* #line 69 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 9;}
	break;
	case 13:
/* #line 70 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 10;}
	break;
	case 14:
/* #line 71 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 11;}
	break;
	case 15:
/* #line 72 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 12;}
	break;
	case 16:
/* #line 73 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 13;}
	break;
	case 17:
/* #line 74 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 14;}
	break;
	case 18:
/* #line 75 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 15;}
	break;
	case 19:
/* #line 76 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 16;}
	break;
	case 20:
/* #line 77 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 17;}
	break;
	case 21:
/* #line 78 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 18;}
	break;
	case 22:
/* #line 79 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 19;}
	break;
	case 23:
/* #line 80 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 20;}
	break;
	case 24:
/* #line 81 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 21;}
	break;
	case 25:
/* #line 82 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 22;}
	break;
	case 26:
/* #line 83 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 23;}
	break;
	case 27:
/* #line 84 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 24;}
	break;
	case 28:
/* #line 85 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 25;}
	break;
	case 29:
/* #line 87 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 26;}
	break;
	case 30:
/* #line 88 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 27;}
	break;
	case 31:
/* #line 89 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 28;}
	break;
	case 32:
/* #line 90 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 29;}
	break;
	case 33:
/* #line 91 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 30;}
	break;
	case 34:
/* #line 92 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 31;}
	break;
	case 35:
/* #line 93 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 32;}
	break;
	case 36:
/* #line 94 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 33;}
	break;
	case 37:
/* #line 95 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 34;}
	break;
	case 38:
/* #line 96 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 35;}
	break;
	case 39:
/* #line 98 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 37;}
	break;
	case 40:
/* #line 99 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 38;}
	break;
	case 41:
/* #line 100 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 39;}
	break;
	case 42:
/* #line 101 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 40;}
	break;
	case 43:
/* #line 104 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 42;}
	break;
	case 44:
/* #line 105 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 43;}
	break;
	case 45:
/* #line 106 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 44;}
	break;
	case 46:
/* #line 107 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 45;}
	break;
	case 47:
/* #line 108 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 46;}
	break;
	case 48:
/* #line 109 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 47;}
	break;
	case 49:
/* #line 110 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 48;}
	break;
	case 50:
/* #line 111 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 49;}
	break;
	case 51:
/* #line 113 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 50;}
	break;
	case 52:
/* #line 114 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 51;}
	break;
	case 53:
/* #line 115 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 52;}
	break;
	case 54:
/* #line 116 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 53;}
	break;
	case 55:
/* #line 117 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 54;}
	break;
	case 56:
/* #line 118 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 55;}
	break;
	case 57:
/* #line 119 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 56;}
	break;
	case 58:
/* #line 121 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 57;}
	break;
	case 59:
/* #line 122 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 58;}
	break;
	case 60:
/* #line 123 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 59;}
	break;
	case 61:
/* #line 124 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 60;}
	break;
	case 62:
/* #line 126 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 62;}
	break;
	case 63:
/* #line 127 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 63;}
	break;
	case 64:
/* #line 128 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 64;}
	break;
	case 65:
/* #line 129 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 65;}
	break;
	case 66:
/* #line 130 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 66;}
	break;
	case 67:
/* #line 131 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 67;}
	break;
	case 68:
/* #line 133 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 68;}
	break;
	case 69:
/* #line 134 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 69;}
	break;
	case 70:
/* #line 135 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 70;}
	break;
	case 71:
/* #line 165 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 94;}
	break;
	case 72:
/* #line 166 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 95;}
	break;
	case 73:
/* #line 167 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 96;}
	break;
	case 74:
/* #line 176 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 102;}
	break;
	case 75:
/* #line 139 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Eq); }}
	break;
	case 76:
/* #line 140 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Ne); }}
	break;
	case 77:
/* #line 141 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Le); }}
	break;
	case 78:
/* #line 142 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Ge); }}
	break;
	case 79:
/* #line 143 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_LogicalOr); }}
	break;
	case 80:
/* #line 144 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_LogicalAnd); }}
	break;
	case 81:
/* #line 147 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Inc); }}
	break;
	case 82:
/* #line 148 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Dec); }}
	break;
	case 83:
/* #line 149 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Ptr); }}
	break;
	case 84:
/* #line 150 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_MulAssign); }}
	break;
	case 85:
/* #line 151 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_DivAssign); }}
	break;
	case 86:
/* #line 152 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_ModAssign); }}
	break;
	case 87:
/* #line 153 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_AddAssign); }}
	break;
	case 88:
/* #line 154 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_SubAssign); }}
	break;
	case 89:
/* #line 155 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_ShlAssign); }}
	break;
	case 90:
/* #line 156 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_ShrAssign); }}
	break;
	case 91:
/* #line 157 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_AndAssign); }}
	break;
	case 92:
/* #line 158 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_XorAssign); }}
	break;
	case 93:
/* #line 159 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_OrAssign); }}
	break;
	case 94:
/* #line 160 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_RefAssign); }}
	break;
	case 95:
/* #line 161 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Ellipsis); }}
	break;
	case 96:
/* #line 166 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateCharToken (EToken_Integer); }}
	break;
	case 97:
/* #line 167 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateStringToken (EToken_Literal, 1, 1); }}
	break;
	case 98:
/* #line 172 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;}
	break;
	case 99:
/* #line 174 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;}
	break;
	case 100:
/* #line 176 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (ts [0]); }}
	break;
	case 101:
/* #line 97 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateToken (EToken_Int); }}
	break;
	case 102:
/* #line 103 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateToken (EToken_Enum); }}
	break;
	case 103:
/* #line 125 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateToken (EToken_Do); }}
	break;
	case 104:
/* #line 145 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateToken (EToken_Shl); }}
	break;
	case 105:
/* #line 146 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateToken (EToken_Shr); }}
	break;
	case 106:
/* #line 165 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateStringToken (EToken_Identifier); }}
	break;
	case 107:
/* #line 166 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateCharToken (EToken_Integer); }}
	break;
	case 108:
/* #line 167 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateStringToken (EToken_Literal, 1, 1); }}
	break;
	case 109:
/* #line 168 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateIntegerToken (10); }}
	break;
	case 110:
/* #line 169 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateIntegerToken (16, 2); }}
	break;
	case 111:
/* #line 171 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;}
	break;
	case 112:
/* #line 174 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;}
	break;
	case 113:
/* #line 176 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateToken (ts [0]); }}
	break;
	case 114:
/* #line 168 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{{p = ((te))-1;}{ CreateIntegerToken (10); }}
	break;
	case 115:
/* #line 176 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{{p = ((te))-1;}{ CreateToken (ts [0]); }}
	break;
	case 116:
/* #line 1 "NONE" */
	{	switch( act ) {
	case 1:
	{{p = ((te))-1;} CreateToken (EToken_Namespace); }
	break;
	case 2:
	{{p = ((te))-1;} CreateToken (EToken_Using); }
	break;
	case 3:
	{{p = ((te))-1;} CreateToken (EToken_Pack); }
	break;
	case 4:
	{{p = ((te))-1;} CreateToken (EToken_Endian); }
	break;
	case 5:
	{{p = ((te))-1;} CreateToken (EToken_Typedef); }
	break;
	case 6:
	{{p = ((te))-1;} CreateToken (EToken_Static); }
	break;
	case 7:
	{{p = ((te))-1;} CreateToken (EToken_Public); }
	break;
	case 8:
	{{p = ((te))-1;} CreateToken (EToken_Private); }
	break;
	case 9:
	{{p = ((te))-1;} CreateToken (EToken_Const); }
	break;
	case 10:
	{{p = ((te))-1;} CreateToken (EToken_Volatile); }
	break;
	case 11:
	{{p = ((te))-1;} CreateToken (EToken_Signed); }
	break;
	case 12:
	{{p = ((te))-1;} CreateToken (EToken_Unsigned); }
	break;
	case 13:
	{{p = ((te))-1;} CreateToken (EToken_LittleEndian); }
	break;
	case 14:
	{{p = ((te))-1;} CreateToken (EToken_BigEndian); }
	break;
	case 15:
	{{p = ((te))-1;} CreateToken (EToken_Safe); }
	break;
	case 16:
	{{p = ((te))-1;} CreateToken (EToken_Unsafe); }
	break;
	case 17:
	{{p = ((te))-1;} CreateToken (EToken_NoNull); }
	break;
	case 18:
	{{p = ((te))-1;} CreateToken (EToken_Strong); }
	break;
	case 19:
	{{p = ((te))-1;} CreateToken (EToken_Weak); }
	break;
	case 20:
	{{p = ((te))-1;} CreateToken (EToken_Bindable); }
	break;
	case 21:
	{{p = ((te))-1;} CreateToken (EToken_Virtual); }
	break;
	case 22:
	{{p = ((te))-1;} CreateToken (EToken_NoVirtual); }
	break;
	case 23:
	{{p = ((te))-1;} CreateToken (EToken_Cdecl); }
	break;
	case 24:
	{{p = ((te))-1;} CreateToken (EToken_Stdcall); }
	break;
	case 25:
	{{p = ((te))-1;} CreateToken (EToken_This); }
	break;
	case 26:
	{{p = ((te))-1;} CreateToken (EToken_Auto); }
	break;
	case 27:
	{{p = ((te))-1;} CreateToken (EToken_Void); }
	break;
	case 28:
	{{p = ((te))-1;} CreateToken (EToken_Variant); }
	break;
	case 29:
	{{p = ((te))-1;} CreateToken (EToken_Bool); }
	break;
	case 30:
	{{p = ((te))-1;} CreateToken (EToken_Int8); }
	break;
	case 31:
	{{p = ((te))-1;} CreateToken (EToken_Int16); }
	break;
	case 32:
	{{p = ((te))-1;} CreateToken (EToken_Int32); }
	break;
	case 33:
	{{p = ((te))-1;} CreateToken (EToken_Int64); }
	break;
	case 34:
	{{p = ((te))-1;} CreateToken (EToken_Float); }
	break;
	case 35:
	{{p = ((te))-1;} CreateToken (EToken_Double); }
	break;
	case 37:
	{{p = ((te))-1;} CreateToken (EToken_Char); }
	break;
	case 38:
	{{p = ((te))-1;} CreateToken (EToken_Short); }
	break;
	case 39:
	{{p = ((te))-1;} CreateToken (EToken_Long); }
	break;
	case 40:
	{{p = ((te))-1;} CreateToken (EToken_WChar); }
	break;
	case 42:
	{{p = ((te))-1;} CreateToken (EToken_EnumC); }
	break;
	case 43:
	{{p = ((te))-1;} CreateToken (EToken_Struct); }
	break;
	case 44:
	{{p = ((te))-1;} CreateToken (EToken_Union); }
	break;
	case 45:
	{{p = ((te))-1;} CreateToken (EToken_Class); }
	break;
	case 46:
	{{p = ((te))-1;} CreateToken (EToken_Interface); }
	break;
	case 47:
	{{p = ((te))-1;} CreateToken (EToken_Property); }
	break;
	case 48:
	{{p = ((te))-1;} CreateToken (EToken_Get); }
	break;
	case 49:
	{{p = ((te))-1;} CreateToken (EToken_Set); }
	break;
	case 50:
	{{p = ((te))-1;} CreateToken (EToken_New); }
	break;
	case 51:
	{{p = ((te))-1;} CreateToken (EToken_Stack); }
	break;
	case 52:
	{{p = ((te))-1;} CreateToken (EToken_Heap); }
	break;
	case 53:
	{{p = ((te))-1;} CreateToken (EToken_SizeOf); }
	break;
	case 54:
	{{p = ((te))-1;} CreateToken (EToken_TypeOf); }
	break;
	case 55:
	{{p = ((te))-1;} CreateToken (EToken_DynaSizeOf); }
	break;
	case 56:
	{{p = ((te))-1;} CreateToken (EToken_DynaTypeOf); }
	break;
	case 57:
	{{p = ((te))-1;} CreateToken (EToken_If); }
	break;
	case 58:
	{{p = ((te))-1;} CreateToken (EToken_Else); }
	break;
	case 59:
	{{p = ((te))-1;} CreateToken (EToken_For); }
	break;
	case 60:
	{{p = ((te))-1;} CreateToken (EToken_While); }
	break;
	case 62:
	{{p = ((te))-1;} CreateToken (EToken_Break); }
	break;
	case 63:
	{{p = ((te))-1;} CreateToken (EToken_Continue); }
	break;
	case 64:
	{{p = ((te))-1;} CreateToken (EToken_Return); }
	break;
	case 65:
	{{p = ((te))-1;} CreateToken (EToken_Switch); }
	break;
	case 66:
	{{p = ((te))-1;} CreateToken (EToken_Case); }
	break;
	case 67:
	{{p = ((te))-1;} CreateToken (EToken_Default); }
	break;
	case 68:
	{{p = ((te))-1;} CreateToken (EToken_True); }
	break;
	case 69:
	{{p = ((te))-1;} CreateToken (EToken_False); }
	break;
	case 70:
	{{p = ((te))-1;} CreateToken (EToken_Null); }
	break;
	case 94:
	{{p = ((te))-1;} CreateStringToken (EToken_Identifier); }
	break;
	case 95:
	{{p = ((te))-1;} CreateCharToken (EToken_Integer); }
	break;
	case 96:
	{{p = ((te))-1;} CreateStringToken (EToken_Literal, 1, 1); }
	break;
	case 102:
	{{p = ((te))-1;} CreateToken (ts [0]); }
	break;
	}
	}
	break;
/* #line 1527 "axl_jnc_Lexer.cpp" */
		}
	}

_again:
	_acts = _axl_jnc_actions + _axl_jnc_to_state_actions[cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 1:
/* #line 1 "NONE" */
	{ts = 0;}
	break;
/* #line 1538 "axl_jnc_Lexer.cpp" */
		}
	}

	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	if ( _axl_jnc_eof_trans[cs] > 0 ) {
		_trans = _axl_jnc_eof_trans[cs] - 1;
		goto _eof_trans;
	}
	}

	}

/* #line 194 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */

	bool Result = cs != axl_jnc_error;
	if (!Result)
	{
		CToken* pToken = CreateToken (EToken_Error);
		pToken->m_Data.m_Error = err::CError ("lexer error");
	}

	return Result;
}

//.............................................................................

} // namespace axl {
} // namespace jnc {
