
/* #line 1 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
#include "stdafx.h"
#include "axl_jnc_Lexer.h"

// warning C4065: switch statement contains 'default' but no 'case' labels

#pragma warning (disable: 4065)

namespace axl {
namespace jnc {

//.............................................................................


/* #line 2 "axl_jnc_Lexer.cpp" */
static const char _axl_jnc_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 70, 1, 71, 1, 72, 1, 
	73, 1, 74, 1, 75, 1, 76, 1, 
	77, 1, 78, 1, 79, 1, 80, 1, 
	81, 1, 82, 1, 83, 1, 84, 1, 
	85, 1, 86, 1, 87, 1, 88, 1, 
	89, 1, 90, 1, 91, 1, 92, 1, 
	93, 1, 95, 1, 96, 1, 97, 1, 
	98, 1, 99, 1, 100, 1, 101, 1, 
	102, 1, 103, 1, 104, 1, 105, 1, 
	106, 1, 107, 1, 108, 1, 109, 1, 
	110, 1, 111, 2, 0, 91, 2, 0, 
	92, 2, 0, 94, 2, 3, 4, 2, 
	3, 5, 2, 3, 6, 2, 3, 7, 
	2, 3, 8, 2, 3, 9, 2, 3, 
	10, 2, 3, 11, 2, 3, 12, 2, 
	3, 13, 2, 3, 14, 2, 3, 15, 
	2, 3, 16, 2, 3, 17, 2, 3, 
	18, 2, 3, 19, 2, 3, 20, 2, 
	3, 21, 2, 3, 22, 2, 3, 23, 
	2, 3, 24, 2, 3, 25, 2, 3, 
	26, 2, 3, 27, 2, 3, 28, 2, 
	3, 29, 2, 3, 30, 2, 3, 31, 
	2, 3, 32, 2, 3, 33, 2, 3, 
	34, 2, 3, 35, 2, 3, 36, 2, 
	3, 37, 2, 3, 38, 2, 3, 39, 
	2, 3, 40, 2, 3, 41, 2, 3, 
	42, 2, 3, 43, 2, 3, 44, 2, 
	3, 45, 2, 3, 46, 2, 3, 47, 
	2, 3, 48, 2, 3, 49, 2, 3, 
	50, 2, 3, 51, 2, 3, 52, 2, 
	3, 53, 2, 3, 54, 2, 3, 55, 
	2, 3, 56, 2, 3, 57, 2, 3, 
	58, 2, 3, 59, 2, 3, 60, 2, 
	3, 61, 2, 3, 62, 2, 3, 63, 
	2, 3, 64, 2, 3, 65, 2, 3, 
	66, 2, 3, 67, 2, 3, 68, 2, 
	3, 69
};

static const short _axl_jnc_key_offsets[] = {
	0, 3, 6, 7, 9, 12, 18, 64, 
	67, 68, 71, 72, 73, 75, 78, 79, 
	80, 82, 85, 86, 89, 90, 94, 96, 
	102, 103, 105, 106, 107, 109, 110, 117, 
	118, 126, 134, 142, 152, 161, 169, 177, 
	185, 193, 201, 209, 217, 225, 233, 241, 
	249, 257, 265, 273, 281, 289, 300, 308, 
	316, 324, 332, 340, 348, 356, 364, 373, 
	381, 389, 397, 405, 413, 423, 431, 439, 
	447, 455, 463, 471, 479, 487, 495, 503, 
	511, 520, 528, 536, 544, 552, 560, 568, 
	576, 584, 592, 600, 609, 617, 625, 634, 
	642, 650, 658, 666, 674, 684, 692, 700, 
	708, 716, 724, 732, 740, 748, 756, 764, 
	772, 780, 789, 797, 809, 817, 825, 833, 
	841, 849, 857, 865, 873, 882, 890, 898, 
	906, 914, 922, 930, 938, 946, 954, 962, 
	970, 978, 989, 997, 1005, 1013, 1021, 1029, 
	1037, 1045, 1053, 1061, 1069, 1077, 1085, 1093, 
	1101, 1111, 1119, 1127, 1136, 1144, 1152, 1160, 
	1168, 1176, 1184, 1192, 1200, 1208, 1216, 1224, 
	1232, 1240, 1248, 1256, 1264, 1272, 1280, 1293, 
	1301, 1309, 1317, 1325, 1333, 1341, 1350, 1358, 
	1366, 1374, 1382, 1390, 1398, 1407, 1416, 1424, 
	1432, 1440, 1449, 1457, 1465, 1473, 1481, 1489, 
	1497, 1505, 1513, 1522, 1530, 1538, 1546, 1554, 
	1563, 1571, 1579, 1587, 1596, 1605, 1613, 1621, 
	1630, 1638, 1646, 1654, 1662, 1670, 1678, 1686, 
	1694, 1702, 1711, 1719, 1727, 1735, 1743, 1751, 
	1760, 1768, 1776, 1784, 1792, 1800, 1808, 1818, 
	1826, 1834, 1842, 1849, 1857, 1865, 1873, 1881, 
	1889, 1897
};

static const char _axl_jnc_trans_keys[] = {
	10, 34, 92, 10, 39, 92, 46, 10, 
	42, 10, 42, 47, 48, 57, 65, 70, 
	97, 102, 9, 10, 13, 32, 33, 34, 
	37, 38, 39, 42, 43, 45, 46, 47, 
	48, 58, 60, 61, 62, 94, 95, 97, 
	98, 99, 100, 101, 102, 103, 104, 105, 
	108, 110, 112, 114, 115, 116, 117, 118, 
	119, 124, 49, 57, 65, 90, 106, 122, 
	9, 13, 32, 61, 10, 34, 92, 10, 
	61, 38, 61, 10, 39, 92, 10, 61, 
	43, 61, 45, 61, 62, 46, 42, 47, 
	61, 10, 88, 120, 48, 57, 48, 57, 
	48, 57, 65, 70, 97, 102, 61, 60, 
	61, 61, 61, 61, 62, 61, 95, 48, 
	57, 65, 90, 97, 122, 61, 95, 117, 
	48, 57, 65, 90, 97, 122, 95, 116, 
	48, 57, 65, 90, 97, 122, 95, 111, 
	48, 57, 65, 90, 97, 122, 95, 105, 
	111, 114, 48, 57, 65, 90, 97, 122, 
	95, 103, 110, 48, 57, 65, 90, 97, 
	122, 95, 101, 48, 57, 65, 90, 97, 
	122, 95, 110, 48, 57, 65, 90, 97, 
	122, 95, 100, 48, 57, 65, 90, 97, 
	122, 95, 105, 48, 57, 65, 90, 97, 
	122, 95, 97, 48, 57, 65, 90, 98, 
	122, 95, 110, 48, 57, 65, 90, 97, 
	122, 95, 100, 48, 57, 65, 90, 97, 
	122, 95, 97, 48, 57, 65, 90, 98, 
	122, 95, 98, 48, 57, 65, 90, 97, 
	122, 95, 108, 48, 57, 65, 90, 97, 
	122, 95, 101, 48, 57, 65, 90, 97, 
	122, 95, 111, 48, 57, 65, 90, 97, 
	122, 95, 108, 48, 57, 65, 90, 97, 
	122, 95, 101, 48, 57, 65, 90, 97, 
	122, 95, 97, 48, 57, 65, 90, 98, 
	122, 95, 107, 48, 57, 65, 90, 97, 
	122, 95, 97, 104, 108, 111, 48, 57, 
	65, 90, 98, 122, 95, 115, 48, 57, 
	65, 90, 97, 122, 95, 101, 48, 57, 
	65, 90, 97, 122, 95, 97, 48, 57, 
	65, 90, 98, 122, 95, 114, 48, 57, 
	65, 90, 97, 122, 95, 97, 48, 57, 
	65, 90, 98, 122, 95, 115, 48, 57, 
	65, 90, 97, 122, 95, 115, 48, 57, 
	65, 90, 97, 122, 95, 110, 48, 57, 
	65, 90, 97, 122, 95, 115, 116, 48, 
	57, 65, 90, 97, 122, 95, 116, 48, 
	57, 65, 90, 97, 122, 95, 105, 48, 
	57, 65, 90, 97, 122, 95, 110, 48, 
	57, 65, 90, 97, 122, 95, 117, 48, 
	57, 65, 90, 97, 122, 95, 101, 48, 
	57, 65, 90, 97, 122, 95, 101, 111, 
	121, 48, 57, 65, 90, 97, 122, 95, 
	102, 48, 57, 65, 90, 97, 122, 95, 
	97, 48, 57, 65, 90, 98, 122, 95, 
	117, 48, 57, 65, 90, 97, 122, 95, 
	108, 48, 57, 65, 90, 97, 122, 95, 
	116, 48, 57, 65, 90, 97, 122, 95, 
	117, 48, 57, 65, 90, 97, 122, 95, 
	98, 48, 57, 65, 90, 97, 122, 95, 
	108, 48, 57, 65, 90, 97, 122, 95, 
	101, 48, 57, 65, 90, 97, 122, 95, 
	110, 48, 57, 65, 90, 97, 122, 95, 
	97, 48, 57, 65, 90, 98, 122, 95, 
	115, 116, 48, 57, 65, 90, 97, 122, 
	95, 105, 48, 57, 65, 90, 97, 122, 
	95, 122, 48, 57, 65, 90, 97, 121, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	95, 111, 48, 57, 65, 90, 97, 122, 
	95, 102, 48, 57, 65, 90, 97, 122, 
	95, 121, 48, 57, 65, 90, 97, 122, 
	95, 112, 48, 57, 65, 90, 97, 122, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	95, 111, 48, 57, 65, 90, 97, 122, 
	95, 102, 48, 57, 65, 90, 97, 122, 
	95, 108, 110, 48, 57, 65, 90, 97, 
	122, 95, 115, 48, 57, 65, 90, 97, 
	122, 95, 101, 48, 57, 65, 90, 97, 
	122, 95, 100, 117, 48, 57, 65, 90, 
	97, 122, 95, 105, 48, 57, 65, 90, 
	97, 122, 95, 97, 48, 57, 65, 90, 
	98, 122, 95, 110, 48, 57, 65, 90, 
	97, 122, 95, 109, 48, 57, 65, 90, 
	97, 122, 95, 99, 48, 57, 65, 90, 
	97, 122, 95, 97, 108, 111, 48, 57, 
	65, 90, 98, 122, 95, 108, 48, 57, 
	65, 90, 97, 122, 95, 115, 48, 57, 
	65, 90, 97, 122, 95, 101, 48, 57, 
	65, 90, 97, 122, 95, 111, 48, 57, 
	65, 90, 97, 122, 95, 97, 48, 57, 
	65, 90, 98, 122, 95, 116, 48, 57, 
	65, 90, 97, 122, 95, 114, 48, 57, 
	65, 90, 97, 122, 95, 101, 48, 57, 
	65, 90, 97, 122, 95, 116, 48, 57, 
	65, 90, 97, 122, 95, 101, 48, 57, 
	65, 90, 97, 122, 95, 97, 48, 57, 
	65, 90, 98, 122, 95, 112, 48, 57, 
	65, 90, 97, 122, 95, 102, 110, 48, 
	57, 65, 90, 97, 122, 95, 116, 48, 
	57, 65, 90, 97, 122, 49, 51, 54, 
	56, 95, 101, 48, 57, 65, 90, 97, 
	122, 54, 95, 48, 57, 65, 90, 97, 
	122, 50, 95, 48, 57, 65, 90, 97, 
	122, 52, 95, 48, 57, 65, 90, 97, 
	122, 95, 114, 48, 57, 65, 90, 97, 
	122, 95, 102, 48, 57, 65, 90, 97, 
	122, 95, 97, 48, 57, 65, 90, 98, 
	122, 95, 99, 48, 57, 65, 90, 97, 
	122, 95, 101, 48, 57, 65, 90, 97, 
	122, 95, 105, 111, 48, 57, 65, 90, 
	97, 122, 95, 116, 48, 57, 65, 90, 
	97, 122, 95, 116, 48, 57, 65, 90, 
	97, 122, 95, 108, 48, 57, 65, 90, 
	97, 122, 95, 101, 48, 57, 65, 90, 
	97, 122, 95, 101, 48, 57, 65, 90, 
	97, 122, 95, 110, 48, 57, 65, 90, 
	97, 122, 95, 100, 48, 57, 65, 90, 
	97, 122, 95, 105, 48, 57, 65, 90, 
	97, 122, 95, 97, 48, 57, 65, 90, 
	98, 122, 95, 110, 48, 57, 65, 90, 
	97, 122, 95, 110, 48, 57, 65, 90, 
	97, 122, 95, 103, 48, 57, 65, 90, 
	97, 122, 95, 97, 101, 111, 117, 48, 
	57, 65, 90, 98, 122, 95, 109, 48, 
	57, 65, 90, 97, 122, 95, 101, 48, 
	57, 65, 90, 97, 122, 95, 115, 48, 
	57, 65, 90, 97, 122, 95, 112, 48, 
	57, 65, 90, 97, 122, 95, 97, 48, 
	57, 65, 90, 98, 122, 95, 99, 48, 
	57, 65, 90, 97, 122, 95, 101, 48, 
	57, 65, 90, 97, 122, 95, 119, 48, 
	57, 65, 90, 97, 122, 95, 110, 48, 
	57, 65, 90, 97, 122, 95, 117, 48, 
	57, 65, 90, 97, 122, 95, 108, 48, 
	57, 65, 90, 97, 122, 95, 108, 48, 
	57, 65, 90, 97, 122, 95, 108, 48, 
	57, 65, 90, 97, 122, 95, 108, 48, 
	57, 65, 90, 97, 122, 95, 97, 114, 
	117, 48, 57, 65, 90, 98, 122, 95, 
	99, 48, 57, 65, 90, 97, 122, 95, 
	107, 48, 57, 65, 90, 97, 122, 95, 
	105, 111, 48, 57, 65, 90, 97, 122, 
	95, 118, 48, 57, 65, 90, 97, 122, 
	95, 97, 48, 57, 65, 90, 98, 122, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	95, 112, 48, 57, 65, 90, 97, 122, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	95, 114, 48, 57, 65, 90, 97, 122, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	95, 121, 48, 57, 65, 90, 97, 122, 
	95, 98, 48, 57, 65, 90, 97, 122, 
	95, 108, 48, 57, 65, 90, 97, 122, 
	95, 105, 48, 57, 65, 90, 97, 122, 
	95, 99, 48, 57, 65, 90, 97, 122, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	95, 117, 48, 57, 65, 90, 97, 122, 
	95, 114, 48, 57, 65, 90, 97, 122, 
	95, 110, 48, 57, 65, 90, 97, 122, 
	95, 97, 101, 104, 105, 116, 119, 48, 
	57, 65, 90, 98, 122, 95, 102, 48, 
	57, 65, 90, 97, 122, 95, 101, 48, 
	57, 65, 90, 97, 122, 95, 116, 48, 
	57, 65, 90, 97, 122, 95, 111, 48, 
	57, 65, 90, 97, 122, 95, 114, 48, 
	57, 65, 90, 97, 122, 95, 116, 48, 
	57, 65, 90, 97, 122, 95, 103, 122, 
	48, 57, 65, 90, 97, 121, 95, 110, 
	48, 57, 65, 90, 97, 122, 95, 101, 
	48, 57, 65, 90, 97, 122, 95, 100, 
	48, 57, 65, 90, 97, 122, 95, 101, 
	48, 57, 65, 90, 97, 122, 95, 111, 
	48, 57, 65, 90, 97, 122, 95, 102, 
	48, 57, 65, 90, 97, 122, 95, 97, 
	114, 48, 57, 65, 90, 98, 122, 95, 
	99, 116, 48, 57, 65, 90, 97, 122, 
	95, 107, 48, 57, 65, 90, 97, 122, 
	95, 105, 48, 57, 65, 90, 97, 122, 
	95, 99, 48, 57, 65, 90, 97, 122, 
	95, 111, 117, 48, 57, 65, 90, 97, 
	122, 95, 110, 48, 57, 65, 90, 97, 
	122, 95, 103, 48, 57, 65, 90, 97, 
	122, 95, 99, 48, 57, 65, 90, 97, 
	122, 95, 116, 48, 57, 65, 90, 97, 
	122, 95, 105, 48, 57, 65, 90, 97, 
	122, 95, 116, 48, 57, 65, 90, 97, 
	122, 95, 99, 48, 57, 65, 90, 97, 
	122, 95, 104, 48, 57, 65, 90, 97, 
	122, 95, 114, 121, 48, 57, 65, 90, 
	97, 122, 95, 117, 48, 57, 65, 90, 
	97, 122, 95, 101, 48, 57, 65, 90, 
	97, 122, 95, 112, 48, 57, 65, 90, 
	97, 122, 95, 101, 48, 57, 65, 90, 
	97, 122, 95, 100, 111, 48, 57, 65, 
	90, 97, 122, 95, 101, 48, 57, 65, 
	90, 97, 122, 95, 102, 48, 57, 65, 
	90, 97, 122, 95, 102, 48, 57, 65, 
	90, 97, 122, 95, 110, 115, 48, 57, 
	65, 90, 97, 122, 95, 105, 115, 48, 
	57, 65, 90, 97, 122, 95, 111, 48, 
	57, 65, 90, 97, 122, 95, 110, 48, 
	57, 65, 90, 97, 122, 95, 97, 105, 
	48, 57, 65, 90, 98, 122, 95, 102, 
	48, 57, 65, 90, 97, 122, 95, 101, 
	48, 57, 65, 90, 97, 122, 95, 103, 
	48, 57, 65, 90, 97, 122, 95, 110, 
	48, 57, 65, 90, 97, 122, 95, 101, 
	48, 57, 65, 90, 97, 122, 95, 100, 
	48, 57, 65, 90, 97, 122, 95, 105, 
	48, 57, 65, 90, 97, 122, 95, 110, 
	48, 57, 65, 90, 97, 122, 95, 103, 
	48, 57, 65, 90, 97, 122, 95, 97, 
	111, 48, 57, 65, 90, 98, 122, 95, 
	114, 48, 57, 65, 90, 97, 122, 95, 
	105, 48, 57, 65, 90, 97, 122, 95, 
	97, 48, 57, 65, 90, 98, 122, 95, 
	110, 48, 57, 65, 90, 97, 122, 95, 
	116, 48, 57, 65, 90, 97, 122, 95, 
	105, 108, 48, 57, 65, 90, 97, 122, 
	95, 100, 48, 57, 65, 90, 97, 122, 
	95, 97, 48, 57, 65, 90, 98, 122, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	95, 105, 48, 57, 65, 90, 97, 122, 
	95, 108, 48, 57, 65, 90, 97, 122, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	95, 99, 101, 104, 48, 57, 65, 90, 
	97, 122, 95, 104, 48, 57, 65, 90, 
	97, 122, 95, 97, 48, 57, 65, 90, 
	98, 122, 95, 114, 48, 57, 65, 90, 
	97, 122, 95, 48, 57, 65, 90, 97, 
	122, 95, 116, 48, 57, 65, 90, 97, 
	122, 95, 97, 48, 57, 65, 90, 98, 
	122, 95, 107, 48, 57, 65, 90, 97, 
	122, 95, 105, 48, 57, 65, 90, 97, 
	122, 95, 108, 48, 57, 65, 90, 97, 
	122, 95, 101, 48, 57, 65, 90, 97, 
	122, 61, 124, 0
};

static const char _axl_jnc_single_lengths[] = {
	3, 3, 1, 2, 3, 0, 40, 3, 
	1, 3, 1, 1, 2, 3, 1, 1, 
	2, 3, 1, 3, 1, 2, 0, 0, 
	1, 2, 1, 1, 2, 1, 1, 1, 
	2, 2, 2, 4, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 5, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 4, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 3, 2, 
	2, 2, 2, 2, 4, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 6, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 5, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	4, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 7, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 3, 3, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 3, 
	2, 2, 2, 3, 3, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 4, 2, 
	2, 2, 1, 2, 2, 2, 2, 2, 
	2, 2
};

static const char _axl_jnc_range_lengths[] = {
	0, 0, 0, 0, 0, 3, 3, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 3, 
	0, 0, 0, 0, 0, 0, 3, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 0
};

static const short _axl_jnc_index_offsets[] = {
	0, 4, 8, 10, 13, 17, 21, 65, 
	69, 71, 75, 77, 79, 82, 86, 88, 
	90, 93, 97, 99, 103, 105, 109, 111, 
	115, 117, 120, 122, 124, 127, 129, 134, 
	136, 142, 148, 154, 162, 169, 175, 181, 
	187, 193, 199, 205, 211, 217, 223, 229, 
	235, 241, 247, 253, 259, 265, 274, 280, 
	286, 292, 298, 304, 310, 316, 322, 329, 
	335, 341, 347, 353, 359, 367, 373, 379, 
	385, 391, 397, 403, 409, 415, 421, 427, 
	433, 440, 446, 452, 458, 464, 470, 476, 
	482, 488, 494, 500, 507, 513, 519, 526, 
	532, 538, 544, 550, 556, 564, 570, 576, 
	582, 588, 594, 600, 606, 612, 618, 624, 
	630, 636, 643, 649, 659, 665, 671, 677, 
	683, 689, 695, 701, 707, 714, 720, 726, 
	732, 738, 744, 750, 756, 762, 768, 774, 
	780, 786, 795, 801, 807, 813, 819, 825, 
	831, 837, 843, 849, 855, 861, 867, 873, 
	879, 887, 893, 899, 906, 912, 918, 924, 
	930, 936, 942, 948, 954, 960, 966, 972, 
	978, 984, 990, 996, 1002, 1008, 1014, 1025, 
	1031, 1037, 1043, 1049, 1055, 1061, 1068, 1074, 
	1080, 1086, 1092, 1098, 1104, 1111, 1118, 1124, 
	1130, 1136, 1143, 1149, 1155, 1161, 1167, 1173, 
	1179, 1185, 1191, 1198, 1204, 1210, 1216, 1222, 
	1229, 1235, 1241, 1247, 1254, 1261, 1267, 1273, 
	1280, 1286, 1292, 1298, 1304, 1310, 1316, 1322, 
	1328, 1334, 1341, 1347, 1353, 1359, 1365, 1371, 
	1378, 1384, 1390, 1396, 1402, 1408, 1414, 1422, 
	1428, 1434, 1440, 1445, 1451, 1457, 1463, 1469, 
	1475, 1481
};

static const short _axl_jnc_indicies[] = {
	2, 3, 4, 1, 6, 7, 8, 5, 
	10, 9, 12, 13, 11, 12, 13, 14, 
	11, 16, 16, 16, 15, 18, 19, 18, 
	18, 20, 21, 22, 23, 24, 25, 26, 
	27, 28, 29, 30, 32, 33, 34, 35, 
	37, 36, 38, 39, 40, 41, 42, 43, 
	44, 45, 46, 47, 48, 49, 50, 51, 
	52, 53, 54, 55, 56, 31, 36, 36, 
	17, 18, 18, 18, 57, 59, 58, 2, 
	3, 4, 1, 60, 1, 61, 58, 62, 
	63, 58, 6, 7, 8, 5, 64, 5, 
	65, 58, 66, 67, 58, 68, 69, 70, 
	58, 71, 58, 11, 72, 73, 58, 74, 
	72, 76, 76, 31, 75, 31, 75, 16, 
	16, 16, 77, 78, 58, 79, 80, 58, 
	82, 81, 83, 58, 84, 85, 58, 87, 
	86, 36, 36, 36, 36, 0, 88, 58, 
	36, 90, 36, 36, 36, 89, 36, 91, 
	36, 36, 36, 89, 36, 92, 36, 36, 
	36, 89, 36, 93, 94, 95, 36, 36, 
	36, 89, 36, 96, 97, 36, 36, 36, 
	89, 36, 98, 36, 36, 36, 89, 36, 
	99, 36, 36, 36, 89, 36, 100, 36, 
	36, 36, 89, 36, 101, 36, 36, 36, 
	89, 36, 102, 36, 36, 36, 89, 36, 
	103, 36, 36, 36, 89, 36, 104, 36, 
	36, 36, 89, 36, 105, 36, 36, 36, 
	89, 36, 106, 36, 36, 36, 89, 36, 
	107, 36, 36, 36, 89, 36, 108, 36, 
	36, 36, 89, 36, 109, 36, 36, 36, 
	89, 36, 110, 36, 36, 36, 89, 36, 
	111, 36, 36, 36, 89, 36, 112, 36, 
	36, 36, 89, 36, 113, 36, 36, 36, 
	89, 36, 114, 115, 116, 117, 36, 36, 
	36, 89, 36, 118, 36, 36, 36, 89, 
	36, 119, 36, 36, 36, 89, 36, 120, 
	36, 36, 36, 89, 36, 121, 36, 36, 
	36, 89, 36, 122, 36, 36, 36, 89, 
	36, 123, 36, 36, 36, 89, 36, 124, 
	36, 36, 36, 89, 36, 125, 36, 36, 
	36, 89, 36, 126, 127, 36, 36, 36, 
	89, 36, 128, 36, 36, 36, 89, 36, 
	129, 36, 36, 36, 89, 36, 130, 36, 
	36, 36, 89, 36, 131, 36, 36, 36, 
	89, 36, 132, 36, 36, 36, 89, 36, 
	133, 134, 135, 36, 36, 36, 89, 36, 
	136, 36, 36, 36, 89, 36, 137, 36, 
	36, 36, 89, 36, 138, 36, 36, 36, 
	89, 36, 139, 36, 36, 36, 89, 36, 
	140, 36, 36, 36, 89, 36, 142, 36, 
	36, 36, 141, 36, 143, 36, 36, 36, 
	89, 36, 144, 36, 36, 36, 89, 36, 
	145, 36, 36, 36, 89, 36, 146, 36, 
	36, 36, 89, 36, 147, 36, 36, 36, 
	89, 36, 148, 149, 36, 36, 36, 89, 
	36, 150, 36, 36, 36, 89, 36, 151, 
	36, 36, 36, 89, 36, 152, 36, 36, 
	36, 89, 36, 153, 36, 36, 36, 89, 
	36, 154, 36, 36, 36, 89, 36, 155, 
	36, 36, 36, 89, 36, 156, 36, 36, 
	36, 89, 36, 157, 36, 36, 36, 89, 
	36, 158, 36, 36, 36, 89, 36, 159, 
	36, 36, 36, 89, 36, 160, 161, 36, 
	36, 36, 89, 36, 162, 36, 36, 36, 
	89, 36, 163, 36, 36, 36, 89, 36, 
	164, 165, 36, 36, 36, 89, 36, 166, 
	36, 36, 36, 89, 36, 167, 36, 36, 
	36, 89, 36, 168, 36, 36, 36, 89, 
	36, 169, 36, 36, 36, 89, 36, 171, 
	36, 36, 36, 170, 36, 172, 173, 174, 
	36, 36, 36, 89, 36, 175, 36, 36, 
	36, 89, 36, 176, 36, 36, 36, 89, 
	36, 177, 36, 36, 36, 89, 36, 178, 
	36, 36, 36, 89, 36, 179, 36, 36, 
	36, 89, 36, 180, 36, 36, 36, 89, 
	36, 181, 36, 36, 36, 89, 36, 182, 
	36, 36, 36, 89, 36, 183, 36, 36, 
	36, 89, 36, 184, 36, 36, 36, 89, 
	36, 185, 36, 36, 36, 89, 36, 186, 
	36, 36, 36, 89, 36, 187, 188, 36, 
	36, 36, 89, 36, 189, 36, 36, 36, 
	89, 191, 192, 193, 194, 36, 195, 36, 
	36, 36, 190, 196, 36, 36, 36, 36, 
	89, 197, 36, 36, 36, 36, 89, 198, 
	36, 36, 36, 36, 89, 36, 199, 36, 
	36, 36, 89, 36, 200, 36, 36, 36, 
	89, 36, 201, 36, 36, 36, 89, 36, 
	202, 36, 36, 36, 89, 36, 203, 36, 
	36, 36, 89, 36, 204, 205, 36, 36, 
	36, 89, 36, 206, 36, 36, 36, 89, 
	36, 207, 36, 36, 36, 89, 36, 208, 
	36, 36, 36, 89, 36, 209, 36, 36, 
	36, 89, 36, 210, 36, 36, 36, 89, 
	36, 211, 36, 36, 36, 89, 36, 212, 
	36, 36, 36, 89, 36, 213, 36, 36, 
	36, 89, 36, 214, 36, 36, 36, 89, 
	36, 215, 36, 36, 36, 89, 36, 216, 
	36, 36, 36, 89, 36, 217, 36, 36, 
	36, 89, 36, 218, 219, 220, 221, 36, 
	36, 36, 89, 36, 222, 36, 36, 36, 
	89, 36, 223, 36, 36, 36, 89, 36, 
	224, 36, 36, 36, 89, 36, 225, 36, 
	36, 36, 89, 36, 226, 36, 36, 36, 
	89, 36, 227, 36, 36, 36, 89, 36, 
	228, 36, 36, 36, 89, 36, 229, 36, 
	36, 36, 89, 36, 230, 36, 36, 36, 
	89, 36, 231, 36, 36, 36, 89, 36, 
	232, 36, 36, 36, 89, 36, 233, 36, 
	36, 36, 89, 36, 234, 36, 36, 36, 
	89, 36, 235, 36, 36, 36, 89, 36, 
	236, 237, 238, 36, 36, 36, 89, 36, 
	239, 36, 36, 36, 89, 36, 240, 36, 
	36, 36, 89, 36, 241, 242, 36, 36, 
	36, 89, 36, 243, 36, 36, 36, 89, 
	36, 244, 36, 36, 36, 89, 36, 245, 
	36, 36, 36, 89, 36, 246, 36, 36, 
	36, 89, 36, 247, 36, 36, 36, 89, 
	36, 248, 36, 36, 36, 89, 36, 249, 
	36, 36, 36, 89, 36, 250, 36, 36, 
	36, 89, 36, 251, 36, 36, 36, 89, 
	36, 252, 36, 36, 36, 89, 36, 253, 
	36, 36, 36, 89, 36, 254, 36, 36, 
	36, 89, 36, 255, 36, 36, 36, 89, 
	36, 256, 36, 36, 36, 89, 36, 257, 
	36, 36, 36, 89, 36, 258, 36, 36, 
	36, 89, 36, 259, 36, 36, 36, 89, 
	36, 260, 36, 36, 36, 89, 36, 261, 
	262, 263, 264, 265, 266, 36, 36, 36, 
	89, 36, 267, 36, 36, 36, 89, 36, 
	268, 36, 36, 36, 89, 36, 269, 36, 
	36, 36, 89, 36, 270, 36, 36, 36, 
	89, 36, 271, 36, 36, 36, 89, 36, 
	272, 36, 36, 36, 89, 36, 273, 274, 
	36, 36, 36, 89, 36, 275, 36, 36, 
	36, 89, 36, 276, 36, 36, 36, 89, 
	36, 277, 36, 36, 36, 89, 36, 278, 
	36, 36, 36, 89, 36, 279, 36, 36, 
	36, 89, 36, 280, 36, 36, 36, 89, 
	36, 281, 282, 36, 36, 36, 89, 36, 
	283, 284, 36, 36, 36, 89, 36, 285, 
	36, 36, 36, 89, 36, 286, 36, 36, 
	36, 89, 36, 287, 36, 36, 36, 89, 
	36, 288, 289, 36, 36, 36, 89, 36, 
	290, 36, 36, 36, 89, 36, 291, 36, 
	36, 36, 89, 36, 292, 36, 36, 36, 
	89, 36, 293, 36, 36, 36, 89, 36, 
	294, 36, 36, 36, 89, 36, 295, 36, 
	36, 36, 89, 36, 296, 36, 36, 36, 
	89, 36, 297, 36, 36, 36, 89, 36, 
	298, 299, 36, 36, 36, 89, 36, 300, 
	36, 36, 36, 89, 36, 301, 36, 36, 
	36, 89, 36, 302, 36, 36, 36, 89, 
	36, 303, 36, 36, 36, 89, 36, 304, 
	305, 36, 36, 36, 89, 36, 306, 36, 
	36, 36, 89, 36, 307, 36, 36, 36, 
	89, 36, 308, 36, 36, 36, 89, 36, 
	309, 310, 36, 36, 36, 89, 36, 311, 
	312, 36, 36, 36, 89, 36, 313, 36, 
	36, 36, 89, 36, 314, 36, 36, 36, 
	89, 36, 315, 316, 36, 36, 36, 89, 
	36, 317, 36, 36, 36, 89, 36, 318, 
	36, 36, 36, 89, 36, 319, 36, 36, 
	36, 89, 36, 320, 36, 36, 36, 89, 
	36, 321, 36, 36, 36, 89, 36, 322, 
	36, 36, 36, 89, 36, 323, 36, 36, 
	36, 89, 36, 324, 36, 36, 36, 89, 
	36, 325, 36, 36, 36, 89, 36, 326, 
	327, 36, 36, 36, 89, 36, 328, 36, 
	36, 36, 89, 36, 329, 36, 36, 36, 
	89, 36, 330, 36, 36, 36, 89, 36, 
	331, 36, 36, 36, 89, 36, 332, 36, 
	36, 36, 89, 36, 333, 334, 36, 36, 
	36, 89, 36, 335, 36, 36, 36, 89, 
	36, 336, 36, 36, 36, 89, 36, 337, 
	36, 36, 36, 89, 36, 338, 36, 36, 
	36, 89, 36, 339, 36, 36, 36, 89, 
	36, 340, 36, 36, 36, 89, 36, 341, 
	342, 343, 36, 36, 36, 89, 36, 344, 
	36, 36, 36, 89, 36, 345, 36, 36, 
	36, 89, 36, 346, 36, 36, 36, 89, 
	347, 36, 36, 36, 89, 36, 348, 36, 
	36, 36, 89, 36, 349, 36, 36, 36, 
	89, 36, 350, 36, 36, 36, 89, 36, 
	351, 36, 36, 36, 89, 36, 352, 36, 
	36, 36, 89, 36, 353, 36, 36, 36, 
	89, 354, 355, 58, 0
};

static const unsigned char _axl_jnc_trans_targs[] = {
	6, 0, 6, 6, 10, 1, 6, 6, 
	14, 6, 6, 3, 3, 4, 6, 6, 
	23, 6, 7, 6, 8, 9, 11, 12, 
	13, 15, 16, 17, 18, 19, 21, 22, 
	24, 25, 27, 28, 30, 31, 32, 35, 
	53, 68, 91, 100, 108, 110, 113, 124, 
	137, 152, 169, 174, 202, 211, 225, 238, 
	249, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 2, 
	20, 6, 6, 6, 5, 6, 6, 26, 
	6, 6, 6, 6, 6, 29, 6, 6, 
	6, 6, 33, 34, 30, 36, 48, 50, 
	37, 43, 38, 39, 40, 41, 42, 30, 
	44, 45, 46, 47, 30, 49, 30, 51, 
	52, 30, 54, 56, 58, 61, 55, 30, 
	57, 30, 59, 60, 30, 62, 63, 64, 
	30, 65, 66, 67, 30, 69, 74, 78, 
	70, 71, 72, 73, 30, 6, 75, 76, 
	77, 30, 79, 80, 81, 86, 82, 83, 
	84, 85, 30, 87, 88, 89, 90, 30, 
	92, 94, 93, 30, 95, 98, 96, 97, 
	30, 99, 6, 30, 101, 104, 107, 102, 
	103, 30, 105, 106, 30, 30, 109, 30, 
	111, 112, 30, 30, 114, 115, 6, 116, 
	117, 118, 30, 119, 30, 30, 30, 120, 
	121, 122, 123, 30, 125, 135, 126, 127, 
	128, 129, 130, 131, 132, 133, 134, 30, 
	136, 30, 138, 145, 146, 150, 139, 140, 
	141, 142, 143, 144, 30, 30, 147, 148, 
	149, 30, 151, 30, 153, 155, 165, 154, 
	30, 156, 160, 157, 158, 159, 30, 161, 
	162, 163, 164, 30, 166, 167, 168, 30, 
	170, 171, 172, 173, 30, 175, 177, 178, 
	181, 188, 198, 176, 30, 30, 179, 180, 
	30, 182, 185, 183, 184, 30, 186, 187, 
	30, 189, 193, 190, 191, 30, 192, 30, 
	194, 196, 195, 30, 197, 30, 199, 200, 
	201, 30, 203, 205, 204, 30, 206, 207, 
	208, 210, 209, 30, 30, 212, 222, 213, 
	215, 214, 30, 216, 218, 217, 30, 219, 
	220, 221, 30, 223, 224, 30, 226, 231, 
	227, 228, 229, 230, 30, 232, 233, 30, 
	234, 235, 236, 237, 30, 239, 244, 246, 
	240, 241, 242, 243, 30, 245, 30, 247, 
	248, 30, 6, 6
};

static const short _axl_jnc_trans_actions[] = {
	89, 0, 94, 53, 292, 0, 91, 51, 
	289, 87, 49, 0, 1, 0, 55, 85, 
	0, 57, 0, 97, 0, 295, 0, 0, 
	295, 0, 0, 0, 7, 7, 7, 0, 
	0, 0, 0, 0, 286, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 81, 83, 11, 73, 31, 19, 41, 
	71, 27, 21, 33, 23, 35, 25, 0, 
	0, 29, 79, 75, 0, 77, 47, 0, 
	13, 65, 37, 9, 15, 0, 67, 39, 
	43, 69, 0, 0, 160, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 139, 
	0, 0, 0, 0, 157, 0, 169, 0, 
	0, 259, 0, 0, 0, 0, 0, 271, 
	0, 190, 0, 0, 211, 0, 0, 0, 
	124, 0, 0, 0, 262, 0, 0, 0, 
	0, 0, 0, 0, 274, 63, 0, 0, 
	0, 187, 0, 0, 0, 0, 0, 0, 
	0, 0, 241, 0, 0, 0, 0, 244, 
	0, 0, 0, 250, 0, 0, 0, 0, 
	109, 0, 61, 202, 0, 0, 0, 0, 
	0, 280, 0, 0, 184, 253, 0, 220, 
	0, 0, 232, 247, 0, 0, 59, 0, 
	0, 0, 172, 0, 175, 178, 181, 0, 
	0, 0, 0, 214, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 136, 
	0, 196, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 100, 226, 0, 0, 
	0, 148, 0, 283, 0, 0, 0, 0, 
	106, 0, 0, 0, 0, 0, 121, 0, 
	0, 0, 0, 217, 0, 0, 0, 118, 
	0, 0, 0, 0, 265, 0, 0, 0, 
	0, 0, 0, 0, 142, 223, 0, 0, 
	193, 0, 0, 0, 0, 130, 0, 0, 
	235, 0, 0, 0, 0, 229, 0, 115, 
	0, 0, 0, 151, 0, 205, 0, 0, 
	0, 268, 0, 0, 0, 277, 0, 0, 
	0, 0, 0, 112, 238, 0, 0, 0, 
	0, 0, 208, 0, 0, 0, 145, 0, 
	0, 0, 133, 0, 0, 103, 0, 0, 
	0, 0, 0, 0, 166, 0, 0, 163, 
	0, 0, 0, 0, 127, 0, 0, 0, 
	0, 0, 0, 0, 199, 0, 154, 0, 
	0, 256, 45, 17
};

static const short _axl_jnc_to_state_actions[] = {
	0, 0, 0, 0, 0, 0, 3, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0
};

static const short _axl_jnc_from_state_actions[] = {
	0, 0, 0, 0, 0, 0, 5, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0
};

static const short _axl_jnc_eof_trans[] = {
	1, 1, 10, 10, 10, 16, 0, 58, 
	59, 59, 61, 59, 59, 59, 65, 59, 
	59, 59, 59, 59, 75, 76, 76, 78, 
	59, 59, 82, 59, 59, 87, 1, 59, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 142, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 171, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 191, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 59
};

static const int axl_jnc_start = 6;
static const int axl_jnc_first_final = 6;
static const int axl_jnc_error = -1;

static const int axl_jnc_en_main = 6;


/* #line 175 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */


//.............................................................................

void 
CLexer::Init ()
{
	
/* #line 820 "axl_jnc_Lexer.cpp" */
	{
	cs = axl_jnc_start;
	ts = 0;
	te = 0;
	act = 0;
	}

/* #line 183 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
}

bool
CLexer::Exec ()
{
	
/* #line 826 "axl_jnc_Lexer.cpp" */
	{
	int _klen;
	unsigned int _trans;
	const char *_acts;
	unsigned int _nacts;
	const char *_keys;

	if ( p == pe )
		goto _test_eof;
_resume:
	_acts = _axl_jnc_actions + _axl_jnc_from_state_actions[cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 2:
/* #line 1 "NONE" */
	{ts = p;}
	break;
/* #line 843 "axl_jnc_Lexer.cpp" */
		}
	}

	_keys = _axl_jnc_trans_keys + _axl_jnc_key_offsets[cs];
	_trans = _axl_jnc_index_offsets[cs];

	_klen = _axl_jnc_single_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( (*p) < *_mid )
				_upper = _mid - 1;
			else if ( (*p) > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (unsigned int)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _axl_jnc_range_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( (*p) < _mid[0] )
				_upper = _mid - 2;
			else if ( (*p) > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += (unsigned int)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	_trans = _axl_jnc_indicies[_trans];
_eof_trans:
	cs = _axl_jnc_trans_targs[_trans];

	if ( _axl_jnc_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _axl_jnc_actions + _axl_jnc_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 0:
/* #line 44 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{ NewLine (p + 1); }
	break;
	case 3:
/* #line 1 "NONE" */
	{te = p+1;}
	break;
	case 4:
/* #line 58 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 1;}
	break;
	case 5:
/* #line 59 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 2;}
	break;
	case 6:
/* #line 60 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 3;}
	break;
	case 7:
/* #line 61 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 4;}
	break;
	case 8:
/* #line 63 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 5;}
	break;
	case 9:
/* #line 64 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 6;}
	break;
	case 10:
/* #line 66 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 7;}
	break;
	case 11:
/* #line 67 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 8;}
	break;
	case 12:
/* #line 69 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 9;}
	break;
	case 13:
/* #line 70 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 10;}
	break;
	case 14:
/* #line 71 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 11;}
	break;
	case 15:
/* #line 72 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 12;}
	break;
	case 16:
/* #line 73 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 13;}
	break;
	case 17:
/* #line 74 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 14;}
	break;
	case 18:
/* #line 75 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 15;}
	break;
	case 19:
/* #line 76 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 16;}
	break;
	case 20:
/* #line 77 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 17;}
	break;
	case 21:
/* #line 78 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 18;}
	break;
	case 22:
/* #line 79 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 19;}
	break;
	case 23:
/* #line 80 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 20;}
	break;
	case 24:
/* #line 82 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 21;}
	break;
	case 25:
/* #line 83 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 22;}
	break;
	case 26:
/* #line 84 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 23;}
	break;
	case 27:
/* #line 85 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 24;}
	break;
	case 28:
/* #line 86 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 25;}
	break;
	case 29:
/* #line 87 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 26;}
	break;
	case 30:
/* #line 88 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 27;}
	break;
	case 31:
/* #line 89 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 28;}
	break;
	case 32:
/* #line 90 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 29;}
	break;
	case 33:
/* #line 91 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 30;}
	break;
	case 34:
/* #line 93 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 32;}
	break;
	case 35:
/* #line 94 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 33;}
	break;
	case 36:
/* #line 95 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 34;}
	break;
	case 37:
/* #line 96 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 35;}
	break;
	case 38:
/* #line 99 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 37;}
	break;
	case 39:
/* #line 100 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 38;}
	break;
	case 40:
/* #line 101 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 39;}
	break;
	case 41:
/* #line 102 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 40;}
	break;
	case 42:
/* #line 103 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 41;}
	break;
	case 43:
/* #line 104 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 42;}
	break;
	case 44:
/* #line 105 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 43;}
	break;
	case 45:
/* #line 106 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 44;}
	break;
	case 46:
/* #line 108 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 45;}
	break;
	case 47:
/* #line 109 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 46;}
	break;
	case 48:
/* #line 110 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 47;}
	break;
	case 49:
/* #line 111 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 48;}
	break;
	case 50:
/* #line 112 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 49;}
	break;
	case 51:
/* #line 113 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 50;}
	break;
	case 52:
/* #line 114 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 51;}
	break;
	case 53:
/* #line 116 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 52;}
	break;
	case 54:
/* #line 117 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 53;}
	break;
	case 55:
/* #line 118 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 54;}
	break;
	case 56:
/* #line 119 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 55;}
	break;
	case 57:
/* #line 121 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 57;}
	break;
	case 58:
/* #line 122 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 58;}
	break;
	case 59:
/* #line 123 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 59;}
	break;
	case 60:
/* #line 124 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 60;}
	break;
	case 61:
/* #line 125 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 61;}
	break;
	case 62:
/* #line 126 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 62;}
	break;
	case 63:
/* #line 128 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 63;}
	break;
	case 64:
/* #line 129 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 64;}
	break;
	case 65:
/* #line 130 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 65;}
	break;
	case 66:
/* #line 160 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 89;}
	break;
	case 67:
/* #line 161 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 90;}
	break;
	case 68:
/* #line 162 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 91;}
	break;
	case 69:
/* #line 171 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 97;}
	break;
	case 70:
/* #line 134 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Eq); }}
	break;
	case 71:
/* #line 135 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Ne); }}
	break;
	case 72:
/* #line 136 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Le); }}
	break;
	case 73:
/* #line 137 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Ge); }}
	break;
	case 74:
/* #line 138 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_LogicalOr); }}
	break;
	case 75:
/* #line 139 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_LogicalAnd); }}
	break;
	case 76:
/* #line 142 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Inc); }}
	break;
	case 77:
/* #line 143 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Dec); }}
	break;
	case 78:
/* #line 144 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Ptr); }}
	break;
	case 79:
/* #line 145 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_MulAssign); }}
	break;
	case 80:
/* #line 146 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_DivAssign); }}
	break;
	case 81:
/* #line 147 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_ModAssign); }}
	break;
	case 82:
/* #line 148 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_AddAssign); }}
	break;
	case 83:
/* #line 149 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_SubAssign); }}
	break;
	case 84:
/* #line 150 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_ShlAssign); }}
	break;
	case 85:
/* #line 151 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_ShrAssign); }}
	break;
	case 86:
/* #line 152 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_AndAssign); }}
	break;
	case 87:
/* #line 153 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_XorAssign); }}
	break;
	case 88:
/* #line 154 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_OrAssign); }}
	break;
	case 89:
/* #line 155 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_RefAssign); }}
	break;
	case 90:
/* #line 156 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Ellipsis); }}
	break;
	case 91:
/* #line 161 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateCharToken (EToken_Integer); }}
	break;
	case 92:
/* #line 162 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateStringToken (EToken_Literal, 1, 1); }}
	break;
	case 93:
/* #line 167 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;}
	break;
	case 94:
/* #line 169 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;}
	break;
	case 95:
/* #line 171 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (ts [0]); }}
	break;
	case 96:
/* #line 92 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateToken (EToken_Int); }}
	break;
	case 97:
/* #line 98 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateToken (EToken_Enum); }}
	break;
	case 98:
/* #line 120 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateToken (EToken_Do); }}
	break;
	case 99:
/* #line 140 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateToken (EToken_Shl); }}
	break;
	case 100:
/* #line 141 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateToken (EToken_Shr); }}
	break;
	case 101:
/* #line 160 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateStringToken (EToken_Identifier); }}
	break;
	case 102:
/* #line 161 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateCharToken (EToken_Integer); }}
	break;
	case 103:
/* #line 162 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateStringToken (EToken_Literal, 1, 1); }}
	break;
	case 104:
/* #line 163 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateIntegerToken (10); }}
	break;
	case 105:
/* #line 164 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateIntegerToken (16, 2); }}
	break;
	case 106:
/* #line 166 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;}
	break;
	case 107:
/* #line 169 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;}
	break;
	case 108:
/* #line 171 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateToken (ts [0]); }}
	break;
	case 109:
/* #line 163 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{{p = ((te))-1;}{ CreateIntegerToken (10); }}
	break;
	case 110:
/* #line 171 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{{p = ((te))-1;}{ CreateToken (ts [0]); }}
	break;
	case 111:
/* #line 1 "NONE" */
	{	switch( act ) {
	case 1:
	{{p = ((te))-1;} CreateToken (EToken_Namespace); }
	break;
	case 2:
	{{p = ((te))-1;} CreateToken (EToken_Using); }
	break;
	case 3:
	{{p = ((te))-1;} CreateToken (EToken_Pack); }
	break;
	case 4:
	{{p = ((te))-1;} CreateToken (EToken_Endian); }
	break;
	case 5:
	{{p = ((te))-1;} CreateToken (EToken_Typedef); }
	break;
	case 6:
	{{p = ((te))-1;} CreateToken (EToken_Static); }
	break;
	case 7:
	{{p = ((te))-1;} CreateToken (EToken_Public); }
	break;
	case 8:
	{{p = ((te))-1;} CreateToken (EToken_Private); }
	break;
	case 9:
	{{p = ((te))-1;} CreateToken (EToken_Const); }
	break;
	case 10:
	{{p = ((te))-1;} CreateToken (EToken_Volatile); }
	break;
	case 11:
	{{p = ((te))-1;} CreateToken (EToken_Signed); }
	break;
	case 12:
	{{p = ((te))-1;} CreateToken (EToken_Unsigned); }
	break;
	case 13:
	{{p = ((te))-1;} CreateToken (EToken_LittleEndian); }
	break;
	case 14:
	{{p = ((te))-1;} CreateToken (EToken_BigEndian); }
	break;
	case 15:
	{{p = ((te))-1;} CreateToken (EToken_Safe); }
	break;
	case 16:
	{{p = ((te))-1;} CreateToken (EToken_Unsafe); }
	break;
	case 17:
	{{p = ((te))-1;} CreateToken (EToken_NoNull); }
	break;
	case 18:
	{{p = ((te))-1;} CreateToken (EToken_Strong); }
	break;
	case 19:
	{{p = ((te))-1;} CreateToken (EToken_Weak); }
	break;
	case 20:
	{{p = ((te))-1;} CreateToken (EToken_Bindable); }
	break;
	case 21:
	{{p = ((te))-1;} CreateToken (EToken_Auto); }
	break;
	case 22:
	{{p = ((te))-1;} CreateToken (EToken_Void); }
	break;
	case 23:
	{{p = ((te))-1;} CreateToken (EToken_Variant); }
	break;
	case 24:
	{{p = ((te))-1;} CreateToken (EToken_Bool); }
	break;
	case 25:
	{{p = ((te))-1;} CreateToken (EToken_Int8); }
	break;
	case 26:
	{{p = ((te))-1;} CreateToken (EToken_Int16); }
	break;
	case 27:
	{{p = ((te))-1;} CreateToken (EToken_Int32); }
	break;
	case 28:
	{{p = ((te))-1;} CreateToken (EToken_Int64); }
	break;
	case 29:
	{{p = ((te))-1;} CreateToken (EToken_Float); }
	break;
	case 30:
	{{p = ((te))-1;} CreateToken (EToken_Double); }
	break;
	case 32:
	{{p = ((te))-1;} CreateToken (EToken_Char); }
	break;
	case 33:
	{{p = ((te))-1;} CreateToken (EToken_Short); }
	break;
	case 34:
	{{p = ((te))-1;} CreateToken (EToken_Long); }
	break;
	case 35:
	{{p = ((te))-1;} CreateToken (EToken_WChar); }
	break;
	case 37:
	{{p = ((te))-1;} CreateToken (EToken_EnumC); }
	break;
	case 38:
	{{p = ((te))-1;} CreateToken (EToken_Struct); }
	break;
	case 39:
	{{p = ((te))-1;} CreateToken (EToken_Union); }
	break;
	case 40:
	{{p = ((te))-1;} CreateToken (EToken_Class); }
	break;
	case 41:
	{{p = ((te))-1;} CreateToken (EToken_Interface); }
	break;
	case 42:
	{{p = ((te))-1;} CreateToken (EToken_Property); }
	break;
	case 43:
	{{p = ((te))-1;} CreateToken (EToken_Get); }
	break;
	case 44:
	{{p = ((te))-1;} CreateToken (EToken_Set); }
	break;
	case 45:
	{{p = ((te))-1;} CreateToken (EToken_New); }
	break;
	case 46:
	{{p = ((te))-1;} CreateToken (EToken_Stack); }
	break;
	case 47:
	{{p = ((te))-1;} CreateToken (EToken_Heap); }
	break;
	case 48:
	{{p = ((te))-1;} CreateToken (EToken_SizeOf); }
	break;
	case 49:
	{{p = ((te))-1;} CreateToken (EToken_TypeOf); }
	break;
	case 50:
	{{p = ((te))-1;} CreateToken (EToken_DynaSizeOf); }
	break;
	case 51:
	{{p = ((te))-1;} CreateToken (EToken_DynaTypeOf); }
	break;
	case 52:
	{{p = ((te))-1;} CreateToken (EToken_If); }
	break;
	case 53:
	{{p = ((te))-1;} CreateToken (EToken_Else); }
	break;
	case 54:
	{{p = ((te))-1;} CreateToken (EToken_For); }
	break;
	case 55:
	{{p = ((te))-1;} CreateToken (EToken_While); }
	break;
	case 57:
	{{p = ((te))-1;} CreateToken (EToken_Break); }
	break;
	case 58:
	{{p = ((te))-1;} CreateToken (EToken_Continue); }
	break;
	case 59:
	{{p = ((te))-1;} CreateToken (EToken_Return); }
	break;
	case 60:
	{{p = ((te))-1;} CreateToken (EToken_Switch); }
	break;
	case 61:
	{{p = ((te))-1;} CreateToken (EToken_Case); }
	break;
	case 62:
	{{p = ((te))-1;} CreateToken (EToken_Default); }
	break;
	case 63:
	{{p = ((te))-1;} CreateToken (EToken_True); }
	break;
	case 64:
	{{p = ((te))-1;} CreateToken (EToken_False); }
	break;
	case 65:
	{{p = ((te))-1;} CreateToken (EToken_Null); }
	break;
	case 89:
	{{p = ((te))-1;} CreateStringToken (EToken_Identifier); }
	break;
	case 90:
	{{p = ((te))-1;} CreateCharToken (EToken_Integer); }
	break;
	case 91:
	{{p = ((te))-1;} CreateStringToken (EToken_Literal, 1, 1); }
	break;
	case 97:
	{{p = ((te))-1;} CreateToken (ts [0]); }
	break;
	}
	}
	break;
/* #line 1438 "axl_jnc_Lexer.cpp" */
		}
	}

_again:
	_acts = _axl_jnc_actions + _axl_jnc_to_state_actions[cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 1:
/* #line 1 "NONE" */
	{ts = 0;}
	break;
/* #line 1449 "axl_jnc_Lexer.cpp" */
		}
	}

	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	if ( _axl_jnc_eof_trans[cs] > 0 ) {
		_trans = _axl_jnc_eof_trans[cs] - 1;
		goto _eof_trans;
	}
	}

	}

/* #line 189 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */

	bool Result = cs != axl_jnc_error;
	if (!Result)
	{
		CToken* pToken = CreateToken (EToken_Error);
		pToken->m_Data.m_Error = err::CError ("lexer error");
	}

	return Result;
}

//.............................................................................

} // namespace axl {
} // namespace jnc {
