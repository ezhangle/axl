
/* #line 1 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
#include "stdafx.h"
#include "axl_jnc_Lexer.h"

// warning C4065: switch statement contains 'default' but no 'case' labels

#pragma warning (disable: 4065)

namespace axl {
namespace jnc {

//.............................................................................


/* #line 2 "axl_jnc_Lexer.cpp" */
static const unsigned char _axl_jnc_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 85, 1, 86, 1, 87, 1, 
	88, 1, 89, 1, 90, 1, 91, 1, 
	92, 1, 93, 1, 94, 1, 95, 1, 
	96, 1, 97, 1, 98, 1, 99, 1, 
	100, 1, 101, 1, 102, 1, 103, 1, 
	104, 1, 105, 1, 106, 1, 107, 1, 
	108, 1, 109, 1, 111, 1, 112, 1, 
	113, 1, 114, 1, 115, 1, 116, 1, 
	117, 1, 118, 1, 119, 1, 120, 1, 
	121, 1, 122, 1, 123, 1, 124, 1, 
	125, 1, 126, 1, 127, 1, 128, 1, 
	129, 1, 130, 2, 0, 107, 2, 0, 
	108, 2, 0, 110, 2, 3, 4, 2, 
	3, 5, 2, 3, 6, 2, 3, 7, 
	2, 3, 8, 2, 3, 9, 2, 3, 
	10, 2, 3, 11, 2, 3, 12, 2, 
	3, 13, 2, 3, 14, 2, 3, 15, 
	2, 3, 16, 2, 3, 17, 2, 3, 
	18, 2, 3, 19, 2, 3, 20, 2, 
	3, 21, 2, 3, 22, 2, 3, 23, 
	2, 3, 24, 2, 3, 25, 2, 3, 
	26, 2, 3, 27, 2, 3, 28, 2, 
	3, 29, 2, 3, 30, 2, 3, 31, 
	2, 3, 32, 2, 3, 33, 2, 3, 
	34, 2, 3, 35, 2, 3, 36, 2, 
	3, 37, 2, 3, 38, 2, 3, 39, 
	2, 3, 40, 2, 3, 41, 2, 3, 
	42, 2, 3, 43, 2, 3, 44, 2, 
	3, 45, 2, 3, 46, 2, 3, 47, 
	2, 3, 48, 2, 3, 49, 2, 3, 
	50, 2, 3, 51, 2, 3, 52, 2, 
	3, 53, 2, 3, 54, 2, 3, 55, 
	2, 3, 56, 2, 3, 57, 2, 3, 
	58, 2, 3, 59, 2, 3, 60, 2, 
	3, 61, 2, 3, 62, 2, 3, 63, 
	2, 3, 64, 2, 3, 65, 2, 3, 
	66, 2, 3, 67, 2, 3, 68, 2, 
	3, 69, 2, 3, 70, 2, 3, 71, 
	2, 3, 72, 2, 3, 73, 2, 3, 
	74, 2, 3, 75, 2, 3, 76, 2, 
	3, 77, 2, 3, 78, 2, 3, 79, 
	2, 3, 80, 2, 3, 81, 2, 3, 
	82, 2, 3, 83, 2, 3, 84
};

static const short _axl_jnc_key_offsets[] = {
	0, 3, 6, 7, 9, 12, 14, 20, 
	70, 73, 74, 77, 78, 79, 81, 84, 
	85, 86, 88, 91, 92, 95, 96, 101, 
	103, 106, 112, 113, 115, 116, 117, 119, 
	120, 121, 128, 137, 144, 145, 154, 162, 
	170, 178, 186, 194, 202, 210, 218, 227, 
	235, 243, 251, 261, 270, 278, 286, 294, 
	302, 310, 318, 326, 334, 342, 350, 358, 
	366, 374, 382, 390, 398, 410, 418, 426, 
	434, 442, 450, 458, 466, 474, 482, 490, 
	498, 507, 515, 523, 531, 539, 547, 556, 
	564, 572, 580, 588, 596, 604, 612, 620, 
	628, 641, 649, 657, 665, 673, 681, 689, 
	697, 705, 713, 721, 729, 737, 749, 757, 
	765, 773, 781, 789, 797, 805, 813, 821, 
	829, 837, 845, 853, 861, 869, 877, 885, 
	893, 901, 909, 917, 925, 934, 943, 951, 
	959, 967, 975, 987, 995, 1003, 1011, 1019, 
	1027, 1035, 1043, 1051, 1059, 1068, 1076, 1084, 
	1092, 1100, 1108, 1116, 1124, 1132, 1140, 1148, 
	1158, 1166, 1174, 1182, 1190, 1198, 1206, 1214, 
	1222, 1230, 1238, 1246, 1254, 1262, 1270, 1281, 
	1289, 1297, 1305, 1313, 1321, 1329, 1337, 1345, 
	1353, 1361, 1369, 1377, 1385, 1393, 1401, 1409, 
	1417, 1425, 1433, 1441, 1449, 1457, 1468, 1476, 
	1484, 1492, 1500, 1508, 1516, 1524, 1533, 1541, 
	1549, 1557, 1565, 1573, 1581, 1589, 1597, 1605, 
	1614, 1623, 1631, 1639, 1647, 1655, 1663, 1671, 
	1679, 1687, 1695, 1703, 1711, 1719, 1727, 1735, 
	1743, 1751, 1759, 1768, 1776, 1784, 1792, 1800, 
	1808, 1816, 1824, 1832, 1844, 1852, 1860, 1868, 
	1876, 1885, 1893, 1901, 1909, 1917, 1925, 1933, 
	1943, 1952, 1960, 1968, 1976, 1984, 1992, 2000, 
	2008, 2016, 2024, 2032, 2040, 2048, 2056, 2064, 
	2074, 2082, 2091, 2099, 2107, 2115, 2123, 2132, 
	2140, 2148, 2156, 2165, 2174, 2182, 2190, 2199, 
	2207, 2215, 2223, 2231, 2239, 2247, 2255, 2263, 
	2271, 2281, 2289, 2297, 2305, 2313, 2321, 2329, 
	2337, 2345, 2353, 2361, 2370, 2378, 2386, 2394, 
	2402, 2410, 2418, 2427, 2435, 2443, 2451, 2459, 
	2467
};

static const char _axl_jnc_trans_keys[] = {
	10, 34, 92, 10, 39, 92, 46, 10, 
	42, 10, 42, 47, 48, 57, 48, 57, 
	65, 70, 97, 102, 9, 10, 13, 32, 
	33, 34, 37, 38, 39, 42, 43, 45, 
	46, 47, 48, 58, 60, 61, 62, 64, 
	69, 94, 95, 97, 98, 99, 100, 101, 
	102, 103, 104, 105, 108, 109, 110, 111, 
	112, 114, 115, 116, 117, 118, 119, 124, 
	49, 57, 65, 90, 106, 122, 9, 13, 
	32, 61, 10, 34, 92, 10, 61, 38, 
	61, 10, 39, 92, 10, 61, 43, 61, 
	45, 61, 62, 46, 42, 47, 61, 10, 
	46, 88, 120, 48, 57, 48, 57, 46, 
	48, 57, 48, 57, 65, 70, 97, 102, 
	61, 60, 61, 61, 61, 61, 62, 61, 
	61, 95, 48, 57, 65, 90, 97, 122, 
	43, 45, 95, 48, 57, 65, 90, 97, 
	122, 95, 48, 57, 65, 90, 97, 122, 
	61, 95, 98, 117, 48, 57, 65, 90, 
	97, 122, 95, 115, 48, 57, 65, 90, 
	97, 122, 95, 116, 48, 57, 65, 90, 
	97, 122, 95, 114, 48, 57, 65, 90, 
	97, 122, 95, 97, 48, 57, 65, 90, 
	98, 122, 95, 99, 48, 57, 65, 90, 
	97, 122, 95, 116, 48, 57, 65, 90, 
	97, 122, 95, 116, 48, 57, 65, 90, 
	97, 122, 95, 111, 48, 57, 65, 90, 
	97, 122, 95, 101, 103, 48, 57, 65, 
	90, 97, 122, 95, 118, 48, 57, 65, 
	90, 97, 122, 95, 101, 48, 57, 65, 
	90, 97, 122, 95, 116, 48, 57, 65, 
	90, 97, 122, 95, 105, 111, 114, 48, 
	57, 65, 90, 97, 122, 95, 103, 110, 
	48, 57, 65, 90, 97, 122, 95, 101, 
	48, 57, 65, 90, 97, 122, 95, 110, 
	48, 57, 65, 90, 97, 122, 95, 100, 
	48, 57, 65, 90, 97, 122, 95, 105, 
	48, 57, 65, 90, 97, 122, 95, 97, 
	48, 57, 65, 90, 98, 122, 95, 110, 
	48, 57, 65, 90, 97, 122, 95, 100, 
	48, 57, 65, 90, 97, 122, 95, 97, 
	48, 57, 65, 90, 98, 122, 95, 98, 
	48, 57, 65, 90, 97, 122, 95, 108, 
	48, 57, 65, 90, 97, 122, 95, 101, 
	48, 57, 65, 90, 97, 122, 95, 111, 
	48, 57, 65, 90, 97, 122, 95, 108, 
	48, 57, 65, 90, 97, 122, 95, 101, 
	48, 57, 65, 90, 97, 122, 95, 97, 
	48, 57, 65, 90, 98, 122, 95, 107, 
	48, 57, 65, 90, 97, 122, 95, 97, 
	100, 104, 108, 111, 48, 57, 65, 90, 
	98, 122, 95, 115, 48, 57, 65, 90, 
	97, 122, 95, 101, 48, 57, 65, 90, 
	97, 122, 95, 101, 48, 57, 65, 90, 
	97, 122, 95, 99, 48, 57, 65, 90, 
	97, 122, 95, 108, 48, 57, 65, 90, 
	97, 122, 95, 97, 48, 57, 65, 90, 
	98, 122, 95, 114, 48, 57, 65, 90, 
	97, 122, 95, 97, 48, 57, 65, 90, 
	98, 122, 95, 115, 48, 57, 65, 90, 
	97, 122, 95, 115, 48, 57, 65, 90, 
	97, 122, 95, 110, 48, 57, 65, 90, 
	97, 122, 95, 115, 116, 48, 57, 65, 
	90, 97, 122, 95, 116, 48, 57, 65, 
	90, 97, 122, 95, 105, 48, 57, 65, 
	90, 97, 122, 95, 110, 48, 57, 65, 
	90, 97, 122, 95, 117, 48, 57, 65, 
	90, 97, 122, 95, 101, 48, 57, 65, 
	90, 97, 122, 95, 101, 111, 48, 57, 
	65, 90, 97, 122, 95, 102, 48, 57, 
	65, 90, 97, 122, 95, 97, 48, 57, 
	65, 90, 98, 122, 95, 117, 48, 57, 
	65, 90, 97, 122, 95, 108, 48, 57, 
	65, 90, 97, 122, 95, 116, 48, 57, 
	65, 90, 97, 122, 95, 117, 48, 57, 
	65, 90, 97, 122, 95, 98, 48, 57, 
	65, 90, 97, 122, 95, 108, 48, 57, 
	65, 90, 97, 122, 95, 101, 48, 57, 
	65, 90, 97, 122, 43, 45, 95, 108, 
	110, 118, 120, 48, 57, 65, 90, 97, 
	122, 95, 115, 48, 57, 65, 90, 97, 
	122, 95, 101, 48, 57, 65, 90, 97, 
	122, 95, 117, 48, 57, 65, 90, 97, 
	122, 95, 109, 48, 57, 65, 90, 97, 
	122, 95, 99, 48, 57, 65, 90, 97, 
	122, 95, 101, 48, 57, 65, 90, 97, 
	122, 95, 110, 48, 57, 65, 90, 97, 
	122, 95, 116, 48, 57, 65, 90, 97, 
	122, 95, 116, 48, 57, 65, 90, 97, 
	122, 95, 101, 48, 57, 65, 90, 97, 
	122, 95, 110, 48, 57, 65, 90, 97, 
	122, 95, 100, 48, 57, 65, 90, 97, 
	122, 95, 97, 108, 111, 114, 117, 48, 
	57, 65, 90, 98, 122, 95, 108, 48, 
	57, 65, 90, 97, 122, 95, 115, 48, 
	57, 65, 90, 97, 122, 95, 101, 48, 
	57, 65, 90, 97, 122, 95, 111, 48, 
	57, 65, 90, 97, 122, 95, 97, 48, 
	57, 65, 90, 98, 122, 95, 116, 48, 
	57, 65, 90, 97, 122, 95, 114, 48, 
	57, 65, 90, 97, 122, 95, 105, 48, 
	57, 65, 90, 97, 122, 95, 101, 48, 
	57, 65, 90, 97, 122, 95, 110, 48, 
	57, 65, 90, 97, 122, 95, 100, 48, 
	57, 65, 90, 97, 122, 95, 110, 48, 
	57, 65, 90, 97, 122, 95, 99, 48, 
	57, 65, 90, 97, 122, 95, 116, 48, 
	57, 65, 90, 97, 122, 95, 105, 48, 
	57, 65, 90, 97, 122, 95, 111, 48, 
	57, 65, 90, 97, 122, 95, 110, 48, 
	57, 65, 90, 97, 122, 95, 101, 48, 
	57, 65, 90, 97, 122, 95, 116, 48, 
	57, 65, 90, 97, 122, 95, 101, 48, 
	57, 65, 90, 97, 122, 95, 97, 48, 
	57, 65, 90, 98, 122, 95, 112, 48, 
	57, 65, 90, 97, 122, 95, 102, 110, 
	48, 57, 65, 90, 97, 122, 95, 100, 
	116, 48, 57, 65, 90, 97, 122, 95, 
	101, 48, 57, 65, 90, 97, 122, 95, 
	120, 48, 57, 65, 90, 97, 122, 95, 
	101, 48, 57, 65, 90, 97, 122, 95, 
	100, 48, 57, 65, 90, 97, 122, 49, 
	51, 54, 56, 95, 112, 48, 57, 65, 
	90, 97, 122, 54, 95, 48, 57, 65, 
	90, 97, 122, 50, 95, 48, 57, 65, 
	90, 97, 122, 52, 95, 48, 57, 65, 
	90, 97, 122, 95, 116, 48, 57, 65, 
	90, 97, 122, 95, 114, 48, 57, 65, 
	90, 97, 122, 95, 111, 48, 57, 65, 
	90, 97, 122, 95, 110, 48, 57, 65, 
	90, 97, 122, 95, 103, 48, 57, 65, 
	90, 97, 122, 95, 117, 48, 57, 65, 
	90, 97, 122, 95, 108, 116, 48, 57, 
	65, 90, 97, 122, 95, 116, 48, 57, 
	65, 90, 97, 122, 95, 105, 48, 57, 
	65, 90, 97, 122, 95, 99, 48, 57, 
	65, 90, 97, 122, 95, 97, 48, 57, 
	65, 90, 98, 122, 95, 115, 48, 57, 
	65, 90, 97, 122, 95, 116, 48, 57, 
	65, 90, 97, 122, 95, 97, 48, 57, 
	65, 90, 98, 122, 95, 98, 48, 57, 
	65, 90, 97, 122, 95, 108, 48, 57, 
	65, 90, 97, 122, 95, 101, 48, 57, 
	65, 90, 97, 122, 95, 97, 101, 117, 
	48, 57, 65, 90, 98, 122, 95, 109, 
	48, 57, 65, 90, 97, 122, 95, 101, 
	48, 57, 65, 90, 97, 122, 95, 115, 
	48, 57, 65, 90, 97, 122, 95, 112, 
	48, 57, 65, 90, 97, 122, 95, 97, 
	48, 57, 65, 90, 98, 122, 95, 99, 
	48, 57, 65, 90, 97, 122, 95, 101, 
	48, 57, 65, 90, 97, 122, 95, 119, 
	48, 57, 65, 90, 97, 122, 95, 108, 
	48, 57, 65, 90, 97, 122, 95, 108, 
	48, 57, 65, 90, 97, 122, 95, 97, 
	48, 57, 65, 90, 98, 122, 95, 98, 
	48, 57, 65, 90, 97, 122, 95, 108, 
	48, 57, 65, 90, 97, 122, 95, 101, 
	48, 57, 65, 90, 97, 122, 95, 98, 
	110, 112, 118, 48, 57, 65, 90, 97, 
	122, 95, 106, 48, 57, 65, 90, 97, 
	122, 95, 101, 48, 57, 65, 90, 97, 
	122, 95, 99, 48, 57, 65, 90, 97, 
	122, 95, 116, 48, 57, 65, 90, 97, 
	122, 95, 99, 48, 57, 65, 90, 97, 
	122, 95, 104, 48, 57, 65, 90, 97, 
	122, 95, 97, 48, 57, 65, 90, 98, 
	122, 95, 110, 48, 57, 65, 90, 97, 
	122, 95, 103, 48, 57, 65, 90, 97, 
	122, 95, 101, 48, 57, 65, 90, 97, 
	122, 95, 101, 48, 57, 65, 90, 97, 
	122, 95, 114, 48, 57, 65, 90, 97, 
	122, 95, 97, 48, 57, 65, 90, 98, 
	122, 95, 116, 48, 57, 65, 90, 97, 
	122, 95, 111, 48, 57, 65, 90, 97, 
	122, 95, 114, 48, 57, 65, 90, 97, 
	122, 95, 101, 48, 57, 65, 90, 97, 
	122, 95, 114, 48, 57, 65, 90, 97, 
	122, 95, 114, 48, 57, 65, 90, 97, 
	122, 95, 105, 48, 57, 65, 90, 97, 
	122, 95, 100, 48, 57, 65, 90, 97, 
	122, 95, 101, 48, 57, 65, 90, 97, 
	122, 95, 97, 111, 114, 117, 48, 57, 
	65, 90, 98, 122, 95, 99, 48, 57, 
	65, 90, 97, 122, 95, 107, 48, 57, 
	65, 90, 97, 122, 95, 115, 48, 57, 
	65, 90, 97, 122, 95, 116, 48, 57, 
	65, 90, 97, 122, 95, 102, 48, 57, 
	65, 90, 97, 122, 95, 105, 48, 57, 
	65, 90, 97, 122, 95, 120, 48, 57, 
	65, 90, 97, 122, 95, 101, 111, 48, 
	57, 65, 90, 97, 122, 95, 99, 48, 
	57, 65, 90, 97, 122, 95, 111, 48, 
	57, 65, 90, 97, 122, 95, 110, 48, 
	57, 65, 90, 97, 122, 95, 115, 48, 
	57, 65, 90, 97, 122, 95, 116, 48, 
	57, 65, 90, 97, 122, 95, 114, 48, 
	57, 65, 90, 97, 122, 95, 117, 48, 
	57, 65, 90, 97, 122, 95, 99, 48, 
	57, 65, 90, 97, 122, 95, 116, 48, 
	57, 65, 90, 97, 122, 95, 112, 116, 
	48, 57, 65, 90, 97, 122, 95, 101, 
	118, 48, 57, 65, 90, 97, 122, 95, 
	114, 48, 57, 65, 90, 97, 122, 95, 
	116, 48, 57, 65, 90, 97, 122, 95, 
	121, 48, 57, 65, 90, 97, 122, 95, 
	97, 48, 57, 65, 90, 98, 122, 95, 
	108, 48, 57, 65, 90, 97, 122, 95, 
	117, 48, 57, 65, 90, 97, 122, 95, 
	101, 48, 57, 65, 90, 97, 122, 95, 
	101, 48, 57, 65, 90, 97, 122, 95, 
	99, 48, 57, 65, 90, 97, 122, 95, 
	116, 48, 57, 65, 90, 97, 122, 95, 
	101, 48, 57, 65, 90, 97, 122, 95, 
	100, 48, 57, 65, 90, 97, 122, 95, 
	98, 48, 57, 65, 90, 97, 122, 95, 
	108, 48, 57, 65, 90, 97, 122, 95, 
	105, 48, 57, 65, 90, 97, 122, 95, 
	99, 48, 57, 65, 90, 97, 122, 95, 
	101, 48, 57, 65, 90, 97, 122, 95, 
	97, 116, 48, 57, 65, 90, 98, 122, 
	95, 100, 48, 57, 65, 90, 97, 122, 
	95, 111, 48, 57, 65, 90, 97, 122, 
	95, 110, 48, 57, 65, 90, 97, 122, 
	95, 108, 48, 57, 65, 90, 97, 122, 
	95, 121, 48, 57, 65, 90, 97, 122, 
	95, 117, 48, 57, 65, 90, 97, 122, 
	95, 114, 48, 57, 65, 90, 97, 122, 
	95, 110, 48, 57, 65, 90, 97, 122, 
	95, 101, 104, 105, 116, 119, 48, 57, 
	65, 90, 97, 122, 95, 116, 48, 57, 
	65, 90, 97, 122, 95, 111, 48, 57, 
	65, 90, 97, 122, 95, 114, 48, 57, 
	65, 90, 97, 122, 95, 116, 48, 57, 
	65, 90, 97, 122, 95, 103, 122, 48, 
	57, 65, 90, 97, 121, 95, 110, 48, 
	57, 65, 90, 97, 122, 95, 101, 48, 
	57, 65, 90, 97, 122, 95, 100, 48, 
	57, 65, 90, 97, 122, 95, 101, 48, 
	57, 65, 90, 97, 122, 95, 111, 48, 
	57, 65, 90, 97, 122, 95, 102, 48, 
	57, 65, 90, 97, 122, 95, 97, 100, 
	114, 48, 57, 65, 90, 98, 122, 95, 
	99, 116, 48, 57, 65, 90, 97, 122, 
	95, 107, 48, 57, 65, 90, 97, 122, 
	95, 105, 48, 57, 65, 90, 97, 122, 
	95, 99, 48, 57, 65, 90, 97, 122, 
	95, 99, 48, 57, 65, 90, 97, 122, 
	95, 97, 48, 57, 65, 90, 98, 122, 
	95, 108, 48, 57, 65, 90, 97, 122, 
	95, 108, 48, 57, 65, 90, 97, 122, 
	95, 117, 48, 57, 65, 90, 97, 122, 
	95, 99, 48, 57, 65, 90, 97, 122, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	95, 105, 48, 57, 65, 90, 97, 122, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	95, 99, 48, 57, 65, 90, 97, 122, 
	95, 104, 48, 57, 65, 90, 97, 122, 
	95, 104, 114, 121, 48, 57, 65, 90, 
	97, 122, 95, 105, 48, 57, 65, 90, 
	97, 122, 95, 110, 115, 48, 57, 65, 
	90, 97, 122, 95, 117, 48, 57, 65, 
	90, 97, 122, 95, 101, 48, 57, 65, 
	90, 97, 122, 95, 112, 48, 57, 65, 
	90, 97, 122, 95, 101, 48, 57, 65, 
	90, 97, 122, 95, 100, 111, 48, 57, 
	65, 90, 97, 122, 95, 101, 48, 57, 
	65, 90, 97, 122, 95, 102, 48, 57, 
	65, 90, 97, 122, 95, 102, 48, 57, 
	65, 90, 97, 122, 95, 110, 115, 48, 
	57, 65, 90, 97, 122, 95, 105, 115, 
	48, 57, 65, 90, 97, 122, 95, 111, 
	48, 57, 65, 90, 97, 122, 95, 110, 
	48, 57, 65, 90, 97, 122, 95, 97, 
	105, 48, 57, 65, 90, 98, 122, 95, 
	102, 48, 57, 65, 90, 97, 122, 95, 
	101, 48, 57, 65, 90, 97, 122, 95, 
	103, 48, 57, 65, 90, 97, 122, 95, 
	110, 48, 57, 65, 90, 97, 122, 95, 
	101, 48, 57, 65, 90, 97, 122, 95, 
	100, 48, 57, 65, 90, 97, 122, 95, 
	105, 48, 57, 65, 90, 97, 122, 95, 
	110, 48, 57, 65, 90, 97, 122, 95, 
	103, 48, 57, 65, 90, 97, 122, 95, 
	97, 105, 111, 48, 57, 65, 90, 98, 
	122, 95, 114, 48, 57, 65, 90, 97, 
	122, 95, 105, 48, 57, 65, 90, 97, 
	122, 95, 97, 48, 57, 65, 90, 98, 
	122, 95, 110, 48, 57, 65, 90, 97, 
	122, 95, 116, 48, 57, 65, 90, 97, 
	122, 95, 114, 48, 57, 65, 90, 97, 
	122, 95, 116, 48, 57, 65, 90, 97, 
	122, 95, 117, 48, 57, 65, 90, 97, 
	122, 95, 97, 48, 57, 65, 90, 98, 
	122, 95, 108, 48, 57, 65, 90, 97, 
	122, 95, 105, 108, 48, 57, 65, 90, 
	97, 122, 95, 100, 48, 57, 65, 90, 
	97, 122, 95, 97, 48, 57, 65, 90, 
	98, 122, 95, 116, 48, 57, 65, 90, 
	97, 122, 95, 105, 48, 57, 65, 90, 
	97, 122, 95, 108, 48, 57, 65, 90, 
	97, 122, 95, 101, 48, 57, 65, 90, 
	97, 122, 95, 101, 104, 48, 57, 65, 
	90, 97, 122, 95, 97, 48, 57, 65, 
	90, 98, 122, 95, 107, 48, 57, 65, 
	90, 97, 122, 95, 105, 48, 57, 65, 
	90, 97, 122, 95, 108, 48, 57, 65, 
	90, 97, 122, 95, 101, 48, 57, 65, 
	90, 97, 122, 61, 124, 0
};

static const char _axl_jnc_single_lengths[] = {
	3, 3, 1, 2, 3, 0, 0, 44, 
	3, 1, 3, 1, 1, 2, 3, 1, 
	1, 2, 3, 1, 3, 1, 3, 0, 
	1, 0, 1, 2, 1, 1, 2, 1, 
	1, 1, 3, 1, 1, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 4, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 6, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	7, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 6, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 3, 2, 2, 
	2, 2, 6, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 4, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 5, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 5, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 6, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 4, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 4, 
	2, 3, 2, 2, 2, 2, 3, 2, 
	2, 2, 3, 3, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	4, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2
};

static const char _axl_jnc_range_lengths[] = {
	0, 0, 0, 0, 0, 1, 3, 3, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	1, 3, 0, 0, 0, 0, 0, 0, 
	0, 3, 3, 3, 0, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	0
};

static const short _axl_jnc_index_offsets[] = {
	0, 4, 8, 10, 13, 17, 19, 23, 
	71, 75, 77, 81, 83, 85, 88, 92, 
	94, 96, 99, 103, 105, 109, 111, 116, 
	118, 121, 125, 127, 130, 132, 134, 137, 
	139, 141, 146, 153, 158, 160, 167, 173, 
	179, 185, 191, 197, 203, 209, 215, 222, 
	228, 234, 240, 248, 255, 261, 267, 273, 
	279, 285, 291, 297, 303, 309, 315, 321, 
	327, 333, 339, 345, 351, 361, 367, 373, 
	379, 385, 391, 397, 403, 409, 415, 421, 
	427, 434, 440, 446, 452, 458, 464, 471, 
	477, 483, 489, 495, 501, 507, 513, 519, 
	525, 536, 542, 548, 554, 560, 566, 572, 
	578, 584, 590, 596, 602, 608, 618, 624, 
	630, 636, 642, 648, 654, 660, 666, 672, 
	678, 684, 690, 696, 702, 708, 714, 720, 
	726, 732, 738, 744, 750, 757, 764, 770, 
	776, 782, 788, 798, 804, 810, 816, 822, 
	828, 834, 840, 846, 852, 859, 865, 871, 
	877, 883, 889, 895, 901, 907, 913, 919, 
	927, 933, 939, 945, 951, 957, 963, 969, 
	975, 981, 987, 993, 999, 1005, 1011, 1020, 
	1026, 1032, 1038, 1044, 1050, 1056, 1062, 1068, 
	1074, 1080, 1086, 1092, 1098, 1104, 1110, 1116, 
	1122, 1128, 1134, 1140, 1146, 1152, 1161, 1167, 
	1173, 1179, 1185, 1191, 1197, 1203, 1210, 1216, 
	1222, 1228, 1234, 1240, 1246, 1252, 1258, 1264, 
	1271, 1278, 1284, 1290, 1296, 1302, 1308, 1314, 
	1320, 1326, 1332, 1338, 1344, 1350, 1356, 1362, 
	1368, 1374, 1380, 1387, 1393, 1399, 1405, 1411, 
	1417, 1423, 1429, 1435, 1445, 1451, 1457, 1463, 
	1469, 1476, 1482, 1488, 1494, 1500, 1506, 1512, 
	1520, 1527, 1533, 1539, 1545, 1551, 1557, 1563, 
	1569, 1575, 1581, 1587, 1593, 1599, 1605, 1611, 
	1619, 1625, 1632, 1638, 1644, 1650, 1656, 1663, 
	1669, 1675, 1681, 1688, 1695, 1701, 1707, 1714, 
	1720, 1726, 1732, 1738, 1744, 1750, 1756, 1762, 
	1768, 1776, 1782, 1788, 1794, 1800, 1806, 1812, 
	1818, 1824, 1830, 1836, 1843, 1849, 1855, 1861, 
	1867, 1873, 1879, 1886, 1892, 1898, 1904, 1910, 
	1916
};

static const short _axl_jnc_indicies[] = {
	2, 3, 4, 1, 6, 7, 8, 5, 
	10, 9, 12, 13, 11, 12, 13, 14, 
	11, 15, 0, 17, 17, 17, 16, 19, 
	20, 19, 19, 21, 22, 23, 24, 25, 
	26, 27, 28, 29, 30, 31, 33, 34, 
	35, 36, 37, 39, 40, 38, 41, 42, 
	43, 44, 45, 46, 47, 48, 49, 50, 
	51, 52, 53, 54, 55, 56, 57, 58, 
	59, 60, 61, 32, 38, 38, 18, 19, 
	19, 19, 62, 64, 63, 2, 3, 4, 
	1, 65, 1, 66, 63, 67, 68, 63, 
	6, 7, 8, 5, 69, 5, 70, 63, 
	71, 72, 63, 73, 74, 75, 63, 76, 
	63, 11, 77, 78, 63, 79, 77, 81, 
	82, 82, 32, 80, 15, 83, 81, 32, 
	80, 17, 17, 17, 84, 85, 63, 86, 
	87, 63, 89, 88, 90, 63, 91, 92, 
	63, 94, 93, 95, 63, 38, 38, 38, 
	38, 0, 81, 81, 38, 97, 38, 38, 
	96, 38, 97, 38, 38, 96, 98, 63, 
	38, 99, 100, 38, 38, 38, 96, 38, 
	101, 38, 38, 38, 96, 38, 102, 38, 
	38, 38, 96, 38, 103, 38, 38, 38, 
	96, 38, 104, 38, 38, 38, 96, 38, 
	105, 38, 38, 38, 96, 38, 106, 38, 
	38, 38, 96, 38, 107, 38, 38, 38, 
	96, 38, 108, 38, 38, 38, 96, 38, 
	110, 111, 38, 38, 38, 109, 38, 112, 
	38, 38, 38, 96, 38, 113, 38, 38, 
	38, 96, 38, 114, 38, 38, 38, 96, 
	38, 115, 116, 117, 38, 38, 38, 96, 
	38, 118, 119, 38, 38, 38, 96, 38, 
	120, 38, 38, 38, 96, 38, 121, 38, 
	38, 38, 96, 38, 122, 38, 38, 38, 
	96, 38, 123, 38, 38, 38, 96, 38, 
	124, 38, 38, 38, 96, 38, 125, 38, 
	38, 38, 96, 38, 126, 38, 38, 38, 
	96, 38, 127, 38, 38, 38, 96, 38, 
	128, 38, 38, 38, 96, 38, 129, 38, 
	38, 38, 96, 38, 130, 38, 38, 38, 
	96, 38, 131, 38, 38, 38, 96, 38, 
	132, 38, 38, 38, 96, 38, 133, 38, 
	38, 38, 96, 38, 134, 38, 38, 38, 
	96, 38, 135, 38, 38, 38, 96, 38, 
	136, 137, 138, 139, 140, 38, 38, 38, 
	96, 38, 141, 38, 38, 38, 96, 38, 
	142, 38, 38, 38, 96, 38, 143, 38, 
	38, 38, 96, 38, 144, 38, 38, 38, 
	96, 38, 145, 38, 38, 38, 96, 38, 
	146, 38, 38, 38, 96, 38, 147, 38, 
	38, 38, 96, 38, 148, 38, 38, 38, 
	96, 38, 149, 38, 38, 38, 96, 38, 
	150, 38, 38, 38, 96, 38, 151, 38, 
	38, 38, 96, 38, 152, 153, 38, 38, 
	38, 96, 38, 154, 38, 38, 38, 96, 
	38, 155, 38, 38, 38, 96, 38, 156, 
	38, 38, 38, 96, 38, 157, 38, 38, 
	38, 96, 38, 158, 38, 38, 38, 96, 
	38, 159, 160, 38, 38, 38, 96, 38, 
	161, 38, 38, 38, 96, 38, 162, 38, 
	38, 38, 96, 38, 163, 38, 38, 38, 
	96, 38, 164, 38, 38, 38, 96, 38, 
	165, 38, 38, 38, 96, 38, 167, 38, 
	38, 38, 166, 38, 168, 38, 38, 38, 
	96, 38, 169, 38, 38, 38, 96, 38, 
	170, 38, 38, 38, 96, 81, 81, 38, 
	171, 172, 173, 174, 97, 38, 38, 96, 
	38, 175, 38, 38, 38, 96, 38, 176, 
	38, 38, 38, 96, 38, 177, 38, 38, 
	38, 96, 38, 178, 38, 38, 38, 96, 
	38, 180, 38, 38, 38, 179, 38, 181, 
	38, 38, 38, 96, 38, 182, 38, 38, 
	38, 96, 38, 183, 38, 38, 38, 96, 
	38, 184, 38, 38, 38, 96, 38, 185, 
	38, 38, 38, 96, 38, 186, 38, 38, 
	38, 96, 38, 187, 38, 38, 38, 96, 
	38, 188, 189, 190, 191, 192, 38, 38, 
	38, 96, 38, 193, 38, 38, 38, 96, 
	38, 194, 38, 38, 38, 96, 38, 195, 
	38, 38, 38, 96, 38, 196, 38, 38, 
	38, 96, 38, 197, 38, 38, 38, 96, 
	38, 198, 38, 38, 38, 96, 38, 199, 
	38, 38, 38, 96, 38, 200, 38, 38, 
	38, 96, 38, 201, 38, 38, 38, 96, 
	38, 202, 38, 38, 38, 96, 38, 203, 
	38, 38, 38, 96, 38, 204, 38, 38, 
	38, 96, 38, 205, 38, 38, 38, 96, 
	38, 206, 38, 38, 38, 96, 38, 207, 
	38, 38, 38, 96, 38, 208, 38, 38, 
	38, 96, 38, 209, 38, 38, 38, 96, 
	38, 210, 38, 38, 38, 96, 38, 211, 
	38, 38, 38, 96, 38, 212, 38, 38, 
	38, 96, 38, 213, 38, 38, 38, 96, 
	38, 214, 38, 38, 38, 96, 38, 215, 
	216, 38, 38, 38, 96, 38, 217, 218, 
	38, 38, 38, 96, 38, 219, 38, 38, 
	38, 96, 38, 220, 38, 38, 38, 96, 
	38, 221, 38, 38, 38, 96, 38, 222, 
	38, 38, 38, 96, 224, 225, 226, 227, 
	38, 228, 38, 38, 38, 223, 229, 38, 
	38, 38, 38, 96, 230, 38, 38, 38, 
	38, 96, 231, 38, 38, 38, 38, 96, 
	38, 232, 38, 38, 38, 96, 38, 233, 
	38, 38, 38, 96, 38, 234, 38, 38, 
	38, 96, 38, 235, 38, 38, 38, 96, 
	38, 236, 38, 38, 38, 96, 38, 237, 
	38, 38, 38, 96, 38, 238, 239, 38, 
	38, 38, 96, 38, 240, 38, 38, 38, 
	96, 38, 241, 38, 38, 38, 96, 38, 
	242, 38, 38, 38, 96, 38, 243, 38, 
	38, 38, 96, 38, 244, 38, 38, 38, 
	96, 38, 245, 38, 38, 38, 96, 38, 
	246, 38, 38, 38, 96, 38, 247, 38, 
	38, 38, 96, 38, 248, 38, 38, 38, 
	96, 38, 249, 38, 38, 38, 96, 38, 
	250, 251, 252, 38, 38, 38, 96, 38, 
	253, 38, 38, 38, 96, 38, 254, 38, 
	38, 38, 96, 38, 255, 38, 38, 38, 
	96, 38, 256, 38, 38, 38, 96, 38, 
	257, 38, 38, 38, 96, 38, 258, 38, 
	38, 38, 96, 38, 259, 38, 38, 38, 
	96, 38, 260, 38, 38, 38, 96, 38, 
	261, 38, 38, 38, 96, 38, 262, 38, 
	38, 38, 96, 38, 264, 38, 38, 38, 
	263, 38, 265, 38, 38, 38, 96, 38, 
	266, 38, 38, 38, 96, 38, 267, 38, 
	38, 38, 96, 38, 268, 269, 270, 271, 
	38, 38, 38, 96, 38, 272, 38, 38, 
	38, 96, 38, 273, 38, 38, 38, 96, 
	38, 274, 38, 38, 38, 96, 38, 275, 
	38, 38, 38, 96, 38, 276, 38, 38, 
	38, 96, 38, 277, 38, 38, 38, 96, 
	38, 278, 38, 38, 38, 96, 38, 279, 
	38, 38, 38, 96, 38, 280, 38, 38, 
	38, 96, 38, 281, 38, 38, 38, 96, 
	38, 282, 38, 38, 38, 96, 38, 283, 
	38, 38, 38, 96, 38, 284, 38, 38, 
	38, 96, 38, 285, 38, 38, 38, 96, 
	38, 286, 38, 38, 38, 96, 38, 287, 
	38, 38, 38, 96, 38, 288, 38, 38, 
	38, 96, 38, 289, 38, 38, 38, 96, 
	38, 290, 38, 38, 38, 96, 38, 291, 
	38, 38, 38, 96, 38, 292, 38, 38, 
	38, 96, 38, 293, 38, 38, 38, 96, 
	38, 294, 295, 296, 297, 38, 38, 38, 
	96, 38, 298, 38, 38, 38, 96, 38, 
	299, 38, 38, 38, 96, 38, 300, 38, 
	38, 38, 96, 38, 301, 38, 38, 38, 
	96, 38, 302, 38, 38, 38, 96, 38, 
	303, 38, 38, 38, 96, 38, 304, 38, 
	38, 38, 96, 38, 305, 306, 38, 38, 
	38, 96, 38, 307, 38, 38, 38, 96, 
	38, 308, 38, 38, 38, 96, 38, 309, 
	38, 38, 38, 96, 38, 310, 38, 38, 
	38, 96, 38, 311, 38, 38, 38, 96, 
	38, 312, 38, 38, 38, 96, 38, 313, 
	38, 38, 38, 96, 38, 314, 38, 38, 
	38, 96, 38, 315, 38, 38, 38, 96, 
	38, 316, 317, 38, 38, 38, 96, 38, 
	318, 319, 38, 38, 38, 96, 38, 320, 
	38, 38, 38, 96, 38, 321, 38, 38, 
	38, 96, 38, 322, 38, 38, 38, 96, 
	38, 323, 38, 38, 38, 96, 38, 324, 
	38, 38, 38, 96, 38, 325, 38, 38, 
	38, 96, 38, 326, 38, 38, 38, 96, 
	38, 327, 38, 38, 38, 96, 38, 328, 
	38, 38, 38, 96, 38, 329, 38, 38, 
	38, 96, 38, 330, 38, 38, 38, 96, 
	38, 331, 38, 38, 38, 96, 38, 332, 
	38, 38, 38, 96, 38, 333, 38, 38, 
	38, 96, 38, 334, 38, 38, 38, 96, 
	38, 335, 38, 38, 38, 96, 38, 336, 
	38, 38, 38, 96, 38, 337, 338, 38, 
	38, 38, 96, 38, 339, 38, 38, 38, 
	96, 38, 340, 38, 38, 38, 96, 38, 
	341, 38, 38, 38, 96, 38, 342, 38, 
	38, 38, 96, 38, 343, 38, 38, 38, 
	96, 38, 344, 38, 38, 38, 96, 38, 
	345, 38, 38, 38, 96, 38, 346, 38, 
	38, 38, 96, 38, 347, 348, 349, 350, 
	351, 38, 38, 38, 96, 38, 352, 38, 
	38, 38, 96, 38, 353, 38, 38, 38, 
	96, 38, 354, 38, 38, 38, 96, 38, 
	355, 38, 38, 38, 96, 38, 356, 357, 
	38, 38, 38, 96, 38, 358, 38, 38, 
	38, 96, 38, 359, 38, 38, 38, 96, 
	38, 360, 38, 38, 38, 96, 38, 361, 
	38, 38, 38, 96, 38, 362, 38, 38, 
	38, 96, 38, 363, 38, 38, 38, 96, 
	38, 364, 365, 366, 38, 38, 38, 96, 
	38, 367, 368, 38, 38, 38, 96, 38, 
	369, 38, 38, 38, 96, 38, 370, 38, 
	38, 38, 96, 38, 371, 38, 38, 38, 
	96, 38, 372, 38, 38, 38, 96, 38, 
	373, 38, 38, 38, 96, 38, 374, 38, 
	38, 38, 96, 38, 375, 38, 38, 38, 
	96, 38, 376, 38, 38, 38, 96, 38, 
	377, 38, 38, 38, 96, 38, 378, 38, 
	38, 38, 96, 38, 379, 38, 38, 38, 
	96, 38, 380, 38, 38, 38, 96, 38, 
	381, 38, 38, 38, 96, 38, 382, 38, 
	38, 38, 96, 38, 383, 384, 385, 38, 
	38, 38, 96, 38, 386, 38, 38, 38, 
	96, 38, 387, 388, 38, 38, 38, 96, 
	38, 389, 38, 38, 38, 96, 38, 390, 
	38, 38, 38, 96, 38, 391, 38, 38, 
	38, 96, 38, 392, 38, 38, 38, 96, 
	38, 393, 394, 38, 38, 38, 96, 38, 
	395, 38, 38, 38, 96, 38, 396, 38, 
	38, 38, 96, 38, 397, 38, 38, 38, 
	96, 38, 398, 399, 38, 38, 38, 96, 
	38, 400, 401, 38, 38, 38, 96, 38, 
	402, 38, 38, 38, 96, 38, 403, 38, 
	38, 38, 96, 38, 404, 405, 38, 38, 
	38, 96, 38, 406, 38, 38, 38, 96, 
	38, 407, 38, 38, 38, 96, 38, 408, 
	38, 38, 38, 96, 38, 409, 38, 38, 
	38, 96, 38, 410, 38, 38, 38, 96, 
	38, 411, 38, 38, 38, 96, 38, 412, 
	38, 38, 38, 96, 38, 413, 38, 38, 
	38, 96, 38, 414, 38, 38, 38, 96, 
	38, 415, 416, 417, 38, 38, 38, 96, 
	38, 418, 38, 38, 38, 96, 38, 419, 
	38, 38, 38, 96, 38, 420, 38, 38, 
	38, 96, 38, 421, 38, 38, 38, 96, 
	38, 422, 38, 38, 38, 96, 38, 423, 
	38, 38, 38, 96, 38, 424, 38, 38, 
	38, 96, 38, 425, 38, 38, 38, 96, 
	38, 426, 38, 38, 38, 96, 38, 427, 
	38, 38, 38, 96, 38, 428, 429, 38, 
	38, 38, 96, 38, 430, 38, 38, 38, 
	96, 38, 431, 38, 38, 38, 96, 38, 
	432, 38, 38, 38, 96, 38, 433, 38, 
	38, 38, 96, 38, 434, 38, 38, 38, 
	96, 38, 435, 38, 38, 38, 96, 38, 
	436, 437, 38, 38, 38, 96, 38, 438, 
	38, 38, 38, 96, 38, 439, 38, 38, 
	38, 96, 38, 440, 38, 38, 38, 96, 
	38, 441, 38, 38, 38, 96, 38, 442, 
	38, 38, 38, 96, 443, 444, 63, 0
};

static const short _axl_jnc_trans_targs[] = {
	7, 0, 7, 7, 11, 1, 7, 7, 
	15, 7, 7, 3, 3, 4, 7, 23, 
	7, 25, 7, 8, 7, 9, 10, 12, 
	13, 14, 16, 17, 18, 19, 20, 22, 
	24, 26, 27, 29, 30, 32, 33, 34, 
	36, 37, 50, 68, 86, 96, 109, 127, 
	129, 132, 144, 147, 159, 174, 197, 233, 
	243, 271, 282, 296, 314, 320, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 2, 21, 7, 7, 
	7, 5, 6, 7, 7, 7, 28, 7, 
	7, 7, 7, 7, 31, 7, 7, 7, 
	7, 35, 7, 38, 44, 39, 40, 41, 
	42, 43, 33, 45, 46, 7, 47, 48, 
	33, 49, 33, 51, 63, 65, 52, 58, 
	53, 54, 55, 56, 57, 33, 59, 60, 
	61, 62, 33, 64, 33, 66, 67, 33, 
	69, 71, 74, 76, 79, 70, 33, 72, 
	73, 33, 75, 33, 77, 78, 33, 80, 
	81, 82, 33, 83, 84, 85, 33, 87, 
	92, 88, 89, 90, 91, 33, 7, 93, 
	94, 95, 33, 97, 99, 102, 105, 98, 
	33, 100, 101, 7, 33, 103, 104, 33, 
	106, 107, 108, 33, 110, 113, 116, 117, 
	121, 111, 112, 33, 114, 115, 33, 33, 
	118, 119, 120, 33, 122, 123, 124, 125, 
	126, 33, 128, 33, 130, 131, 33, 33, 
	133, 134, 138, 135, 136, 137, 33, 7, 
	139, 140, 141, 33, 142, 33, 33, 33, 
	143, 33, 145, 146, 33, 148, 149, 155, 
	150, 151, 152, 153, 154, 33, 156, 157, 
	158, 33, 160, 167, 168, 161, 162, 163, 
	164, 165, 166, 33, 33, 169, 170, 7, 
	171, 172, 173, 33, 175, 179, 185, 191, 
	176, 177, 178, 33, 180, 181, 182, 183, 
	184, 33, 186, 187, 188, 189, 190, 33, 
	192, 193, 194, 195, 196, 33, 198, 200, 
	205, 229, 199, 33, 201, 202, 203, 204, 
	33, 206, 215, 207, 208, 209, 210, 211, 
	212, 213, 214, 33, 216, 224, 217, 220, 
	218, 219, 33, 221, 222, 223, 33, 225, 
	226, 227, 228, 33, 230, 231, 232, 33, 
	234, 235, 240, 236, 237, 238, 239, 33, 
	241, 242, 33, 244, 245, 248, 255, 267, 
	33, 246, 247, 33, 249, 252, 250, 251, 
	33, 253, 254, 33, 256, 260, 264, 257, 
	258, 33, 259, 33, 261, 262, 263, 33, 
	265, 266, 33, 268, 269, 270, 33, 272, 
	274, 276, 273, 33, 33, 275, 33, 277, 
	278, 279, 281, 280, 33, 33, 283, 293, 
	284, 286, 285, 33, 287, 289, 288, 33, 
	290, 291, 292, 33, 294, 295, 33, 297, 
	302, 307, 298, 299, 300, 301, 33, 303, 
	304, 305, 306, 33, 308, 309, 33, 310, 
	311, 312, 313, 33, 315, 317, 316, 33, 
	318, 319, 33, 7, 7
};

static const short _axl_jnc_trans_actions[] = {
	97, 0, 102, 55, 342, 0, 99, 53, 
	339, 95, 51, 0, 1, 0, 57, 0, 
	93, 0, 59, 0, 105, 0, 348, 0, 
	0, 348, 0, 0, 0, 7, 7, 345, 
	345, 0, 0, 0, 0, 0, 336, 336, 
	0, 0, 0, 0, 0, 336, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 89, 91, 
	21, 79, 37, 15, 43, 77, 33, 9, 
	29, 11, 31, 13, 0, 0, 35, 87, 
	81, 0, 0, 85, 83, 27, 0, 23, 
	71, 39, 19, 25, 0, 73, 41, 49, 
	75, 0, 45, 0, 0, 0, 0, 0, 
	0, 0, 126, 0, 0, 61, 0, 0, 
	195, 0, 201, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 153, 0, 0, 
	0, 0, 198, 0, 216, 0, 0, 312, 
	0, 0, 0, 0, 0, 0, 324, 0, 
	0, 177, 0, 240, 0, 0, 258, 0, 
	0, 0, 159, 0, 0, 0, 315, 0, 
	0, 0, 0, 0, 0, 327, 67, 0, 
	0, 0, 234, 0, 0, 0, 0, 0, 
	303, 0, 0, 65, 249, 0, 0, 192, 
	0, 0, 0, 114, 0, 0, 0, 0, 
	0, 0, 0, 333, 0, 0, 231, 306, 
	0, 0, 0, 144, 0, 0, 0, 0, 
	0, 183, 0, 261, 0, 0, 291, 300, 
	0, 0, 0, 0, 0, 0, 204, 63, 
	0, 0, 0, 219, 0, 222, 225, 228, 
	0, 237, 0, 0, 246, 0, 0, 0, 
	0, 0, 0, 0, 0, 189, 0, 0, 
	0, 135, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 108, 285, 0, 0, 69, 
	0, 0, 0, 156, 0, 0, 0, 0, 
	0, 0, 0, 210, 0, 0, 0, 0, 
	0, 282, 0, 0, 0, 0, 0, 273, 
	0, 0, 0, 0, 0, 132, 0, 0, 
	0, 0, 0, 117, 0, 0, 0, 0, 
	276, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 270, 0, 0, 0, 0, 
	0, 0, 186, 0, 0, 0, 279, 0, 
	0, 0, 0, 141, 0, 0, 0, 138, 
	0, 0, 0, 0, 0, 0, 0, 162, 
	0, 0, 318, 0, 0, 0, 0, 0, 
	264, 0, 0, 243, 0, 0, 0, 0, 
	147, 0, 0, 294, 0, 0, 0, 0, 
	0, 288, 0, 123, 0, 0, 0, 180, 
	0, 0, 252, 0, 0, 0, 321, 0, 
	0, 0, 0, 171, 267, 0, 330, 0, 
	0, 0, 0, 0, 120, 297, 0, 0, 
	0, 0, 0, 255, 0, 0, 0, 174, 
	0, 0, 0, 150, 0, 0, 111, 0, 
	0, 0, 0, 0, 0, 0, 213, 0, 
	0, 0, 0, 129, 0, 0, 207, 0, 
	0, 0, 0, 165, 0, 0, 0, 168, 
	0, 0, 309, 47, 17
};

static const short _axl_jnc_to_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 3, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0
};

static const short _axl_jnc_from_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 5, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0
};

static const short _axl_jnc_eof_trans[] = {
	1, 1, 10, 10, 10, 1, 17, 0, 
	63, 64, 64, 66, 64, 64, 64, 70, 
	64, 64, 64, 64, 64, 80, 81, 84, 
	81, 85, 64, 64, 89, 64, 64, 94, 
	64, 1, 97, 97, 64, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 110, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 167, 97, 97, 97, 
	97, 97, 97, 97, 97, 180, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 224, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 264, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	64
};

static const int axl_jnc_start = 7;
static const int axl_jnc_first_final = 7;
static const int axl_jnc_error = -1;

static const int axl_jnc_en_main = 7;


/* #line 233 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */


//.............................................................................

void 
CLexer::Init ()
{
	
/* #line 1036 "axl_jnc_Lexer.cpp" */
	{
	cs = axl_jnc_start;
	ts = 0;
	te = 0;
	act = 0;
	}

/* #line 241 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
}

bool
CLexer::Exec ()
{
	
/* #line 1042 "axl_jnc_Lexer.cpp" */
	{
	int _klen;
	unsigned int _trans;
	const unsigned char *_acts;
	unsigned int _nacts;
	const char *_keys;

	if ( p == pe )
		goto _test_eof;
_resume:
	_acts = _axl_jnc_actions + _axl_jnc_from_state_actions[cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 2:
/* #line 1 "NONE" */
	{ts = p;}
	break;
/* #line 1059 "axl_jnc_Lexer.cpp" */
		}
	}

	_keys = _axl_jnc_trans_keys + _axl_jnc_key_offsets[cs];
	_trans = _axl_jnc_index_offsets[cs];

	_klen = _axl_jnc_single_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( (*p) < *_mid )
				_upper = _mid - 1;
			else if ( (*p) > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (unsigned int)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _axl_jnc_range_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( (*p) < _mid[0] )
				_upper = _mid - 2;
			else if ( (*p) > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += (unsigned int)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	_trans = _axl_jnc_indicies[_trans];
_eof_trans:
	cs = _axl_jnc_trans_targs[_trans];

	if ( _axl_jnc_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _axl_jnc_actions + _axl_jnc_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 0:
/* #line 44 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{ NewLine (p + 1); }
	break;
	case 3:
/* #line 1 "NONE" */
	{te = p+1;}
	break;
	case 4:
/* #line 60 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 1;}
	break;
	case 5:
/* #line 61 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 2;}
	break;
	case 6:
/* #line 62 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 3;}
	break;
	case 7:
/* #line 63 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 4;}
	break;
	case 8:
/* #line 69 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 5;}
	break;
	case 9:
/* #line 70 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 6;}
	break;
	case 10:
/* #line 71 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 7;}
	break;
	case 11:
/* #line 72 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 8;}
	break;
	case 12:
/* #line 73 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 9;}
	break;
	case 13:
/* #line 74 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 10;}
	break;
	case 14:
/* #line 76 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 11;}
	break;
	case 15:
/* #line 77 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 12;}
	break;
	case 16:
/* #line 78 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 13;}
	break;
	case 17:
/* #line 84 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 14;}
	break;
	case 18:
/* #line 85 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 15;}
	break;
	case 19:
/* #line 86 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 16;}
	break;
	case 20:
/* #line 87 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 17;}
	break;
	case 21:
/* #line 88 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 18;}
	break;
	case 22:
/* #line 89 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 19;}
	break;
	case 23:
/* #line 90 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 20;}
	break;
	case 24:
/* #line 91 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 21;}
	break;
	case 25:
/* #line 92 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 22;}
	break;
	case 26:
/* #line 93 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 23;}
	break;
	case 27:
/* #line 94 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 24;}
	break;
	case 28:
/* #line 95 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 25;}
	break;
	case 29:
/* #line 96 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 26;}
	break;
	case 30:
/* #line 97 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 27;}
	break;
	case 31:
/* #line 98 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 28;}
	break;
	case 32:
/* #line 99 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 29;}
	break;
	case 33:
/* #line 100 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 30;}
	break;
	case 34:
/* #line 101 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 31;}
	break;
	case 35:
/* #line 102 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 32;}
	break;
	case 36:
/* #line 103 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 33;}
	break;
	case 37:
/* #line 110 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 35;}
	break;
	case 38:
/* #line 111 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 36;}
	break;
	case 39:
/* #line 112 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 37;}
	break;
	case 40:
/* #line 113 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 38;}
	break;
	case 41:
/* #line 114 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 39;}
	break;
	case 42:
/* #line 115 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 40;}
	break;
	case 43:
/* #line 116 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 41;}
	break;
	case 44:
/* #line 117 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 42;}
	break;
	case 45:
/* #line 118 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 43;}
	break;
	case 46:
/* #line 119 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 44;}
	break;
	case 47:
/* #line 121 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 46;}
	break;
	case 48:
/* #line 122 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 47;}
	break;
	case 49:
/* #line 123 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 48;}
	break;
	case 50:
/* #line 124 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 49;}
	break;
	case 51:
/* #line 131 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 51;}
	break;
	case 52:
/* #line 132 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 52;}
	break;
	case 53:
/* #line 133 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 53;}
	break;
	case 54:
/* #line 134 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 54;}
	break;
	case 55:
/* #line 140 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 55;}
	break;
	case 56:
/* #line 141 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 56;}
	break;
	case 57:
/* #line 142 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 57;}
	break;
	case 58:
/* #line 143 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 58;}
	break;
	case 59:
/* #line 144 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 59;}
	break;
	case 60:
/* #line 145 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 60;}
	break;
	case 61:
/* #line 146 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 61;}
	break;
	case 62:
/* #line 147 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 62;}
	break;
	case 63:
/* #line 153 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 63;}
	break;
	case 64:
/* #line 154 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 64;}
	break;
	case 65:
/* #line 155 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 65;}
	break;
	case 66:
/* #line 156 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 66;}
	break;
	case 67:
/* #line 157 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 67;}
	break;
	case 68:
/* #line 163 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 68;}
	break;
	case 69:
/* #line 164 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 69;}
	break;
	case 70:
/* #line 165 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 70;}
	break;
	case 71:
/* #line 166 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 71;}
	break;
	case 72:
/* #line 168 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 73;}
	break;
	case 73:
/* #line 169 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 74;}
	break;
	case 74:
/* #line 170 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 75;}
	break;
	case 75:
/* #line 171 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 76;}
	break;
	case 76:
/* #line 172 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 77;}
	break;
	case 77:
/* #line 173 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 78;}
	break;
	case 78:
/* #line 179 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 79;}
	break;
	case 79:
/* #line 180 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 80;}
	break;
	case 80:
/* #line 216 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 106;}
	break;
	case 81:
/* #line 217 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 107;}
	break;
	case 82:
/* #line 218 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 108;}
	break;
	case 83:
/* #line 219 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 109;}
	break;
	case 84:
/* #line 229 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 115;}
	break;
	case 85:
/* #line 187 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Inc); }}
	break;
	case 86:
/* #line 188 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Dec); }}
	break;
	case 87:
/* #line 189 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Ptr); }}
	break;
	case 88:
/* #line 192 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_LogAnd); }}
	break;
	case 89:
/* #line 193 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_LogOr); }}
	break;
	case 90:
/* #line 194 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Eq); }}
	break;
	case 91:
/* #line 195 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Ne); }}
	break;
	case 92:
/* #line 196 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Le); }}
	break;
	case 93:
/* #line 197 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Ge); }}
	break;
	case 94:
/* #line 198 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_ClassAssign); }}
	break;
	case 95:
/* #line 199 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_AddAssign); }}
	break;
	case 96:
/* #line 200 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_SubAssign); }}
	break;
	case 97:
/* #line 201 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_MulAssign); }}
	break;
	case 98:
/* #line 202 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_DivAssign); }}
	break;
	case 99:
/* #line 203 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_ModAssign); }}
	break;
	case 100:
/* #line 204 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_ShlAssign); }}
	break;
	case 101:
/* #line 205 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_ShrAssign); }}
	break;
	case 102:
/* #line 206 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_AndAssign); }}
	break;
	case 103:
/* #line 207 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_XorAssign); }}
	break;
	case 104:
/* #line 208 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_OrAssign); }}
	break;
	case 105:
/* #line 209 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_AtAssign); }}
	break;
	case 106:
/* #line 210 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Ellipsis); }}
	break;
	case 107:
/* #line 217 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateCharToken (EToken_Integer); }}
	break;
	case 108:
/* #line 218 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateStringToken (EToken_Literal, 1, 1); }}
	break;
	case 109:
/* #line 225 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;}
	break;
	case 110:
/* #line 227 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;}
	break;
	case 111:
/* #line 229 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (ts [0]); }}
	break;
	case 112:
/* #line 109 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateToken (EToken_Auto); }}
	break;
	case 113:
/* #line 120 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateToken (EToken_Int); }}
	break;
	case 114:
/* #line 130 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateToken (EToken_Enum); }}
	break;
	case 115:
/* #line 167 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateToken (EToken_Do); }}
	break;
	case 116:
/* #line 181 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateToken (EToken_Null); }}
	break;
	case 117:
/* #line 190 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateToken (EToken_Shl); }}
	break;
	case 118:
/* #line 191 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateToken (EToken_Shr); }}
	break;
	case 119:
/* #line 216 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateStringToken (EToken_Identifier); }}
	break;
	case 120:
/* #line 217 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateCharToken (EToken_Integer); }}
	break;
	case 121:
/* #line 218 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateStringToken (EToken_Literal, 1, 1); }}
	break;
	case 122:
/* #line 219 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateIntegerToken (10); }}
	break;
	case 123:
/* #line 220 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateIntegerToken (16, 2); }}
	break;
	case 124:
/* #line 222 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateFpToken (); }}
	break;
	case 125:
/* #line 224 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;}
	break;
	case 126:
/* #line 227 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;}
	break;
	case 127:
/* #line 229 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateToken (ts [0]); }}
	break;
	case 128:
/* #line 219 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{{p = ((te))-1;}{ CreateIntegerToken (10); }}
	break;
	case 129:
/* #line 229 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{{p = ((te))-1;}{ CreateToken (ts [0]); }}
	break;
	case 130:
/* #line 1 "NONE" */
	{	switch( act ) {
	case 1:
	{{p = ((te))-1;} CreateToken (EToken_Namespace); }
	break;
	case 2:
	{{p = ((te))-1;} CreateToken (EToken_Using); }
	break;
	case 3:
	{{p = ((te))-1;} CreateToken (EToken_Extend); }
	break;
	case 4:
	{{p = ((te))-1;} CreateToken (EToken_Pack); }
	break;
	case 5:
	{{p = ((te))-1;} CreateToken (EToken_Typedef); }
	break;
	case 6:
	{{p = ((te))-1;} CreateToken (EToken_Static); }
	break;
	case 7:
	{{p = ((te))-1;} CreateToken (EToken_Abstract); }
	break;
	case 8:
	{{p = ((te))-1;} CreateToken (EToken_Virtual); }
	break;
	case 9:
	{{p = ((te))-1;} CreateToken (EToken_Override); }
	break;
	case 10:
	{{p = ((te))-1;} CreateToken (EToken_Mutable); }
	break;
	case 11:
	{{p = ((te))-1;} CreateToken (EToken_Public); }
	break;
	case 12:
	{{p = ((te))-1;} CreateToken (EToken_Protected); }
	break;
	case 13:
	{{p = ((te))-1;} CreateToken (EToken_Friend); }
	break;
	case 14:
	{{p = ((te))-1;} CreateToken (EToken_Signed); }
	break;
	case 15:
	{{p = ((te))-1;} CreateToken (EToken_Unsigned); }
	break;
	case 16:
	{{p = ((te))-1;} CreateToken (EToken_BigEndian); }
	break;
	case 17:
	{{p = ((te))-1;} CreateToken (EToken_Nullable); }
	break;
	case 18:
	{{p = ((te))-1;} CreateToken (EToken_Const); }
	break;
	case 19:
	{{p = ((te))-1;} CreateToken (EToken_ReadOnly); }
	break;
	case 20:
	{{p = ((te))-1;} CreateToken (EToken_Volatile); }
	break;
	case 21:
	{{p = ((te))-1;} CreateToken (EToken_Weak); }
	break;
	case 22:
	{{p = ((te))-1;} CreateToken (EToken_Thin); }
	break;
	case 23:
	{{p = ((te))-1;} CreateToken (EToken_Unsafe); }
	break;
	case 24:
	{{p = ((te))-1;} CreateToken (EToken_Cdecl); }
	break;
	case 25:
	{{p = ((te))-1;} CreateToken (EToken_Stdcall); }
	break;
	case 26:
	{{p = ((te))-1;} CreateToken (EToken_Function); }
	break;
	case 27:
	{{p = ((te))-1;} CreateToken (EToken_Property); }
	break;
	case 28:
	{{p = ((te))-1;} CreateToken (EToken_Multicast); }
	break;
	case 29:
	{{p = ((te))-1;} CreateToken (EToken_Event); }
	break;
	case 30:
	{{p = ((te))-1;} CreateToken (EToken_AutoEv); }
	break;
	case 31:
	{{p = ((te))-1;} CreateToken (EToken_Bindable); }
	break;
	case 32:
	{{p = ((te))-1;} CreateToken (EToken_AutoGet); }
	break;
	case 33:
	{{p = ((te))-1;} CreateToken (EToken_Indexed); }
	break;
	case 35:
	{{p = ((te))-1;} CreateToken (EToken_Void); }
	break;
	case 36:
	{{p = ((te))-1;} CreateToken (EToken_Object); }
	break;
	case 37:
	{{p = ((te))-1;} CreateToken (EToken_Variant); }
	break;
	case 38:
	{{p = ((te))-1;} CreateToken (EToken_Bool); }
	break;
	case 39:
	{{p = ((te))-1;} CreateToken (EToken_Int8); }
	break;
	case 40:
	{{p = ((te))-1;} CreateToken (EToken_Int16); }
	break;
	case 41:
	{{p = ((te))-1;} CreateToken (EToken_Int32); }
	break;
	case 42:
	{{p = ((te))-1;} CreateToken (EToken_Int64); }
	break;
	case 43:
	{{p = ((te))-1;} CreateToken (EToken_Float); }
	break;
	case 44:
	{{p = ((te))-1;} CreateToken (EToken_Double); }
	break;
	case 46:
	{{p = ((te))-1;} CreateToken (EToken_IntPtr); }
	break;
	case 47:
	{{p = ((te))-1;} CreateToken (EToken_Char); }
	break;
	case 48:
	{{p = ((te))-1;} CreateToken (EToken_Short); }
	break;
	case 49:
	{{p = ((te))-1;} CreateToken (EToken_Long); }
	break;
	case 51:
	{{p = ((te))-1;} CreateToken (EToken_EnumC); }
	break;
	case 52:
	{{p = ((te))-1;} CreateToken (EToken_Struct); }
	break;
	case 53:
	{{p = ((te))-1;} CreateToken (EToken_Union); }
	break;
	case 54:
	{{p = ((te))-1;} CreateToken (EToken_Class); }
	break;
	case 55:
	{{p = ((te))-1;} CreateToken (EToken_Get); }
	break;
	case 56:
	{{p = ((te))-1;} CreateToken (EToken_Set); }
	break;
	case 57:
	{{p = ((te))-1;} CreateToken (EToken_This); }
	break;
	case 58:
	{{p = ((te))-1;} CreateToken (EToken_PreConstruct); }
	break;
	case 59:
	{{p = ((te))-1;} CreateToken (EToken_Operator); }
	break;
	case 60:
	{{p = ((te))-1;} CreateToken (EToken_Postfix); }
	break;
	case 61:
	{{p = ((te))-1;} CreateToken (EToken_PropValue); }
	break;
	case 62:
	{{p = ((te))-1;} CreateToken (EToken_OnChange); }
	break;
	case 63:
	{{p = ((te))-1;} CreateToken (EToken_New); }
	break;
	case 64:
	{{p = ((te))-1;} CreateToken (EToken_Stack); }
	break;
	case 65:
	{{p = ((te))-1;} CreateToken (EToken_Heap); }
	break;
	case 66:
	{{p = ((te))-1;} CreateToken (EToken_SizeOf); }
	break;
	case 67:
	{{p = ((te))-1;} CreateToken (EToken_TypeOf); }
	break;
	case 68:
	{{p = ((te))-1;} CreateToken (EToken_If); }
	break;
	case 69:
	{{p = ((te))-1;} CreateToken (EToken_Else); }
	break;
	case 70:
	{{p = ((te))-1;} CreateToken (EToken_For); }
	break;
	case 71:
	{{p = ((te))-1;} CreateToken (EToken_While); }
	break;
	case 73:
	{{p = ((te))-1;} CreateToken (EToken_Break); }
	break;
	case 74:
	{{p = ((te))-1;} CreateToken (EToken_Continue); }
	break;
	case 75:
	{{p = ((te))-1;} CreateToken (EToken_Return); }
	break;
	case 76:
	{{p = ((te))-1;} CreateToken (EToken_Switch); }
	break;
	case 77:
	{{p = ((te))-1;} CreateToken (EToken_Case); }
	break;
	case 78:
	{{p = ((te))-1;} CreateToken (EToken_Default); }
	break;
	case 79:
	{{p = ((te))-1;} CreateToken (EToken_True); }
	break;
	case 80:
	{{p = ((te))-1;} CreateToken (EToken_False); }
	break;
	case 106:
	{{p = ((te))-1;} CreateStringToken (EToken_Identifier); }
	break;
	case 107:
	{{p = ((te))-1;} CreateCharToken (EToken_Integer); }
	break;
	case 108:
	{{p = ((te))-1;} CreateStringToken (EToken_Literal, 1, 1); }
	break;
	case 109:
	{{p = ((te))-1;} CreateIntegerToken (10); }
	break;
	case 115:
	{{p = ((te))-1;} CreateToken (ts [0]); }
	break;
	}
	}
	break;
/* #line 1756 "axl_jnc_Lexer.cpp" */
		}
	}

_again:
	_acts = _axl_jnc_actions + _axl_jnc_to_state_actions[cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 1:
/* #line 1 "NONE" */
	{ts = 0;}
	break;
/* #line 1767 "axl_jnc_Lexer.cpp" */
		}
	}

	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	if ( _axl_jnc_eof_trans[cs] > 0 ) {
		_trans = _axl_jnc_eof_trans[cs] - 1;
		goto _eof_trans;
	}
	}

	}

/* #line 247 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */

	bool Result = cs != axl_jnc_error;
	if (!Result)
	{
		CToken* pToken = CreateToken (EToken_Error);
		pToken->m_Data.m_Error = err::CError ("lexer error");
	}

	return Result;
}

//.............................................................................

} // namespace jnc {
} // namespace axl {
