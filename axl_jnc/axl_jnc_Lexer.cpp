
/* #line 1 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
#include "stdafx.h"
#include "axl_jnc_Lexer.h"

// warning C4065: switch statement contains 'default' but no 'case' labels

#pragma warning (disable: 4065)

namespace axl {
namespace jnc {

//.............................................................................


/* #line 2 "axl_jnc_Lexer.cpp" */
static const unsigned char _axl_jnc_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 87, 1, 88, 1, 89, 1, 
	90, 1, 91, 1, 92, 1, 93, 1, 
	94, 1, 95, 1, 96, 1, 97, 1, 
	98, 1, 99, 1, 100, 1, 101, 1, 
	102, 1, 103, 1, 104, 1, 105, 1, 
	106, 1, 107, 1, 108, 1, 109, 1, 
	110, 1, 111, 1, 113, 1, 114, 1, 
	115, 1, 116, 1, 117, 1, 118, 1, 
	119, 1, 120, 1, 121, 1, 122, 1, 
	123, 1, 124, 1, 125, 1, 126, 1, 
	127, 1, 128, 1, 129, 1, 130, 1, 
	131, 2, 0, 109, 2, 0, 110, 2, 
	0, 112, 2, 3, 4, 2, 3, 5, 
	2, 3, 6, 2, 3, 7, 2, 3, 
	8, 2, 3, 9, 2, 3, 10, 2, 
	3, 11, 2, 3, 12, 2, 3, 13, 
	2, 3, 14, 2, 3, 15, 2, 3, 
	16, 2, 3, 17, 2, 3, 18, 2, 
	3, 19, 2, 3, 20, 2, 3, 21, 
	2, 3, 22, 2, 3, 23, 2, 3, 
	24, 2, 3, 25, 2, 3, 26, 2, 
	3, 27, 2, 3, 28, 2, 3, 29, 
	2, 3, 30, 2, 3, 31, 2, 3, 
	32, 2, 3, 33, 2, 3, 34, 2, 
	3, 35, 2, 3, 36, 2, 3, 37, 
	2, 3, 38, 2, 3, 39, 2, 3, 
	40, 2, 3, 41, 2, 3, 42, 2, 
	3, 43, 2, 3, 44, 2, 3, 45, 
	2, 3, 46, 2, 3, 47, 2, 3, 
	48, 2, 3, 49, 2, 3, 50, 2, 
	3, 51, 2, 3, 52, 2, 3, 53, 
	2, 3, 54, 2, 3, 55, 2, 3, 
	56, 2, 3, 57, 2, 3, 58, 2, 
	3, 59, 2, 3, 60, 2, 3, 61, 
	2, 3, 62, 2, 3, 63, 2, 3, 
	64, 2, 3, 65, 2, 3, 66, 2, 
	3, 67, 2, 3, 68, 2, 3, 69, 
	2, 3, 70, 2, 3, 71, 2, 3, 
	72, 2, 3, 73, 2, 3, 74, 2, 
	3, 75, 2, 3, 76, 2, 3, 77, 
	2, 3, 78, 2, 3, 79, 2, 3, 
	80, 2, 3, 81, 2, 3, 82, 2, 
	3, 83, 2, 3, 84, 2, 3, 85, 
	2, 3, 86
};

static const short _axl_jnc_key_offsets[] = {
	0, 3, 6, 7, 9, 12, 18, 66, 
	69, 70, 73, 74, 75, 77, 80, 81, 
	82, 84, 87, 88, 91, 92, 96, 98, 
	104, 105, 107, 108, 109, 111, 112, 113, 
	120, 121, 129, 137, 145, 154, 162, 170, 
	178, 188, 197, 205, 213, 221, 229, 237, 
	245, 253, 261, 269, 277, 285, 293, 301, 
	309, 317, 325, 337, 345, 353, 361, 369, 
	377, 385, 393, 402, 410, 418, 426, 434, 
	442, 450, 458, 467, 475, 483, 491, 499, 
	507, 517, 525, 533, 541, 549, 557, 565, 
	573, 581, 589, 597, 605, 613, 621, 629, 
	639, 647, 655, 664, 672, 680, 688, 696, 
	704, 712, 720, 728, 739, 747, 755, 763, 
	771, 779, 787, 795, 803, 811, 819, 827, 
	835, 843, 851, 859, 867, 875, 883, 892, 
	901, 909, 917, 925, 933, 945, 953, 961, 
	969, 977, 985, 993, 1001, 1009, 1018, 1026, 
	1034, 1042, 1050, 1058, 1066, 1074, 1082, 1090, 
	1098, 1106, 1114, 1125, 1133, 1141, 1149, 1157, 
	1165, 1173, 1181, 1189, 1198, 1206, 1214, 1222, 
	1230, 1238, 1246, 1254, 1262, 1270, 1278, 1286, 
	1296, 1304, 1312, 1320, 1328, 1336, 1344, 1352, 
	1360, 1368, 1376, 1384, 1392, 1400, 1408, 1416, 
	1424, 1435, 1443, 1451, 1459, 1467, 1475, 1483, 
	1491, 1500, 1508, 1516, 1524, 1532, 1540, 1548, 
	1556, 1564, 1572, 1581, 1590, 1598, 1606, 1614, 
	1622, 1630, 1638, 1646, 1654, 1662, 1670, 1678, 
	1686, 1694, 1702, 1710, 1718, 1726, 1734, 1742, 
	1750, 1758, 1766, 1774, 1782, 1790, 1804, 1812, 
	1820, 1828, 1836, 1844, 1852, 1861, 1869, 1877, 
	1885, 1893, 1901, 1909, 1917, 1925, 1933, 1941, 
	1949, 1957, 1967, 1976, 1984, 1992, 2000, 2008, 
	2016, 2024, 2032, 2041, 2049, 2057, 2065, 2073, 
	2081, 2089, 2097, 2105, 2115, 2123, 2132, 2140, 
	2148, 2156, 2164, 2173, 2181, 2189, 2197, 2206, 
	2215, 2223, 2231, 2240, 2248, 2256, 2264, 2272, 
	2280, 2288, 2296, 2304, 2312, 2322, 2330, 2338, 
	2346, 2354, 2362, 2370, 2378, 2386, 2394, 2402, 
	2411, 2419, 2427, 2435, 2443, 2451, 2459, 2469, 
	2477, 2485, 2493, 2500, 2508, 2516, 2524, 2532, 
	2540, 2548
};

static const char _axl_jnc_trans_keys[] = {
	10, 34, 92, 10, 39, 92, 46, 10, 
	42, 10, 42, 47, 48, 57, 65, 70, 
	97, 102, 9, 10, 13, 32, 33, 34, 
	37, 38, 39, 42, 43, 45, 46, 47, 
	48, 58, 60, 61, 62, 64, 94, 95, 
	97, 98, 99, 100, 101, 102, 103, 104, 
	105, 108, 110, 111, 112, 114, 115, 116, 
	117, 118, 119, 124, 49, 57, 65, 90, 
	106, 122, 9, 13, 32, 61, 10, 34, 
	92, 10, 61, 38, 61, 10, 39, 92, 
	10, 61, 43, 61, 45, 61, 62, 46, 
	42, 47, 61, 10, 88, 120, 48, 57, 
	48, 57, 48, 57, 65, 70, 97, 102, 
	61, 60, 61, 61, 61, 61, 62, 61, 
	61, 95, 48, 57, 65, 90, 97, 122, 
	61, 95, 117, 48, 57, 65, 90, 97, 
	122, 95, 116, 48, 57, 65, 90, 97, 
	122, 95, 111, 48, 57, 65, 90, 97, 
	122, 95, 101, 103, 48, 57, 65, 90, 
	97, 122, 95, 118, 48, 57, 65, 90, 
	97, 122, 95, 101, 48, 57, 65, 90, 
	97, 122, 95, 116, 48, 57, 65, 90, 
	97, 122, 95, 105, 111, 114, 48, 57, 
	65, 90, 97, 122, 95, 103, 110, 48, 
	57, 65, 90, 97, 122, 95, 101, 48, 
	57, 65, 90, 97, 122, 95, 110, 48, 
	57, 65, 90, 97, 122, 95, 100, 48, 
	57, 65, 90, 97, 122, 95, 105, 48, 
	57, 65, 90, 97, 122, 95, 97, 48, 
	57, 65, 90, 98, 122, 95, 110, 48, 
	57, 65, 90, 97, 122, 95, 100, 48, 
	57, 65, 90, 97, 122, 95, 97, 48, 
	57, 65, 90, 98, 122, 95, 98, 48, 
	57, 65, 90, 97, 122, 95, 108, 48, 
	57, 65, 90, 97, 122, 95, 101, 48, 
	57, 65, 90, 97, 122, 95, 111, 48, 
	57, 65, 90, 97, 122, 95, 108, 48, 
	57, 65, 90, 97, 122, 95, 101, 48, 
	57, 65, 90, 97, 122, 95, 97, 48, 
	57, 65, 90, 98, 122, 95, 107, 48, 
	57, 65, 90, 97, 122, 95, 97, 100, 
	104, 108, 111, 48, 57, 65, 90, 98, 
	122, 95, 115, 48, 57, 65, 90, 97, 
	122, 95, 101, 48, 57, 65, 90, 97, 
	122, 95, 101, 48, 57, 65, 90, 97, 
	122, 95, 99, 48, 57, 65, 90, 97, 
	122, 95, 108, 48, 57, 65, 90, 97, 
	122, 95, 97, 48, 57, 65, 90, 98, 
	122, 95, 114, 48, 57, 65, 90, 97, 
	122, 95, 97, 111, 48, 57, 65, 90, 
	98, 122, 95, 115, 48, 57, 65, 90, 
	97, 122, 95, 115, 48, 57, 65, 90, 
	97, 122, 95, 115, 48, 57, 65, 90, 
	97, 122, 95, 117, 48, 57, 65, 90, 
	97, 122, 95, 114, 48, 57, 65, 90, 
	97, 122, 95, 101, 48, 57, 65, 90, 
	97, 122, 95, 110, 48, 57, 65, 90, 
	97, 122, 95, 115, 116, 48, 57, 65, 
	90, 97, 122, 95, 116, 48, 57, 65, 
	90, 97, 122, 95, 105, 48, 57, 65, 
	90, 97, 122, 95, 110, 48, 57, 65, 
	90, 97, 122, 95, 117, 48, 57, 65, 
	90, 97, 122, 95, 101, 48, 57, 65, 
	90, 97, 122, 95, 101, 111, 121, 48, 
	57, 65, 90, 97, 122, 95, 102, 48, 
	57, 65, 90, 97, 122, 95, 97, 48, 
	57, 65, 90, 98, 122, 95, 117, 48, 
	57, 65, 90, 97, 122, 95, 108, 48, 
	57, 65, 90, 97, 122, 95, 116, 48, 
	57, 65, 90, 97, 122, 95, 117, 48, 
	57, 65, 90, 97, 122, 95, 98, 48, 
	57, 65, 90, 97, 122, 95, 108, 48, 
	57, 65, 90, 97, 122, 95, 101, 48, 
	57, 65, 90, 97, 122, 95, 110, 48, 
	57, 65, 90, 97, 122, 95, 97, 48, 
	57, 65, 90, 98, 122, 95, 109, 48, 
	57, 65, 90, 97, 122, 95, 105, 48, 
	57, 65, 90, 97, 122, 95, 99, 48, 
	57, 65, 90, 97, 122, 95, 108, 110, 
	118, 48, 57, 65, 90, 97, 122, 95, 
	115, 48, 57, 65, 90, 97, 122, 95, 
	101, 48, 57, 65, 90, 97, 122, 95, 
	100, 117, 48, 57, 65, 90, 97, 122, 
	95, 105, 48, 57, 65, 90, 97, 122, 
	95, 97, 48, 57, 65, 90, 98, 122, 
	95, 110, 48, 57, 65, 90, 97, 122, 
	95, 109, 48, 57, 65, 90, 97, 122, 
	95, 99, 48, 57, 65, 90, 97, 122, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	95, 110, 48, 57, 65, 90, 97, 122, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	95, 97, 108, 111, 117, 48, 57, 65, 
	90, 98, 122, 95, 108, 48, 57, 65, 
	90, 97, 122, 95, 115, 48, 57, 65, 
	90, 97, 122, 95, 101, 48, 57, 65, 
	90, 97, 122, 95, 111, 48, 57, 65, 
	90, 97, 122, 95, 97, 48, 57, 65, 
	90, 98, 122, 95, 116, 48, 57, 65, 
	90, 97, 122, 95, 114, 48, 57, 65, 
	90, 97, 122, 95, 110, 48, 57, 65, 
	90, 97, 122, 95, 99, 48, 57, 65, 
	90, 97, 122, 95, 116, 48, 57, 65, 
	90, 97, 122, 95, 105, 48, 57, 65, 
	90, 97, 122, 95, 111, 48, 57, 65, 
	90, 97, 122, 95, 110, 48, 57, 65, 
	90, 97, 122, 95, 101, 48, 57, 65, 
	90, 97, 122, 95, 116, 48, 57, 65, 
	90, 97, 122, 95, 101, 48, 57, 65, 
	90, 97, 122, 95, 97, 48, 57, 65, 
	90, 98, 122, 95, 112, 48, 57, 65, 
	90, 97, 122, 95, 102, 110, 48, 57, 
	65, 90, 97, 122, 95, 100, 116, 48, 
	57, 65, 90, 97, 122, 95, 101, 48, 
	57, 65, 90, 97, 122, 95, 120, 48, 
	57, 65, 90, 97, 122, 95, 101, 48, 
	57, 65, 90, 97, 122, 95, 100, 48, 
	57, 65, 90, 97, 122, 49, 51, 54, 
	56, 95, 101, 48, 57, 65, 90, 97, 
	122, 54, 95, 48, 57, 65, 90, 97, 
	122, 50, 95, 48, 57, 65, 90, 97, 
	122, 52, 95, 48, 57, 65, 90, 97, 
	122, 95, 114, 48, 57, 65, 90, 97, 
	122, 95, 102, 48, 57, 65, 90, 97, 
	122, 95, 97, 48, 57, 65, 90, 98, 
	122, 95, 99, 48, 57, 65, 90, 97, 
	122, 95, 101, 48, 57, 65, 90, 97, 
	122, 95, 105, 111, 48, 57, 65, 90, 
	97, 122, 95, 116, 48, 57, 65, 90, 
	97, 122, 95, 116, 48, 57, 65, 90, 
	97, 122, 95, 108, 48, 57, 65, 90, 
	97, 122, 95, 101, 48, 57, 65, 90, 
	97, 122, 95, 101, 48, 57, 65, 90, 
	97, 122, 95, 110, 48, 57, 65, 90, 
	97, 122, 95, 100, 48, 57, 65, 90, 
	97, 122, 95, 105, 48, 57, 65, 90, 
	97, 122, 95, 97, 48, 57, 65, 90, 
	98, 122, 95, 110, 48, 57, 65, 90, 
	97, 122, 95, 110, 48, 57, 65, 90, 
	97, 122, 95, 103, 48, 57, 65, 90, 
	97, 122, 95, 97, 101, 111, 117, 48, 
	57, 65, 90, 98, 122, 95, 109, 48, 
	57, 65, 90, 97, 122, 95, 101, 48, 
	57, 65, 90, 97, 122, 95, 115, 48, 
	57, 65, 90, 97, 122, 95, 112, 48, 
	57, 65, 90, 97, 122, 95, 97, 48, 
	57, 65, 90, 98, 122, 95, 99, 48, 
	57, 65, 90, 97, 122, 95, 101, 48, 
	57, 65, 90, 97, 122, 95, 119, 48, 
	57, 65, 90, 97, 122, 95, 110, 118, 
	48, 57, 65, 90, 97, 122, 95, 117, 
	48, 57, 65, 90, 97, 122, 95, 108, 
	48, 57, 65, 90, 97, 122, 95, 108, 
	48, 57, 65, 90, 97, 122, 95, 105, 
	48, 57, 65, 90, 97, 122, 95, 114, 
	48, 57, 65, 90, 97, 122, 95, 116, 
	48, 57, 65, 90, 97, 122, 95, 117, 
	48, 57, 65, 90, 97, 122, 95, 97, 
	48, 57, 65, 90, 98, 122, 95, 108, 
	48, 57, 65, 90, 97, 122, 95, 108, 
	48, 57, 65, 90, 97, 122, 95, 108, 
	48, 57, 65, 90, 97, 122, 95, 98, 
	110, 112, 48, 57, 65, 90, 97, 122, 
	95, 106, 48, 57, 65, 90, 97, 122, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	95, 99, 48, 57, 65, 90, 97, 122, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	95, 99, 48, 57, 65, 90, 97, 122, 
	95, 104, 48, 57, 65, 90, 97, 122, 
	95, 97, 48, 57, 65, 90, 98, 122, 
	95, 110, 48, 57, 65, 90, 97, 122, 
	95, 103, 48, 57, 65, 90, 97, 122, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	95, 114, 48, 57, 65, 90, 97, 122, 
	95, 97, 48, 57, 65, 90, 98, 122, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	95, 111, 48, 57, 65, 90, 97, 122, 
	95, 114, 48, 57, 65, 90, 97, 122, 
	95, 97, 111, 114, 117, 48, 57, 65, 
	90, 98, 122, 95, 99, 48, 57, 65, 
	90, 97, 122, 95, 107, 48, 57, 65, 
	90, 97, 122, 95, 115, 48, 57, 65, 
	90, 97, 122, 95, 116, 48, 57, 65, 
	90, 97, 122, 95, 102, 48, 57, 65, 
	90, 97, 122, 95, 105, 48, 57, 65, 
	90, 97, 122, 95, 120, 48, 57, 65, 
	90, 97, 122, 95, 101, 111, 48, 57, 
	65, 90, 97, 122, 95, 99, 48, 57, 
	65, 90, 97, 122, 95, 111, 48, 57, 
	65, 90, 97, 122, 95, 110, 48, 57, 
	65, 90, 97, 122, 95, 115, 48, 57, 
	65, 90, 97, 122, 95, 116, 48, 57, 
	65, 90, 97, 122, 95, 114, 48, 57, 
	65, 90, 97, 122, 95, 117, 48, 57, 
	65, 90, 97, 122, 95, 99, 48, 57, 
	65, 90, 97, 122, 95, 116, 48, 57, 
	65, 90, 97, 122, 95, 112, 116, 48, 
	57, 65, 90, 97, 122, 95, 101, 118, 
	48, 57, 65, 90, 97, 122, 95, 114, 
	48, 57, 65, 90, 97, 122, 95, 116, 
	48, 57, 65, 90, 97, 122, 95, 121, 
	48, 57, 65, 90, 97, 122, 95, 97, 
	48, 57, 65, 90, 98, 122, 95, 108, 
	48, 57, 65, 90, 97, 122, 95, 117, 
	48, 57, 65, 90, 97, 122, 95, 101, 
	48, 57, 65, 90, 97, 122, 95, 101, 
	48, 57, 65, 90, 97, 122, 95, 99, 
	48, 57, 65, 90, 97, 122, 95, 116, 
	48, 57, 65, 90, 97, 122, 95, 101, 
	48, 57, 65, 90, 97, 122, 95, 100, 
	48, 57, 65, 90, 97, 122, 95, 98, 
	48, 57, 65, 90, 97, 122, 95, 108, 
	48, 57, 65, 90, 97, 122, 95, 105, 
	48, 57, 65, 90, 97, 122, 95, 99, 
	48, 57, 65, 90, 97, 122, 95, 114, 
	48, 57, 65, 90, 97, 122, 95, 101, 
	48, 57, 65, 90, 97, 122, 95, 97, 
	48, 57, 65, 90, 98, 122, 95, 100, 
	48, 57, 65, 90, 97, 122, 95, 101, 
	48, 57, 65, 90, 97, 122, 95, 116, 
	48, 57, 65, 90, 97, 122, 95, 117, 
	48, 57, 65, 90, 97, 122, 95, 114, 
	48, 57, 65, 90, 97, 122, 95, 110, 
	48, 57, 65, 90, 97, 122, 95, 97, 
	101, 104, 105, 110, 116, 119, 48, 57, 
	65, 90, 98, 122, 95, 102, 48, 57, 
	65, 90, 97, 122, 95, 101, 48, 57, 
	65, 90, 97, 122, 95, 116, 48, 57, 
	65, 90, 97, 122, 95, 111, 48, 57, 
	65, 90, 97, 122, 95, 114, 48, 57, 
	65, 90, 97, 122, 95, 116, 48, 57, 
	65, 90, 97, 122, 95, 103, 122, 48, 
	57, 65, 90, 97, 121, 95, 110, 48, 
	57, 65, 90, 97, 122, 95, 101, 48, 
	57, 65, 90, 97, 122, 95, 100, 48, 
	57, 65, 90, 97, 122, 95, 101, 48, 
	57, 65, 90, 97, 122, 95, 111, 48, 
	57, 65, 90, 97, 122, 95, 102, 48, 
	57, 65, 90, 97, 122, 95, 97, 48, 
	57, 65, 90, 98, 122, 95, 112, 48, 
	57, 65, 90, 97, 122, 95, 115, 48, 
	57, 65, 90, 97, 122, 95, 104, 48, 
	57, 65, 90, 97, 122, 95, 111, 48, 
	57, 65, 90, 97, 122, 95, 116, 48, 
	57, 65, 90, 97, 122, 95, 97, 100, 
	114, 48, 57, 65, 90, 98, 122, 95, 
	99, 116, 48, 57, 65, 90, 97, 122, 
	95, 107, 48, 57, 65, 90, 97, 122, 
	95, 105, 48, 57, 65, 90, 97, 122, 
	95, 99, 48, 57, 65, 90, 97, 122, 
	95, 99, 48, 57, 65, 90, 97, 122, 
	95, 97, 48, 57, 65, 90, 98, 122, 
	95, 108, 48, 57, 65, 90, 97, 122, 
	95, 108, 48, 57, 65, 90, 97, 122, 
	95, 111, 117, 48, 57, 65, 90, 97, 
	122, 95, 110, 48, 57, 65, 90, 97, 
	122, 95, 103, 48, 57, 65, 90, 97, 
	122, 95, 99, 48, 57, 65, 90, 97, 
	122, 95, 116, 48, 57, 65, 90, 97, 
	122, 95, 105, 48, 57, 65, 90, 97, 
	122, 95, 116, 48, 57, 65, 90, 97, 
	122, 95, 99, 48, 57, 65, 90, 97, 
	122, 95, 104, 48, 57, 65, 90, 97, 
	122, 95, 104, 114, 121, 48, 57, 65, 
	90, 97, 122, 95, 105, 48, 57, 65, 
	90, 97, 122, 95, 110, 115, 48, 57, 
	65, 90, 97, 122, 95, 117, 48, 57, 
	65, 90, 97, 122, 95, 101, 48, 57, 
	65, 90, 97, 122, 95, 112, 48, 57, 
	65, 90, 97, 122, 95, 101, 48, 57, 
	65, 90, 97, 122, 95, 100, 111, 48, 
	57, 65, 90, 97, 122, 95, 101, 48, 
	57, 65, 90, 97, 122, 95, 102, 48, 
	57, 65, 90, 97, 122, 95, 102, 48, 
	57, 65, 90, 97, 122, 95, 110, 115, 
	48, 57, 65, 90, 97, 122, 95, 105, 
	115, 48, 57, 65, 90, 97, 122, 95, 
	111, 48, 57, 65, 90, 97, 122, 95, 
	110, 48, 57, 65, 90, 97, 122, 95, 
	97, 105, 48, 57, 65, 90, 98, 122, 
	95, 102, 48, 57, 65, 90, 97, 122, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	95, 103, 48, 57, 65, 90, 97, 122, 
	95, 110, 48, 57, 65, 90, 97, 122, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	95, 100, 48, 57, 65, 90, 97, 122, 
	95, 105, 48, 57, 65, 90, 97, 122, 
	95, 110, 48, 57, 65, 90, 97, 122, 
	95, 103, 48, 57, 65, 90, 97, 122, 
	95, 97, 105, 111, 48, 57, 65, 90, 
	98, 122, 95, 114, 48, 57, 65, 90, 
	97, 122, 95, 105, 48, 57, 65, 90, 
	97, 122, 95, 97, 48, 57, 65, 90, 
	98, 122, 95, 110, 48, 57, 65, 90, 
	97, 122, 95, 116, 48, 57, 65, 90, 
	97, 122, 95, 114, 48, 57, 65, 90, 
	97, 122, 95, 116, 48, 57, 65, 90, 
	97, 122, 95, 117, 48, 57, 65, 90, 
	97, 122, 95, 97, 48, 57, 65, 90, 
	98, 122, 95, 108, 48, 57, 65, 90, 
	97, 122, 95, 105, 108, 48, 57, 65, 
	90, 97, 122, 95, 100, 48, 57, 65, 
	90, 97, 122, 95, 97, 48, 57, 65, 
	90, 98, 122, 95, 116, 48, 57, 65, 
	90, 97, 122, 95, 105, 48, 57, 65, 
	90, 97, 122, 95, 108, 48, 57, 65, 
	90, 97, 122, 95, 101, 48, 57, 65, 
	90, 97, 122, 95, 99, 101, 104, 48, 
	57, 65, 90, 97, 122, 95, 104, 48, 
	57, 65, 90, 97, 122, 95, 97, 48, 
	57, 65, 90, 98, 122, 95, 114, 48, 
	57, 65, 90, 97, 122, 95, 48, 57, 
	65, 90, 97, 122, 95, 116, 48, 57, 
	65, 90, 97, 122, 95, 97, 48, 57, 
	65, 90, 98, 122, 95, 107, 48, 57, 
	65, 90, 97, 122, 95, 105, 48, 57, 
	65, 90, 97, 122, 95, 108, 48, 57, 
	65, 90, 97, 122, 95, 101, 48, 57, 
	65, 90, 97, 122, 61, 124, 0
};

static const char _axl_jnc_single_lengths[] = {
	3, 3, 1, 2, 3, 0, 42, 3, 
	1, 3, 1, 1, 2, 3, 1, 1, 
	2, 3, 1, 3, 1, 2, 0, 0, 
	1, 2, 1, 1, 2, 1, 1, 1, 
	1, 2, 2, 2, 3, 2, 2, 2, 
	4, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 6, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	4, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 4, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 5, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 3, 
	2, 2, 2, 2, 6, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 5, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 4, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	5, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 8, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 4, 3, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 4, 2, 3, 2, 2, 
	2, 2, 3, 2, 2, 2, 3, 3, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 4, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 4, 2, 
	2, 2, 1, 2, 2, 2, 2, 2, 
	2, 2
};

static const char _axl_jnc_range_lengths[] = {
	0, 0, 0, 0, 0, 3, 3, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 3, 
	0, 0, 0, 0, 0, 0, 0, 3, 
	0, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 0
};

static const short _axl_jnc_index_offsets[] = {
	0, 4, 8, 10, 13, 17, 21, 67, 
	71, 73, 77, 79, 81, 84, 88, 90, 
	92, 95, 99, 101, 105, 107, 111, 113, 
	117, 119, 122, 124, 126, 129, 131, 133, 
	138, 140, 146, 152, 158, 165, 171, 177, 
	183, 191, 198, 204, 210, 216, 222, 228, 
	234, 240, 246, 252, 258, 264, 270, 276, 
	282, 288, 294, 304, 310, 316, 322, 328, 
	334, 340, 346, 353, 359, 365, 371, 377, 
	383, 389, 395, 402, 408, 414, 420, 426, 
	432, 440, 446, 452, 458, 464, 470, 476, 
	482, 488, 494, 500, 506, 512, 518, 524, 
	532, 538, 544, 551, 557, 563, 569, 575, 
	581, 587, 593, 599, 608, 614, 620, 626, 
	632, 638, 644, 650, 656, 662, 668, 674, 
	680, 686, 692, 698, 704, 710, 716, 723, 
	730, 736, 742, 748, 754, 764, 770, 776, 
	782, 788, 794, 800, 806, 812, 819, 825, 
	831, 837, 843, 849, 855, 861, 867, 873, 
	879, 885, 891, 900, 906, 912, 918, 924, 
	930, 936, 942, 948, 955, 961, 967, 973, 
	979, 985, 991, 997, 1003, 1009, 1015, 1021, 
	1029, 1035, 1041, 1047, 1053, 1059, 1065, 1071, 
	1077, 1083, 1089, 1095, 1101, 1107, 1113, 1119, 
	1125, 1134, 1140, 1146, 1152, 1158, 1164, 1170, 
	1176, 1183, 1189, 1195, 1201, 1207, 1213, 1219, 
	1225, 1231, 1237, 1244, 1251, 1257, 1263, 1269, 
	1275, 1281, 1287, 1293, 1299, 1305, 1311, 1317, 
	1323, 1329, 1335, 1341, 1347, 1353, 1359, 1365, 
	1371, 1377, 1383, 1389, 1395, 1401, 1413, 1419, 
	1425, 1431, 1437, 1443, 1449, 1456, 1462, 1468, 
	1474, 1480, 1486, 1492, 1498, 1504, 1510, 1516, 
	1522, 1528, 1536, 1543, 1549, 1555, 1561, 1567, 
	1573, 1579, 1585, 1592, 1598, 1604, 1610, 1616, 
	1622, 1628, 1634, 1640, 1648, 1654, 1661, 1667, 
	1673, 1679, 1685, 1692, 1698, 1704, 1710, 1717, 
	1724, 1730, 1736, 1743, 1749, 1755, 1761, 1767, 
	1773, 1779, 1785, 1791, 1797, 1805, 1811, 1817, 
	1823, 1829, 1835, 1841, 1847, 1853, 1859, 1865, 
	1872, 1878, 1884, 1890, 1896, 1902, 1908, 1916, 
	1922, 1928, 1934, 1939, 1945, 1951, 1957, 1963, 
	1969, 1975
};

static const short _axl_jnc_indicies[] = {
	2, 3, 4, 1, 6, 7, 8, 5, 
	10, 9, 12, 13, 11, 12, 13, 14, 
	11, 16, 16, 16, 15, 18, 19, 18, 
	18, 20, 21, 22, 23, 24, 25, 26, 
	27, 28, 29, 30, 32, 33, 34, 35, 
	36, 38, 37, 39, 40, 41, 42, 43, 
	44, 45, 46, 47, 48, 49, 50, 51, 
	52, 53, 54, 55, 56, 57, 58, 31, 
	37, 37, 17, 18, 18, 18, 59, 61, 
	60, 2, 3, 4, 1, 62, 1, 63, 
	60, 64, 65, 60, 6, 7, 8, 5, 
	66, 5, 67, 60, 68, 69, 60, 70, 
	71, 72, 60, 73, 60, 11, 74, 75, 
	60, 76, 74, 78, 78, 31, 77, 31, 
	77, 16, 16, 16, 79, 80, 60, 81, 
	82, 60, 84, 83, 85, 60, 86, 87, 
	60, 89, 88, 90, 60, 37, 37, 37, 
	37, 0, 91, 60, 37, 93, 37, 37, 
	37, 92, 37, 94, 37, 37, 37, 92, 
	37, 95, 37, 37, 37, 92, 37, 97, 
	98, 37, 37, 37, 96, 37, 99, 37, 
	37, 37, 92, 37, 100, 37, 37, 37, 
	92, 37, 101, 37, 37, 37, 92, 37, 
	102, 103, 104, 37, 37, 37, 92, 37, 
	105, 106, 37, 37, 37, 92, 37, 107, 
	37, 37, 37, 92, 37, 108, 37, 37, 
	37, 92, 37, 109, 37, 37, 37, 92, 
	37, 110, 37, 37, 37, 92, 37, 111, 
	37, 37, 37, 92, 37, 112, 37, 37, 
	37, 92, 37, 113, 37, 37, 37, 92, 
	37, 114, 37, 37, 37, 92, 37, 115, 
	37, 37, 37, 92, 37, 116, 37, 37, 
	37, 92, 37, 117, 37, 37, 37, 92, 
	37, 118, 37, 37, 37, 92, 37, 119, 
	37, 37, 37, 92, 37, 120, 37, 37, 
	37, 92, 37, 121, 37, 37, 37, 92, 
	37, 122, 37, 37, 37, 92, 37, 123, 
	124, 125, 126, 127, 37, 37, 37, 92, 
	37, 128, 37, 37, 37, 92, 37, 129, 
	37, 37, 37, 92, 37, 130, 37, 37, 
	37, 92, 37, 131, 37, 37, 37, 92, 
	37, 132, 37, 37, 37, 92, 37, 133, 
	37, 37, 37, 92, 37, 134, 37, 37, 
	37, 92, 37, 135, 136, 37, 37, 37, 
	92, 37, 137, 37, 37, 37, 92, 37, 
	138, 37, 37, 37, 92, 37, 139, 37, 
	37, 37, 92, 37, 140, 37, 37, 37, 
	92, 37, 141, 37, 37, 37, 92, 37, 
	142, 37, 37, 37, 92, 37, 143, 37, 
	37, 37, 92, 37, 144, 145, 37, 37, 
	37, 92, 37, 146, 37, 37, 37, 92, 
	37, 147, 37, 37, 37, 92, 37, 148, 
	37, 37, 37, 92, 37, 149, 37, 37, 
	37, 92, 37, 150, 37, 37, 37, 92, 
	37, 151, 152, 153, 37, 37, 37, 92, 
	37, 154, 37, 37, 37, 92, 37, 155, 
	37, 37, 37, 92, 37, 156, 37, 37, 
	37, 92, 37, 157, 37, 37, 37, 92, 
	37, 158, 37, 37, 37, 92, 37, 160, 
	37, 37, 37, 159, 37, 161, 37, 37, 
	37, 92, 37, 162, 37, 37, 37, 92, 
	37, 163, 37, 37, 37, 92, 37, 164, 
	37, 37, 37, 92, 37, 165, 37, 37, 
	37, 92, 37, 166, 37, 37, 37, 92, 
	37, 167, 37, 37, 37, 92, 37, 168, 
	37, 37, 37, 92, 37, 169, 170, 171, 
	37, 37, 37, 92, 37, 172, 37, 37, 
	37, 92, 37, 173, 37, 37, 37, 92, 
	37, 174, 175, 37, 37, 37, 92, 37, 
	176, 37, 37, 37, 92, 37, 177, 37, 
	37, 37, 92, 37, 178, 37, 37, 37, 
	92, 37, 179, 37, 37, 37, 92, 37, 
	181, 37, 37, 37, 180, 37, 182, 37, 
	37, 37, 92, 37, 183, 37, 37, 37, 
	92, 37, 184, 37, 37, 37, 92, 37, 
	185, 186, 187, 188, 37, 37, 37, 92, 
	37, 189, 37, 37, 37, 92, 37, 190, 
	37, 37, 37, 92, 37, 191, 37, 37, 
	37, 92, 37, 192, 37, 37, 37, 92, 
	37, 193, 37, 37, 37, 92, 37, 194, 
	37, 37, 37, 92, 37, 195, 37, 37, 
	37, 92, 37, 196, 37, 37, 37, 92, 
	37, 197, 37, 37, 37, 92, 37, 198, 
	37, 37, 37, 92, 37, 199, 37, 37, 
	37, 92, 37, 200, 37, 37, 37, 92, 
	37, 201, 37, 37, 37, 92, 37, 202, 
	37, 37, 37, 92, 37, 203, 37, 37, 
	37, 92, 37, 204, 37, 37, 37, 92, 
	37, 205, 37, 37, 37, 92, 37, 206, 
	37, 37, 37, 92, 37, 207, 208, 37, 
	37, 37, 92, 37, 209, 210, 37, 37, 
	37, 92, 37, 211, 37, 37, 37, 92, 
	37, 212, 37, 37, 37, 92, 37, 213, 
	37, 37, 37, 92, 37, 214, 37, 37, 
	37, 92, 216, 217, 218, 219, 37, 220, 
	37, 37, 37, 215, 221, 37, 37, 37, 
	37, 92, 222, 37, 37, 37, 37, 92, 
	223, 37, 37, 37, 37, 92, 37, 224, 
	37, 37, 37, 92, 37, 225, 37, 37, 
	37, 92, 37, 226, 37, 37, 37, 92, 
	37, 227, 37, 37, 37, 92, 37, 228, 
	37, 37, 37, 92, 37, 229, 230, 37, 
	37, 37, 92, 37, 231, 37, 37, 37, 
	92, 37, 232, 37, 37, 37, 92, 37, 
	233, 37, 37, 37, 92, 37, 234, 37, 
	37, 37, 92, 37, 235, 37, 37, 37, 
	92, 37, 236, 37, 37, 37, 92, 37, 
	237, 37, 37, 37, 92, 37, 238, 37, 
	37, 37, 92, 37, 239, 37, 37, 37, 
	92, 37, 240, 37, 37, 37, 92, 37, 
	241, 37, 37, 37, 92, 37, 242, 37, 
	37, 37, 92, 37, 243, 244, 245, 246, 
	37, 37, 37, 92, 37, 247, 37, 37, 
	37, 92, 37, 248, 37, 37, 37, 92, 
	37, 249, 37, 37, 37, 92, 37, 250, 
	37, 37, 37, 92, 37, 251, 37, 37, 
	37, 92, 37, 252, 37, 37, 37, 92, 
	37, 253, 37, 37, 37, 92, 37, 254, 
	37, 37, 37, 92, 37, 255, 256, 37, 
	37, 37, 92, 37, 257, 37, 37, 37, 
	92, 37, 258, 37, 37, 37, 92, 37, 
	259, 37, 37, 37, 92, 37, 260, 37, 
	37, 37, 92, 37, 261, 37, 37, 37, 
	92, 37, 262, 37, 37, 37, 92, 37, 
	263, 37, 37, 37, 92, 37, 264, 37, 
	37, 37, 92, 37, 265, 37, 37, 37, 
	92, 37, 266, 37, 37, 37, 92, 37, 
	267, 37, 37, 37, 92, 37, 268, 269, 
	270, 37, 37, 37, 92, 37, 271, 37, 
	37, 37, 92, 37, 272, 37, 37, 37, 
	92, 37, 273, 37, 37, 37, 92, 37, 
	274, 37, 37, 37, 92, 37, 275, 37, 
	37, 37, 92, 37, 276, 37, 37, 37, 
	92, 37, 277, 37, 37, 37, 92, 37, 
	278, 37, 37, 37, 92, 37, 279, 37, 
	37, 37, 92, 37, 280, 37, 37, 37, 
	92, 37, 281, 37, 37, 37, 92, 37, 
	282, 37, 37, 37, 92, 37, 283, 37, 
	37, 37, 92, 37, 284, 37, 37, 37, 
	92, 37, 285, 37, 37, 37, 92, 37, 
	286, 37, 37, 37, 92, 37, 287, 288, 
	289, 290, 37, 37, 37, 92, 37, 291, 
	37, 37, 37, 92, 37, 292, 37, 37, 
	37, 92, 37, 293, 37, 37, 37, 92, 
	37, 294, 37, 37, 37, 92, 37, 295, 
	37, 37, 37, 92, 37, 296, 37, 37, 
	37, 92, 37, 297, 37, 37, 37, 92, 
	37, 298, 299, 37, 37, 37, 92, 37, 
	300, 37, 37, 37, 92, 37, 301, 37, 
	37, 37, 92, 37, 302, 37, 37, 37, 
	92, 37, 303, 37, 37, 37, 92, 37, 
	304, 37, 37, 37, 92, 37, 305, 37, 
	37, 37, 92, 37, 306, 37, 37, 37, 
	92, 37, 307, 37, 37, 37, 92, 37, 
	308, 37, 37, 37, 92, 37, 309, 310, 
	37, 37, 37, 92, 37, 311, 312, 37, 
	37, 37, 92, 37, 313, 37, 37, 37, 
	92, 37, 314, 37, 37, 37, 92, 37, 
	315, 37, 37, 37, 92, 37, 316, 37, 
	37, 37, 92, 37, 317, 37, 37, 37, 
	92, 37, 318, 37, 37, 37, 92, 37, 
	319, 37, 37, 37, 92, 37, 320, 37, 
	37, 37, 92, 37, 321, 37, 37, 37, 
	92, 37, 322, 37, 37, 37, 92, 37, 
	323, 37, 37, 37, 92, 37, 324, 37, 
	37, 37, 92, 37, 325, 37, 37, 37, 
	92, 37, 326, 37, 37, 37, 92, 37, 
	327, 37, 37, 37, 92, 37, 328, 37, 
	37, 37, 92, 37, 330, 37, 37, 37, 
	329, 37, 331, 37, 37, 37, 92, 37, 
	332, 37, 37, 37, 92, 37, 333, 37, 
	37, 37, 92, 37, 334, 37, 37, 37, 
	92, 37, 335, 37, 37, 37, 92, 37, 
	336, 37, 37, 37, 92, 37, 337, 37, 
	37, 37, 92, 37, 338, 37, 37, 37, 
	92, 37, 339, 340, 341, 342, 343, 344, 
	345, 37, 37, 37, 92, 37, 346, 37, 
	37, 37, 92, 37, 347, 37, 37, 37, 
	92, 37, 348, 37, 37, 37, 92, 37, 
	349, 37, 37, 37, 92, 37, 350, 37, 
	37, 37, 92, 37, 351, 37, 37, 37, 
	92, 37, 352, 353, 37, 37, 37, 92, 
	37, 354, 37, 37, 37, 92, 37, 355, 
	37, 37, 37, 92, 37, 356, 37, 37, 
	37, 92, 37, 357, 37, 37, 37, 92, 
	37, 358, 37, 37, 37, 92, 37, 359, 
	37, 37, 37, 92, 37, 360, 37, 37, 
	37, 92, 37, 361, 37, 37, 37, 92, 
	37, 362, 37, 37, 37, 92, 37, 363, 
	37, 37, 37, 92, 37, 364, 37, 37, 
	37, 92, 37, 365, 37, 37, 37, 92, 
	37, 366, 367, 368, 37, 37, 37, 92, 
	37, 369, 370, 37, 37, 37, 92, 37, 
	371, 37, 37, 37, 92, 37, 372, 37, 
	37, 37, 92, 37, 373, 37, 37, 37, 
	92, 37, 374, 37, 37, 37, 92, 37, 
	375, 37, 37, 37, 92, 37, 376, 37, 
	37, 37, 92, 37, 377, 37, 37, 37, 
	92, 37, 378, 379, 37, 37, 37, 92, 
	37, 380, 37, 37, 37, 92, 37, 381, 
	37, 37, 37, 92, 37, 382, 37, 37, 
	37, 92, 37, 383, 37, 37, 37, 92, 
	37, 384, 37, 37, 37, 92, 37, 385, 
	37, 37, 37, 92, 37, 386, 37, 37, 
	37, 92, 37, 387, 37, 37, 37, 92, 
	37, 388, 389, 390, 37, 37, 37, 92, 
	37, 391, 37, 37, 37, 92, 37, 392, 
	393, 37, 37, 37, 92, 37, 394, 37, 
	37, 37, 92, 37, 395, 37, 37, 37, 
	92, 37, 396, 37, 37, 37, 92, 37, 
	397, 37, 37, 37, 92, 37, 398, 399, 
	37, 37, 37, 92, 37, 400, 37, 37, 
	37, 92, 37, 401, 37, 37, 37, 92, 
	37, 402, 37, 37, 37, 92, 37, 403, 
	404, 37, 37, 37, 92, 37, 405, 406, 
	37, 37, 37, 92, 37, 407, 37, 37, 
	37, 92, 37, 408, 37, 37, 37, 92, 
	37, 409, 410, 37, 37, 37, 92, 37, 
	411, 37, 37, 37, 92, 37, 412, 37, 
	37, 37, 92, 37, 413, 37, 37, 37, 
	92, 37, 414, 37, 37, 37, 92, 37, 
	415, 37, 37, 37, 92, 37, 416, 37, 
	37, 37, 92, 37, 417, 37, 37, 37, 
	92, 37, 418, 37, 37, 37, 92, 37, 
	419, 37, 37, 37, 92, 37, 420, 421, 
	422, 37, 37, 37, 92, 37, 423, 37, 
	37, 37, 92, 37, 424, 37, 37, 37, 
	92, 37, 425, 37, 37, 37, 92, 37, 
	426, 37, 37, 37, 92, 37, 427, 37, 
	37, 37, 92, 37, 428, 37, 37, 37, 
	92, 37, 429, 37, 37, 37, 92, 37, 
	430, 37, 37, 37, 92, 37, 431, 37, 
	37, 37, 92, 37, 432, 37, 37, 37, 
	92, 37, 433, 434, 37, 37, 37, 92, 
	37, 435, 37, 37, 37, 92, 37, 436, 
	37, 37, 37, 92, 37, 437, 37, 37, 
	37, 92, 37, 438, 37, 37, 37, 92, 
	37, 439, 37, 37, 37, 92, 37, 440, 
	37, 37, 37, 92, 37, 441, 442, 443, 
	37, 37, 37, 92, 37, 444, 37, 37, 
	37, 92, 37, 445, 37, 37, 37, 92, 
	37, 446, 37, 37, 37, 92, 447, 37, 
	37, 37, 92, 37, 448, 37, 37, 37, 
	92, 37, 449, 37, 37, 37, 92, 37, 
	450, 37, 37, 37, 92, 37, 451, 37, 
	37, 37, 92, 37, 452, 37, 37, 37, 
	92, 37, 453, 37, 37, 37, 92, 454, 
	455, 60, 0
};

static const short _axl_jnc_trans_targs[] = {
	6, 0, 6, 6, 10, 1, 6, 6, 
	14, 6, 6, 3, 3, 4, 6, 6, 
	23, 6, 7, 6, 8, 9, 11, 12, 
	13, 15, 16, 17, 18, 19, 21, 22, 
	24, 25, 27, 28, 30, 31, 32, 33, 
	40, 58, 80, 95, 107, 121, 123, 126, 
	141, 154, 175, 192, 232, 237, 275, 286, 
	300, 318, 329, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 2, 20, 6, 6, 6, 5, 6, 
	6, 26, 6, 6, 6, 6, 6, 29, 
	6, 6, 6, 6, 6, 34, 35, 36, 
	6, 37, 38, 31, 39, 31, 41, 53, 
	55, 42, 48, 43, 44, 45, 46, 47, 
	31, 49, 50, 51, 52, 31, 54, 31, 
	56, 57, 31, 59, 61, 64, 66, 73, 
	60, 31, 62, 63, 31, 65, 31, 67, 
	69, 68, 31, 70, 71, 72, 31, 74, 
	75, 76, 31, 77, 78, 79, 31, 81, 
	86, 90, 82, 83, 84, 85, 31, 6, 
	87, 88, 89, 31, 91, 92, 93, 94, 
	31, 96, 98, 104, 97, 31, 99, 102, 
	100, 101, 31, 103, 6, 31, 105, 106, 
	31, 108, 111, 114, 115, 109, 110, 31, 
	112, 113, 31, 31, 116, 117, 118, 119, 
	120, 31, 122, 31, 124, 125, 31, 31, 
	127, 128, 132, 129, 130, 131, 31, 6, 
	133, 134, 135, 31, 136, 31, 31, 31, 
	137, 138, 139, 140, 31, 142, 152, 143, 
	144, 145, 146, 147, 148, 149, 150, 151, 
	31, 153, 31, 155, 162, 163, 173, 156, 
	157, 158, 159, 160, 161, 31, 31, 164, 
	167, 165, 166, 31, 168, 169, 170, 171, 
	172, 31, 174, 31, 176, 180, 186, 177, 
	178, 179, 31, 181, 182, 183, 184, 185, 
	31, 187, 188, 189, 190, 191, 31, 193, 
	195, 200, 224, 194, 31, 196, 197, 198, 
	199, 31, 201, 210, 202, 203, 204, 205, 
	206, 207, 208, 209, 31, 211, 219, 212, 
	215, 213, 214, 31, 216, 217, 218, 31, 
	220, 221, 222, 223, 31, 225, 226, 227, 
	228, 6, 229, 230, 231, 31, 233, 234, 
	235, 236, 31, 238, 240, 241, 244, 251, 
	257, 271, 239, 31, 31, 242, 243, 31, 
	245, 248, 246, 247, 31, 249, 250, 31, 
	252, 253, 254, 255, 256, 31, 258, 262, 
	266, 259, 260, 31, 261, 31, 263, 264, 
	265, 31, 267, 269, 268, 31, 270, 31, 
	272, 273, 274, 31, 276, 278, 280, 277, 
	31, 31, 279, 31, 281, 282, 283, 285, 
	284, 31, 31, 287, 297, 288, 290, 289, 
	31, 291, 293, 292, 31, 294, 295, 296, 
	31, 298, 299, 31, 301, 306, 311, 302, 
	303, 304, 305, 31, 307, 308, 309, 310, 
	31, 312, 313, 31, 314, 315, 316, 317, 
	31, 319, 324, 326, 320, 321, 322, 323, 
	31, 325, 31, 327, 328, 31, 6, 6
};

static const short _axl_jnc_trans_actions[] = {
	95, 0, 100, 55, 349, 0, 97, 53, 
	346, 93, 51, 0, 1, 0, 57, 91, 
	0, 59, 0, 103, 0, 352, 0, 0, 
	352, 0, 0, 0, 7, 7, 7, 0, 
	0, 0, 0, 0, 0, 343, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 87, 89, 17, 79, 27, 
	47, 37, 77, 23, 9, 29, 11, 31, 
	13, 0, 0, 25, 85, 81, 0, 83, 
	45, 0, 19, 71, 33, 15, 21, 0, 
	73, 35, 43, 39, 75, 0, 0, 0, 
	63, 0, 0, 256, 0, 187, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	151, 0, 0, 0, 0, 184, 0, 208, 
	0, 0, 316, 0, 0, 0, 0, 0, 
	0, 328, 0, 0, 169, 0, 229, 0, 
	0, 0, 250, 0, 0, 0, 193, 0, 
	0, 0, 136, 0, 0, 0, 319, 0, 
	0, 0, 0, 0, 0, 0, 331, 69, 
	0, 0, 0, 226, 0, 0, 0, 0, 
	301, 0, 0, 0, 0, 307, 0, 0, 
	0, 0, 115, 0, 67, 241, 0, 0, 
	181, 0, 0, 0, 0, 0, 0, 337, 
	0, 0, 223, 310, 0, 0, 0, 0, 
	0, 175, 0, 259, 0, 0, 289, 304, 
	0, 0, 0, 0, 0, 0, 190, 65, 
	0, 0, 0, 211, 0, 214, 217, 220, 
	0, 0, 0, 0, 253, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	148, 0, 235, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 106, 283, 0, 
	0, 0, 0, 160, 0, 0, 0, 0, 
	0, 127, 0, 340, 0, 0, 0, 0, 
	0, 0, 202, 0, 0, 0, 0, 0, 
	280, 0, 0, 0, 0, 0, 271, 0, 
	0, 0, 0, 0, 112, 0, 0, 0, 
	0, 274, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 268, 0, 0, 0, 
	0, 0, 0, 178, 0, 0, 0, 277, 
	0, 0, 0, 0, 133, 0, 0, 0, 
	0, 61, 0, 0, 0, 130, 0, 0, 
	0, 0, 322, 0, 0, 0, 0, 0, 
	0, 0, 0, 154, 262, 0, 0, 232, 
	0, 0, 0, 0, 142, 0, 0, 292, 
	0, 0, 0, 0, 0, 298, 0, 0, 
	0, 0, 0, 286, 0, 121, 0, 0, 
	0, 172, 0, 0, 0, 163, 0, 244, 
	0, 0, 0, 325, 0, 0, 0, 0, 
	196, 265, 0, 334, 0, 0, 0, 0, 
	0, 118, 295, 0, 0, 0, 0, 0, 
	247, 0, 0, 0, 157, 0, 0, 0, 
	145, 0, 0, 109, 0, 0, 0, 0, 
	0, 0, 0, 205, 0, 0, 0, 0, 
	124, 0, 0, 199, 0, 0, 0, 0, 
	139, 0, 0, 0, 0, 0, 0, 0, 
	238, 0, 166, 0, 0, 313, 41, 49
};

static const short _axl_jnc_to_state_actions[] = {
	0, 0, 0, 0, 0, 0, 3, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0
};

static const short _axl_jnc_from_state_actions[] = {
	0, 0, 0, 0, 0, 0, 5, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0
};

static const short _axl_jnc_eof_trans[] = {
	1, 1, 10, 10, 10, 16, 0, 60, 
	61, 61, 63, 61, 61, 61, 67, 61, 
	61, 61, 61, 61, 77, 78, 78, 80, 
	61, 61, 84, 61, 61, 89, 61, 1, 
	61, 93, 93, 93, 97, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 160, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 181, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 216, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 330, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 61
};

static const int axl_jnc_start = 6;
static const int axl_jnc_first_final = 6;
static const int axl_jnc_error = -1;

static const int axl_jnc_en_main = 6;


/* #line 236 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */


//.............................................................................

void 
CLexer::Init ()
{
	
/* #line 1064 "axl_jnc_Lexer.cpp" */
	{
	cs = axl_jnc_start;
	ts = 0;
	te = 0;
	act = 0;
	}

/* #line 244 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
}

bool
CLexer::Exec ()
{
	
/* #line 1070 "axl_jnc_Lexer.cpp" */
	{
	int _klen;
	unsigned int _trans;
	const unsigned char *_acts;
	unsigned int _nacts;
	const char *_keys;

	if ( p == pe )
		goto _test_eof;
_resume:
	_acts = _axl_jnc_actions + _axl_jnc_from_state_actions[cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 2:
/* #line 1 "NONE" */
	{ts = p;}
	break;
/* #line 1087 "axl_jnc_Lexer.cpp" */
		}
	}

	_keys = _axl_jnc_trans_keys + _axl_jnc_key_offsets[cs];
	_trans = _axl_jnc_index_offsets[cs];

	_klen = _axl_jnc_single_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( (*p) < *_mid )
				_upper = _mid - 1;
			else if ( (*p) > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (unsigned int)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _axl_jnc_range_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( (*p) < _mid[0] )
				_upper = _mid - 2;
			else if ( (*p) > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += (unsigned int)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	_trans = _axl_jnc_indicies[_trans];
_eof_trans:
	cs = _axl_jnc_trans_targs[_trans];

	if ( _axl_jnc_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _axl_jnc_actions + _axl_jnc_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 0:
/* #line 44 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{ NewLine (p + 1); }
	break;
	case 3:
/* #line 1 "NONE" */
	{te = p+1;}
	break;
	case 4:
/* #line 60 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 1;}
	break;
	case 5:
/* #line 61 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 2;}
	break;
	case 6:
/* #line 62 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 3;}
	break;
	case 7:
/* #line 63 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 4;}
	break;
	case 8:
/* #line 67 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 5;}
	break;
	case 9:
/* #line 68 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 6;}
	break;
	case 10:
/* #line 69 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 7;}
	break;
	case 11:
/* #line 70 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 8;}
	break;
	case 12:
/* #line 77 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 10;}
	break;
	case 13:
/* #line 78 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 11;}
	break;
	case 14:
/* #line 84 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 12;}
	break;
	case 15:
/* #line 85 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 13;}
	break;
	case 16:
/* #line 86 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 14;}
	break;
	case 17:
/* #line 87 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 15;}
	break;
	case 18:
/* #line 88 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 16;}
	break;
	case 19:
/* #line 89 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 17;}
	break;
	case 20:
/* #line 90 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 18;}
	break;
	case 21:
/* #line 91 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 19;}
	break;
	case 22:
/* #line 92 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 20;}
	break;
	case 23:
/* #line 93 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 21;}
	break;
	case 24:
/* #line 94 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 22;}
	break;
	case 25:
/* #line 95 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 23;}
	break;
	case 26:
/* #line 96 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 24;}
	break;
	case 27:
/* #line 97 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 25;}
	break;
	case 28:
/* #line 98 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 26;}
	break;
	case 29:
/* #line 99 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 27;}
	break;
	case 30:
/* #line 100 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 28;}
	break;
	case 31:
/* #line 101 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 29;}
	break;
	case 32:
/* #line 102 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 30;}
	break;
	case 33:
/* #line 103 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 31;}
	break;
	case 34:
/* #line 104 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 32;}
	break;
	case 35:
/* #line 111 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 34;}
	break;
	case 36:
/* #line 112 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 35;}
	break;
	case 37:
/* #line 113 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 36;}
	break;
	case 38:
/* #line 114 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 37;}
	break;
	case 39:
/* #line 115 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 38;}
	break;
	case 40:
/* #line 116 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 39;}
	break;
	case 41:
/* #line 117 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 40;}
	break;
	case 42:
/* #line 118 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 41;}
	break;
	case 43:
/* #line 119 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 42;}
	break;
	case 44:
/* #line 120 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 43;}
	break;
	case 45:
/* #line 122 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 45;}
	break;
	case 46:
/* #line 123 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 46;}
	break;
	case 47:
/* #line 124 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 47;}
	break;
	case 48:
/* #line 125 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 48;}
	break;
	case 49:
/* #line 132 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 50;}
	break;
	case 50:
/* #line 133 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 51;}
	break;
	case 51:
/* #line 134 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 52;}
	break;
	case 52:
/* #line 135 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 53;}
	break;
	case 53:
/* #line 136 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 54;}
	break;
	case 54:
/* #line 137 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 55;}
	break;
	case 55:
/* #line 143 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 56;}
	break;
	case 56:
/* #line 144 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 57;}
	break;
	case 57:
/* #line 145 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 58;}
	break;
	case 58:
/* #line 146 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 59;}
	break;
	case 59:
/* #line 147 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 60;}
	break;
	case 60:
/* #line 148 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 61;}
	break;
	case 61:
/* #line 149 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 62;}
	break;
	case 62:
/* #line 150 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 63;}
	break;
	case 63:
/* #line 156 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 64;}
	break;
	case 64:
/* #line 157 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 65;}
	break;
	case 65:
/* #line 158 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 66;}
	break;
	case 66:
/* #line 159 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 67;}
	break;
	case 67:
/* #line 160 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 68;}
	break;
	case 68:
/* #line 161 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 69;}
	break;
	case 69:
/* #line 162 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 70;}
	break;
	case 70:
/* #line 168 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 71;}
	break;
	case 71:
/* #line 169 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 72;}
	break;
	case 72:
/* #line 170 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 73;}
	break;
	case 73:
/* #line 171 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 74;}
	break;
	case 74:
/* #line 173 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 76;}
	break;
	case 75:
/* #line 174 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 77;}
	break;
	case 76:
/* #line 175 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 78;}
	break;
	case 77:
/* #line 176 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 79;}
	break;
	case 78:
/* #line 177 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 80;}
	break;
	case 79:
/* #line 178 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 81;}
	break;
	case 80:
/* #line 184 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 82;}
	break;
	case 81:
/* #line 185 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 83;}
	break;
	case 82:
/* #line 186 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 84;}
	break;
	case 83:
/* #line 221 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 109;}
	break;
	case 84:
/* #line 222 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 110;}
	break;
	case 85:
/* #line 223 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 111;}
	break;
	case 86:
/* #line 232 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 117;}
	break;
	case 87:
/* #line 192 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Inc); }}
	break;
	case 88:
/* #line 193 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Dec); }}
	break;
	case 89:
/* #line 194 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Ptr); }}
	break;
	case 90:
/* #line 197 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Eq); }}
	break;
	case 91:
/* #line 198 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Ne); }}
	break;
	case 92:
/* #line 199 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Le); }}
	break;
	case 93:
/* #line 200 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Ge); }}
	break;
	case 94:
/* #line 201 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_MulAssign); }}
	break;
	case 95:
/* #line 202 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_DivAssign); }}
	break;
	case 96:
/* #line 203 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_ModAssign); }}
	break;
	case 97:
/* #line 204 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_AddAssign); }}
	break;
	case 98:
/* #line 205 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_SubAssign); }}
	break;
	case 99:
/* #line 206 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_ShlAssign); }}
	break;
	case 100:
/* #line 207 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_ShrAssign); }}
	break;
	case 101:
/* #line 208 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_AndAssign); }}
	break;
	case 102:
/* #line 209 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_XorAssign); }}
	break;
	case 103:
/* #line 210 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_OrAssign); }}
	break;
	case 104:
/* #line 211 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_AtAssign); }}
	break;
	case 105:
/* #line 212 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_ClassAssign); }}
	break;
	case 106:
/* #line 213 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_LogAnd); }}
	break;
	case 107:
/* #line 214 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_LogOr); }}
	break;
	case 108:
/* #line 215 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Ellipsis); }}
	break;
	case 109:
/* #line 222 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateCharToken (EToken_Integer); }}
	break;
	case 110:
/* #line 223 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateStringToken (EToken_Literal, 1, 1); }}
	break;
	case 111:
/* #line 228 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;}
	break;
	case 112:
/* #line 230 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;}
	break;
	case 113:
/* #line 232 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (ts [0]); }}
	break;
	case 114:
/* #line 76 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateToken (EToken_Public); }}
	break;
	case 115:
/* #line 110 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateToken (EToken_Auto); }}
	break;
	case 116:
/* #line 121 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateToken (EToken_Int); }}
	break;
	case 117:
/* #line 131 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateToken (EToken_Enum); }}
	break;
	case 118:
/* #line 172 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateToken (EToken_Do); }}
	break;
	case 119:
/* #line 195 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateToken (EToken_Shl); }}
	break;
	case 120:
/* #line 196 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateToken (EToken_Shr); }}
	break;
	case 121:
/* #line 221 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateStringToken (EToken_Identifier); }}
	break;
	case 122:
/* #line 222 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateCharToken (EToken_Integer); }}
	break;
	case 123:
/* #line 223 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateStringToken (EToken_Literal, 1, 1); }}
	break;
	case 124:
/* #line 224 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateIntegerToken (10); }}
	break;
	case 125:
/* #line 225 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateIntegerToken (16, 2); }}
	break;
	case 126:
/* #line 227 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;}
	break;
	case 127:
/* #line 230 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;}
	break;
	case 128:
/* #line 232 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateToken (ts [0]); }}
	break;
	case 129:
/* #line 224 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{{p = ((te))-1;}{ CreateIntegerToken (10); }}
	break;
	case 130:
/* #line 232 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{{p = ((te))-1;}{ CreateToken (ts [0]); }}
	break;
	case 131:
/* #line 1 "NONE" */
	{	switch( act ) {
	case 1:
	{{p = ((te))-1;} CreateToken (EToken_Namespace); }
	break;
	case 2:
	{{p = ((te))-1;} CreateToken (EToken_Using); }
	break;
	case 3:
	{{p = ((te))-1;} CreateToken (EToken_Pack); }
	break;
	case 4:
	{{p = ((te))-1;} CreateToken (EToken_Endian); }
	break;
	case 5:
	{{p = ((te))-1;} CreateToken (EToken_Typedef); }
	break;
	case 6:
	{{p = ((te))-1;} CreateToken (EToken_Static); }
	break;
	case 7:
	{{p = ((te))-1;} CreateToken (EToken_Virtual); }
	break;
	case 8:
	{{p = ((te))-1;} CreateToken (EToken_NoVirtual); }
	break;
	case 10:
	{{p = ((te))-1;} CreateToken (EToken_PublicRead); }
	break;
	case 11:
	{{p = ((te))-1;} CreateToken (EToken_Protected); }
	break;
	case 12:
	{{p = ((te))-1;} CreateToken (EToken_Const); }
	break;
	case 13:
	{{p = ((te))-1;} CreateToken (EToken_Volatile); }
	break;
	case 14:
	{{p = ((te))-1;} CreateToken (EToken_Signed); }
	break;
	case 15:
	{{p = ((te))-1;} CreateToken (EToken_Unsigned); }
	break;
	case 16:
	{{p = ((te))-1;} CreateToken (EToken_LittleEndian); }
	break;
	case 17:
	{{p = ((te))-1;} CreateToken (EToken_BigEndian); }
	break;
	case 18:
	{{p = ((te))-1;} CreateToken (EToken_Safe); }
	break;
	case 19:
	{{p = ((te))-1;} CreateToken (EToken_Unsafe); }
	break;
	case 20:
	{{p = ((te))-1;} CreateToken (EToken_NoNull); }
	break;
	case 21:
	{{p = ((te))-1;} CreateToken (EToken_Strong); }
	break;
	case 22:
	{{p = ((te))-1;} CreateToken (EToken_Weak); }
	break;
	case 23:
	{{p = ((te))-1;} CreateToken (EToken_Cdecl); }
	break;
	case 24:
	{{p = ((te))-1;} CreateToken (EToken_Stdcall); }
	break;
	case 25:
	{{p = ((te))-1;} CreateToken (EToken_Function); }
	break;
	case 26:
	{{p = ((te))-1;} CreateToken (EToken_Property); }
	break;
	case 27:
	{{p = ((te))-1;} CreateToken (EToken_Event); }
	break;
	case 28:
	{{p = ((te))-1;} CreateToken (EToken_Bindable); }
	break;
	case 29:
	{{p = ((te))-1;} CreateToken (EToken_AutoGet); }
	break;
	case 30:
	{{p = ((te))-1;} CreateToken (EToken_Indexed); }
	break;
	case 31:
	{{p = ((te))-1;} CreateToken (EToken_Closure); }
	break;
	case 32:
	{{p = ((te))-1;} CreateToken (EToken_Thin); }
	break;
	case 34:
	{{p = ((te))-1;} CreateToken (EToken_Void); }
	break;
	case 35:
	{{p = ((te))-1;} CreateToken (EToken_Object); }
	break;
	case 36:
	{{p = ((te))-1;} CreateToken (EToken_Variant); }
	break;
	case 37:
	{{p = ((te))-1;} CreateToken (EToken_Bool); }
	break;
	case 38:
	{{p = ((te))-1;} CreateToken (EToken_Int8); }
	break;
	case 39:
	{{p = ((te))-1;} CreateToken (EToken_Int16); }
	break;
	case 40:
	{{p = ((te))-1;} CreateToken (EToken_Int32); }
	break;
	case 41:
	{{p = ((te))-1;} CreateToken (EToken_Int64); }
	break;
	case 42:
	{{p = ((te))-1;} CreateToken (EToken_Float); }
	break;
	case 43:
	{{p = ((te))-1;} CreateToken (EToken_Double); }
	break;
	case 45:
	{{p = ((te))-1;} CreateToken (EToken_Char); }
	break;
	case 46:
	{{p = ((te))-1;} CreateToken (EToken_Short); }
	break;
	case 47:
	{{p = ((te))-1;} CreateToken (EToken_Long); }
	break;
	case 48:
	{{p = ((te))-1;} CreateToken (EToken_WChar); }
	break;
	case 50:
	{{p = ((te))-1;} CreateToken (EToken_EnumC); }
	break;
	case 51:
	{{p = ((te))-1;} CreateToken (EToken_Struct); }
	break;
	case 52:
	{{p = ((te))-1;} CreateToken (EToken_Union); }
	break;
	case 53:
	{{p = ((te))-1;} CreateToken (EToken_Class); }
	break;
	case 54:
	{{p = ((te))-1;} CreateToken (EToken_Interface); }
	break;
	case 55:
	{{p = ((te))-1;} CreateToken (EToken_AutoEv); }
	break;
	case 56:
	{{p = ((te))-1;} CreateToken (EToken_Get); }
	break;
	case 57:
	{{p = ((te))-1;} CreateToken (EToken_Set); }
	break;
	case 58:
	{{p = ((te))-1;} CreateToken (EToken_This); }
	break;
	case 59:
	{{p = ((te))-1;} CreateToken (EToken_PreConstruct); }
	break;
	case 60:
	{{p = ((te))-1;} CreateToken (EToken_Operator); }
	break;
	case 61:
	{{p = ((te))-1;} CreateToken (EToken_Postfix); }
	break;
	case 62:
	{{p = ((te))-1;} CreateToken (EToken_PropValue); }
	break;
	case 63:
	{{p = ((te))-1;} CreateToken (EToken_OnChange); }
	break;
	case 64:
	{{p = ((te))-1;} CreateToken (EToken_New); }
	break;
	case 65:
	{{p = ((te))-1;} CreateToken (EToken_Stack); }
	break;
	case 66:
	{{p = ((te))-1;} CreateToken (EToken_Heap); }
	break;
	case 67:
	{{p = ((te))-1;} CreateToken (EToken_SizeOf); }
	break;
	case 68:
	{{p = ((te))-1;} CreateToken (EToken_TypeOf); }
	break;
	case 69:
	{{p = ((te))-1;} CreateToken (EToken_Snapshot); }
	break;
	case 70:
	{{p = ((te))-1;} CreateToken (EToken_Dynamic); }
	break;
	case 71:
	{{p = ((te))-1;} CreateToken (EToken_If); }
	break;
	case 72:
	{{p = ((te))-1;} CreateToken (EToken_Else); }
	break;
	case 73:
	{{p = ((te))-1;} CreateToken (EToken_For); }
	break;
	case 74:
	{{p = ((te))-1;} CreateToken (EToken_While); }
	break;
	case 76:
	{{p = ((te))-1;} CreateToken (EToken_Break); }
	break;
	case 77:
	{{p = ((te))-1;} CreateToken (EToken_Continue); }
	break;
	case 78:
	{{p = ((te))-1;} CreateToken (EToken_Return); }
	break;
	case 79:
	{{p = ((te))-1;} CreateToken (EToken_Switch); }
	break;
	case 80:
	{{p = ((te))-1;} CreateToken (EToken_Case); }
	break;
	case 81:
	{{p = ((te))-1;} CreateToken (EToken_Default); }
	break;
	case 82:
	{{p = ((te))-1;} CreateToken (EToken_True); }
	break;
	case 83:
	{{p = ((te))-1;} CreateToken (EToken_False); }
	break;
	case 84:
	{{p = ((te))-1;} CreateToken (EToken_Null); }
	break;
	case 109:
	{{p = ((te))-1;} CreateStringToken (EToken_Identifier); }
	break;
	case 110:
	{{p = ((te))-1;} CreateCharToken (EToken_Integer); }
	break;
	case 111:
	{{p = ((te))-1;} CreateStringToken (EToken_Literal, 1, 1); }
	break;
	case 117:
	{{p = ((te))-1;} CreateToken (ts [0]); }
	break;
	}
	}
	break;
/* #line 1793 "axl_jnc_Lexer.cpp" */
		}
	}

_again:
	_acts = _axl_jnc_actions + _axl_jnc_to_state_actions[cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 1:
/* #line 1 "NONE" */
	{ts = 0;}
	break;
/* #line 1804 "axl_jnc_Lexer.cpp" */
		}
	}

	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	if ( _axl_jnc_eof_trans[cs] > 0 ) {
		_trans = _axl_jnc_eof_trans[cs] - 1;
		goto _eof_trans;
	}
	}

	}

/* #line 250 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */

	bool Result = cs != axl_jnc_error;
	if (!Result)
	{
		CToken* pToken = CreateToken (EToken_Error);
		pToken->m_Data.m_Error = err::CError ("lexer error");
	}

	return Result;
}

//.............................................................................

} // namespace jnc {
} // namespace axl {
