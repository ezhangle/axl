
/* #line 1 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
#include "stdafx.h"
#include "axl_jnc_Lexer.h"

// warning C4065: switch statement contains 'default' but no 'case' labels

#pragma warning (disable: 4065)

namespace axl {
namespace jnc {

//.............................................................................


/* #line 2 "axl_jnc_Lexer.cpp" */
static const char _axl_jnc_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 65, 1, 66, 1, 67, 1, 
	68, 1, 69, 1, 70, 1, 71, 1, 
	72, 1, 73, 1, 74, 1, 75, 1, 
	76, 1, 77, 1, 78, 1, 79, 1, 
	80, 1, 81, 1, 82, 1, 83, 1, 
	84, 1, 85, 1, 86, 1, 87, 1, 
	88, 1, 90, 1, 91, 1, 92, 1, 
	93, 1, 94, 1, 95, 1, 96, 1, 
	97, 1, 98, 1, 99, 1, 100, 1, 
	101, 1, 102, 1, 103, 1, 104, 1, 
	105, 1, 106, 2, 0, 86, 2, 0, 
	87, 2, 0, 89, 2, 3, 4, 2, 
	3, 5, 2, 3, 6, 2, 3, 7, 
	2, 3, 8, 2, 3, 9, 2, 3, 
	10, 2, 3, 11, 2, 3, 12, 2, 
	3, 13, 2, 3, 14, 2, 3, 15, 
	2, 3, 16, 2, 3, 17, 2, 3, 
	18, 2, 3, 19, 2, 3, 20, 2, 
	3, 21, 2, 3, 22, 2, 3, 23, 
	2, 3, 24, 2, 3, 25, 2, 3, 
	26, 2, 3, 27, 2, 3, 28, 2, 
	3, 29, 2, 3, 30, 2, 3, 31, 
	2, 3, 32, 2, 3, 33, 2, 3, 
	34, 2, 3, 35, 2, 3, 36, 2, 
	3, 37, 2, 3, 38, 2, 3, 39, 
	2, 3, 40, 2, 3, 41, 2, 3, 
	42, 2, 3, 43, 2, 3, 44, 2, 
	3, 45, 2, 3, 46, 2, 3, 47, 
	2, 3, 48, 2, 3, 49, 2, 3, 
	50, 2, 3, 51, 2, 3, 52, 2, 
	3, 53, 2, 3, 54, 2, 3, 55, 
	2, 3, 56, 2, 3, 57, 2, 3, 
	58, 2, 3, 59, 2, 3, 60, 2, 
	3, 61, 2, 3, 62, 2, 3, 63, 
	2, 3, 64
};

static const short _axl_jnc_key_offsets[] = {
	0, 3, 6, 7, 9, 12, 18, 63, 
	66, 67, 70, 71, 72, 74, 77, 78, 
	79, 81, 84, 85, 88, 89, 93, 95, 
	101, 102, 104, 105, 106, 108, 109, 116, 
	117, 125, 133, 141, 151, 159, 167, 175, 
	183, 191, 199, 207, 215, 223, 231, 239, 
	247, 258, 266, 274, 282, 290, 298, 306, 
	314, 322, 331, 339, 347, 355, 363, 371, 
	381, 389, 397, 405, 413, 421, 429, 437, 
	445, 453, 461, 469, 478, 486, 494, 502, 
	510, 518, 526, 534, 542, 550, 558, 567, 
	575, 583, 592, 600, 608, 616, 624, 632, 
	642, 650, 658, 666, 674, 682, 690, 698, 
	706, 714, 723, 731, 743, 751, 759, 767, 
	775, 783, 791, 799, 807, 816, 824, 832, 
	840, 848, 856, 864, 872, 880, 888, 896, 
	904, 912, 923, 931, 939, 947, 955, 963, 
	971, 979, 987, 995, 1003, 1011, 1019, 1027, 
	1035, 1045, 1053, 1061, 1070, 1078, 1086, 1094, 
	1102, 1110, 1118, 1126, 1134, 1142, 1150, 1158, 
	1166, 1174, 1182, 1190, 1198, 1206, 1214, 1227, 
	1235, 1243, 1251, 1259, 1267, 1275, 1284, 1292, 
	1300, 1308, 1316, 1324, 1332, 1341, 1349, 1357, 
	1365, 1373, 1381, 1389, 1397, 1405, 1413, 1421, 
	1430, 1438, 1446, 1454, 1462, 1471, 1479, 1487, 
	1495, 1504, 1513, 1521, 1529, 1538, 1546, 1554, 
	1562, 1570, 1578, 1586, 1594, 1602, 1610, 1619, 
	1627, 1635, 1643, 1651, 1659, 1668, 1676, 1684, 
	1692, 1700, 1708, 1716, 1725, 1733, 1741, 1749, 
	1756, 1764, 1772, 1780, 1788
};

static const char _axl_jnc_trans_keys[] = {
	10, 34, 92, 10, 39, 92, 46, 10, 
	42, 10, 42, 47, 48, 57, 65, 70, 
	97, 102, 9, 10, 13, 32, 33, 34, 
	37, 38, 39, 42, 43, 45, 46, 47, 
	48, 58, 60, 61, 62, 94, 95, 97, 
	98, 99, 100, 101, 102, 103, 105, 108, 
	110, 112, 114, 115, 116, 117, 118, 119, 
	124, 49, 57, 65, 90, 104, 122, 9, 
	13, 32, 61, 10, 34, 92, 10, 61, 
	38, 61, 10, 39, 92, 10, 61, 43, 
	61, 45, 61, 62, 46, 42, 47, 61, 
	10, 88, 120, 48, 57, 48, 57, 48, 
	57, 65, 70, 97, 102, 61, 60, 61, 
	61, 61, 61, 62, 61, 95, 48, 57, 
	65, 90, 97, 122, 61, 95, 117, 48, 
	57, 65, 90, 97, 122, 95, 116, 48, 
	57, 65, 90, 97, 122, 95, 111, 48, 
	57, 65, 90, 97, 122, 95, 105, 111, 
	114, 48, 57, 65, 90, 97, 122, 95, 
	103, 48, 57, 65, 90, 97, 122, 95, 
	101, 48, 57, 65, 90, 97, 122, 95, 
	110, 48, 57, 65, 90, 97, 122, 95, 
	100, 48, 57, 65, 90, 97, 122, 95, 
	105, 48, 57, 65, 90, 97, 122, 95, 
	97, 48, 57, 65, 90, 98, 122, 95, 
	110, 48, 57, 65, 90, 97, 122, 95, 
	111, 48, 57, 65, 90, 97, 122, 95, 
	108, 48, 57, 65, 90, 97, 122, 95, 
	101, 48, 57, 65, 90, 97, 122, 95, 
	97, 48, 57, 65, 90, 98, 122, 95, 
	107, 48, 57, 65, 90, 97, 122, 95, 
	97, 104, 108, 111, 48, 57, 65, 90, 
	98, 122, 95, 115, 48, 57, 65, 90, 
	97, 122, 95, 101, 48, 57, 65, 90, 
	97, 122, 95, 97, 48, 57, 65, 90, 
	98, 122, 95, 114, 48, 57, 65, 90, 
	97, 122, 95, 97, 48, 57, 65, 90, 
	98, 122, 95, 115, 48, 57, 65, 90, 
	97, 122, 95, 115, 48, 57, 65, 90, 
	97, 122, 95, 110, 48, 57, 65, 90, 
	97, 122, 95, 115, 116, 48, 57, 65, 
	90, 97, 122, 95, 116, 48, 57, 65, 
	90, 97, 122, 95, 105, 48, 57, 65, 
	90, 97, 122, 95, 110, 48, 57, 65, 
	90, 97, 122, 95, 117, 48, 57, 65, 
	90, 97, 122, 95, 101, 48, 57, 65, 
	90, 97, 122, 95, 101, 111, 121, 48, 
	57, 65, 90, 97, 122, 95, 102, 48, 
	57, 65, 90, 97, 122, 95, 97, 48, 
	57, 65, 90, 98, 122, 95, 117, 48, 
	57, 65, 90, 97, 122, 95, 108, 48, 
	57, 65, 90, 97, 122, 95, 116, 48, 
	57, 65, 90, 97, 122, 95, 117, 48, 
	57, 65, 90, 97, 122, 95, 98, 48, 
	57, 65, 90, 97, 122, 95, 108, 48, 
	57, 65, 90, 97, 122, 95, 101, 48, 
	57, 65, 90, 97, 122, 95, 110, 48, 
	57, 65, 90, 97, 122, 95, 97, 48, 
	57, 65, 90, 98, 122, 95, 115, 116, 
	48, 57, 65, 90, 97, 122, 95, 105, 
	48, 57, 65, 90, 97, 122, 95, 122, 
	48, 57, 65, 90, 97, 121, 95, 101, 
	48, 57, 65, 90, 97, 122, 95, 111, 
	48, 57, 65, 90, 97, 122, 95, 102, 
	48, 57, 65, 90, 97, 122, 95, 121, 
	48, 57, 65, 90, 97, 122, 95, 112, 
	48, 57, 65, 90, 97, 122, 95, 101, 
	48, 57, 65, 90, 97, 122, 95, 111, 
	48, 57, 65, 90, 97, 122, 95, 102, 
	48, 57, 65, 90, 97, 122, 95, 108, 
	110, 48, 57, 65, 90, 97, 122, 95, 
	115, 48, 57, 65, 90, 97, 122, 95, 
	101, 48, 57, 65, 90, 97, 122, 95, 
	100, 117, 48, 57, 65, 90, 97, 122, 
	95, 105, 48, 57, 65, 90, 97, 122, 
	95, 97, 48, 57, 65, 90, 98, 122, 
	95, 110, 48, 57, 65, 90, 97, 122, 
	95, 109, 48, 57, 65, 90, 97, 122, 
	95, 99, 48, 57, 65, 90, 97, 122, 
	95, 97, 108, 111, 48, 57, 65, 90, 
	98, 122, 95, 108, 48, 57, 65, 90, 
	97, 122, 95, 115, 48, 57, 65, 90, 
	97, 122, 95, 101, 48, 57, 65, 90, 
	97, 122, 95, 111, 48, 57, 65, 90, 
	97, 122, 95, 97, 48, 57, 65, 90, 
	98, 122, 95, 116, 48, 57, 65, 90, 
	97, 122, 95, 114, 48, 57, 65, 90, 
	97, 122, 95, 101, 48, 57, 65, 90, 
	97, 122, 95, 116, 48, 57, 65, 90, 
	97, 122, 95, 102, 110, 48, 57, 65, 
	90, 97, 122, 95, 116, 48, 57, 65, 
	90, 97, 122, 49, 51, 54, 56, 95, 
	101, 48, 57, 65, 90, 97, 122, 54, 
	95, 48, 57, 65, 90, 97, 122, 50, 
	95, 48, 57, 65, 90, 97, 122, 52, 
	95, 48, 57, 65, 90, 97, 122, 95, 
	114, 48, 57, 65, 90, 97, 122, 95, 
	102, 48, 57, 65, 90, 97, 122, 95, 
	97, 48, 57, 65, 90, 98, 122, 95, 
	99, 48, 57, 65, 90, 97, 122, 95, 
	101, 48, 57, 65, 90, 97, 122, 95, 
	105, 111, 48, 57, 65, 90, 97, 122, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	95, 108, 48, 57, 65, 90, 97, 122, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	95, 110, 48, 57, 65, 90, 97, 122, 
	95, 100, 48, 57, 65, 90, 97, 122, 
	95, 105, 48, 57, 65, 90, 97, 122, 
	95, 97, 48, 57, 65, 90, 98, 122, 
	95, 110, 48, 57, 65, 90, 97, 122, 
	95, 110, 48, 57, 65, 90, 97, 122, 
	95, 103, 48, 57, 65, 90, 97, 122, 
	95, 97, 101, 111, 117, 48, 57, 65, 
	90, 98, 122, 95, 109, 48, 57, 65, 
	90, 97, 122, 95, 101, 48, 57, 65, 
	90, 97, 122, 95, 115, 48, 57, 65, 
	90, 97, 122, 95, 112, 48, 57, 65, 
	90, 97, 122, 95, 97, 48, 57, 65, 
	90, 98, 122, 95, 99, 48, 57, 65, 
	90, 97, 122, 95, 101, 48, 57, 65, 
	90, 97, 122, 95, 119, 48, 57, 65, 
	90, 97, 122, 95, 110, 48, 57, 65, 
	90, 97, 122, 95, 117, 48, 57, 65, 
	90, 97, 122, 95, 108, 48, 57, 65, 
	90, 97, 122, 95, 108, 48, 57, 65, 
	90, 97, 122, 95, 108, 48, 57, 65, 
	90, 97, 122, 95, 108, 48, 57, 65, 
	90, 97, 122, 95, 97, 114, 117, 48, 
	57, 65, 90, 98, 122, 95, 99, 48, 
	57, 65, 90, 97, 122, 95, 107, 48, 
	57, 65, 90, 97, 122, 95, 105, 111, 
	48, 57, 65, 90, 97, 122, 95, 118, 
	48, 57, 65, 90, 97, 122, 95, 97, 
	48, 57, 65, 90, 98, 122, 95, 116, 
	48, 57, 65, 90, 97, 122, 95, 101, 
	48, 57, 65, 90, 97, 122, 95, 112, 
	48, 57, 65, 90, 97, 122, 95, 101, 
	48, 57, 65, 90, 97, 122, 95, 114, 
	48, 57, 65, 90, 97, 122, 95, 116, 
	48, 57, 65, 90, 97, 122, 95, 121, 
	48, 57, 65, 90, 97, 122, 95, 98, 
	48, 57, 65, 90, 97, 122, 95, 108, 
	48, 57, 65, 90, 97, 122, 95, 105, 
	48, 57, 65, 90, 97, 122, 95, 99, 
	48, 57, 65, 90, 97, 122, 95, 101, 
	48, 57, 65, 90, 97, 122, 95, 116, 
	48, 57, 65, 90, 97, 122, 95, 117, 
	48, 57, 65, 90, 97, 122, 95, 114, 
	48, 57, 65, 90, 97, 122, 95, 110, 
	48, 57, 65, 90, 97, 122, 95, 97, 
	101, 104, 105, 116, 119, 48, 57, 65, 
	90, 98, 122, 95, 102, 48, 57, 65, 
	90, 97, 122, 95, 101, 48, 57, 65, 
	90, 97, 122, 95, 116, 48, 57, 65, 
	90, 97, 122, 95, 111, 48, 57, 65, 
	90, 97, 122, 95, 114, 48, 57, 65, 
	90, 97, 122, 95, 116, 48, 57, 65, 
	90, 97, 122, 95, 103, 122, 48, 57, 
	65, 90, 97, 121, 95, 110, 48, 57, 
	65, 90, 97, 122, 95, 101, 48, 57, 
	65, 90, 97, 122, 95, 100, 48, 57, 
	65, 90, 97, 122, 95, 101, 48, 57, 
	65, 90, 97, 122, 95, 111, 48, 57, 
	65, 90, 97, 122, 95, 102, 48, 57, 
	65, 90, 97, 122, 95, 97, 114, 48, 
	57, 65, 90, 98, 122, 95, 116, 48, 
	57, 65, 90, 97, 122, 95, 105, 48, 
	57, 65, 90, 97, 122, 95, 99, 48, 
	57, 65, 90, 97, 122, 95, 117, 48, 
	57, 65, 90, 97, 122, 95, 99, 48, 
	57, 65, 90, 97, 122, 95, 116, 48, 
	57, 65, 90, 97, 122, 95, 105, 48, 
	57, 65, 90, 97, 122, 95, 116, 48, 
	57, 65, 90, 97, 122, 95, 99, 48, 
	57, 65, 90, 97, 122, 95, 104, 48, 
	57, 65, 90, 97, 122, 95, 114, 121, 
	48, 57, 65, 90, 97, 122, 95, 117, 
	48, 57, 65, 90, 97, 122, 95, 101, 
	48, 57, 65, 90, 97, 122, 95, 112, 
	48, 57, 65, 90, 97, 122, 95, 101, 
	48, 57, 65, 90, 97, 122, 95, 100, 
	111, 48, 57, 65, 90, 97, 122, 95, 
	101, 48, 57, 65, 90, 97, 122, 95, 
	102, 48, 57, 65, 90, 97, 122, 95, 
	102, 48, 57, 65, 90, 97, 122, 95, 
	110, 115, 48, 57, 65, 90, 97, 122, 
	95, 105, 115, 48, 57, 65, 90, 97, 
	122, 95, 111, 48, 57, 65, 90, 97, 
	122, 95, 110, 48, 57, 65, 90, 97, 
	122, 95, 97, 105, 48, 57, 65, 90, 
	98, 122, 95, 102, 48, 57, 65, 90, 
	97, 122, 95, 101, 48, 57, 65, 90, 
	97, 122, 95, 103, 48, 57, 65, 90, 
	97, 122, 95, 110, 48, 57, 65, 90, 
	97, 122, 95, 101, 48, 57, 65, 90, 
	97, 122, 95, 100, 48, 57, 65, 90, 
	97, 122, 95, 105, 48, 57, 65, 90, 
	97, 122, 95, 110, 48, 57, 65, 90, 
	97, 122, 95, 103, 48, 57, 65, 90, 
	97, 122, 95, 97, 111, 48, 57, 65, 
	90, 98, 122, 95, 114, 48, 57, 65, 
	90, 97, 122, 95, 105, 48, 57, 65, 
	90, 97, 122, 95, 97, 48, 57, 65, 
	90, 98, 122, 95, 110, 48, 57, 65, 
	90, 97, 122, 95, 116, 48, 57, 65, 
	90, 97, 122, 95, 105, 108, 48, 57, 
	65, 90, 97, 122, 95, 100, 48, 57, 
	65, 90, 97, 122, 95, 97, 48, 57, 
	65, 90, 98, 122, 95, 116, 48, 57, 
	65, 90, 97, 122, 95, 105, 48, 57, 
	65, 90, 97, 122, 95, 108, 48, 57, 
	65, 90, 97, 122, 95, 101, 48, 57, 
	65, 90, 97, 122, 95, 99, 104, 48, 
	57, 65, 90, 97, 122, 95, 104, 48, 
	57, 65, 90, 97, 122, 95, 97, 48, 
	57, 65, 90, 98, 122, 95, 114, 48, 
	57, 65, 90, 97, 122, 95, 48, 57, 
	65, 90, 97, 122, 95, 116, 48, 57, 
	65, 90, 97, 122, 95, 105, 48, 57, 
	65, 90, 97, 122, 95, 108, 48, 57, 
	65, 90, 97, 122, 95, 101, 48, 57, 
	65, 90, 97, 122, 61, 124, 0
};

static const char _axl_jnc_single_lengths[] = {
	3, 3, 1, 2, 3, 0, 39, 3, 
	1, 3, 1, 1, 2, 3, 1, 1, 
	2, 3, 1, 3, 1, 2, 0, 0, 
	1, 2, 1, 1, 2, 1, 1, 1, 
	2, 2, 2, 4, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	5, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 4, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 3, 2, 2, 2, 2, 2, 4, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 6, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 5, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	4, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 7, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	3, 3, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 1, 
	2, 2, 2, 2, 2
};

static const char _axl_jnc_range_lengths[] = {
	0, 0, 0, 0, 0, 3, 3, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 3, 
	0, 0, 0, 0, 0, 0, 3, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 0
};

static const short _axl_jnc_index_offsets[] = {
	0, 4, 8, 10, 13, 17, 21, 64, 
	68, 70, 74, 76, 78, 81, 85, 87, 
	89, 92, 96, 98, 102, 104, 108, 110, 
	114, 116, 119, 121, 123, 126, 128, 133, 
	135, 141, 147, 153, 161, 167, 173, 179, 
	185, 191, 197, 203, 209, 215, 221, 227, 
	233, 242, 248, 254, 260, 266, 272, 278, 
	284, 290, 297, 303, 309, 315, 321, 327, 
	335, 341, 347, 353, 359, 365, 371, 377, 
	383, 389, 395, 401, 408, 414, 420, 426, 
	432, 438, 444, 450, 456, 462, 468, 475, 
	481, 487, 494, 500, 506, 512, 518, 524, 
	532, 538, 544, 550, 556, 562, 568, 574, 
	580, 586, 593, 599, 609, 615, 621, 627, 
	633, 639, 645, 651, 657, 664, 670, 676, 
	682, 688, 694, 700, 706, 712, 718, 724, 
	730, 736, 745, 751, 757, 763, 769, 775, 
	781, 787, 793, 799, 805, 811, 817, 823, 
	829, 837, 843, 849, 856, 862, 868, 874, 
	880, 886, 892, 898, 904, 910, 916, 922, 
	928, 934, 940, 946, 952, 958, 964, 975, 
	981, 987, 993, 999, 1005, 1011, 1018, 1024, 
	1030, 1036, 1042, 1048, 1054, 1061, 1067, 1073, 
	1079, 1085, 1091, 1097, 1103, 1109, 1115, 1121, 
	1128, 1134, 1140, 1146, 1152, 1159, 1165, 1171, 
	1177, 1184, 1191, 1197, 1203, 1210, 1216, 1222, 
	1228, 1234, 1240, 1246, 1252, 1258, 1264, 1271, 
	1277, 1283, 1289, 1295, 1301, 1308, 1314, 1320, 
	1326, 1332, 1338, 1344, 1351, 1357, 1363, 1369, 
	1374, 1380, 1386, 1392, 1398
};

static const short _axl_jnc_indicies[] = {
	2, 3, 4, 1, 6, 7, 8, 5, 
	10, 9, 12, 13, 11, 12, 13, 14, 
	11, 16, 16, 16, 15, 18, 19, 18, 
	18, 20, 21, 22, 23, 24, 25, 26, 
	27, 28, 29, 30, 32, 33, 34, 35, 
	37, 36, 38, 39, 40, 41, 42, 43, 
	44, 45, 46, 47, 48, 49, 50, 51, 
	52, 53, 54, 55, 31, 36, 36, 17, 
	18, 18, 18, 56, 58, 57, 2, 3, 
	4, 1, 59, 1, 60, 57, 61, 62, 
	57, 6, 7, 8, 5, 63, 5, 64, 
	57, 65, 66, 57, 67, 68, 69, 57, 
	70, 57, 11, 71, 72, 57, 73, 71, 
	75, 75, 31, 74, 31, 74, 16, 16, 
	16, 76, 77, 57, 78, 79, 57, 81, 
	80, 82, 57, 83, 84, 57, 86, 85, 
	36, 36, 36, 36, 0, 87, 57, 36, 
	89, 36, 36, 36, 88, 36, 90, 36, 
	36, 36, 88, 36, 91, 36, 36, 36, 
	88, 36, 92, 93, 94, 36, 36, 36, 
	88, 36, 95, 36, 36, 36, 88, 36, 
	96, 36, 36, 36, 88, 36, 97, 36, 
	36, 36, 88, 36, 98, 36, 36, 36, 
	88, 36, 99, 36, 36, 36, 88, 36, 
	100, 36, 36, 36, 88, 36, 101, 36, 
	36, 36, 88, 36, 102, 36, 36, 36, 
	88, 36, 103, 36, 36, 36, 88, 36, 
	104, 36, 36, 36, 88, 36, 105, 36, 
	36, 36, 88, 36, 106, 36, 36, 36, 
	88, 36, 107, 108, 109, 110, 36, 36, 
	36, 88, 36, 111, 36, 36, 36, 88, 
	36, 112, 36, 36, 36, 88, 36, 113, 
	36, 36, 36, 88, 36, 114, 36, 36, 
	36, 88, 36, 115, 36, 36, 36, 88, 
	36, 116, 36, 36, 36, 88, 36, 117, 
	36, 36, 36, 88, 36, 118, 36, 36, 
	36, 88, 36, 119, 120, 36, 36, 36, 
	88, 36, 121, 36, 36, 36, 88, 36, 
	122, 36, 36, 36, 88, 36, 123, 36, 
	36, 36, 88, 36, 124, 36, 36, 36, 
	88, 36, 125, 36, 36, 36, 88, 36, 
	126, 127, 128, 36, 36, 36, 88, 36, 
	129, 36, 36, 36, 88, 36, 130, 36, 
	36, 36, 88, 36, 131, 36, 36, 36, 
	88, 36, 132, 36, 36, 36, 88, 36, 
	133, 36, 36, 36, 88, 36, 135, 36, 
	36, 36, 134, 36, 136, 36, 36, 36, 
	88, 36, 137, 36, 36, 36, 88, 36, 
	138, 36, 36, 36, 88, 36, 139, 36, 
	36, 36, 88, 36, 140, 36, 36, 36, 
	88, 36, 141, 142, 36, 36, 36, 88, 
	36, 143, 36, 36, 36, 88, 36, 144, 
	36, 36, 36, 88, 36, 145, 36, 36, 
	36, 88, 36, 146, 36, 36, 36, 88, 
	36, 147, 36, 36, 36, 88, 36, 148, 
	36, 36, 36, 88, 36, 149, 36, 36, 
	36, 88, 36, 150, 36, 36, 36, 88, 
	36, 151, 36, 36, 36, 88, 36, 152, 
	36, 36, 36, 88, 36, 153, 154, 36, 
	36, 36, 88, 36, 155, 36, 36, 36, 
	88, 36, 156, 36, 36, 36, 88, 36, 
	157, 158, 36, 36, 36, 88, 36, 159, 
	36, 36, 36, 88, 36, 160, 36, 36, 
	36, 88, 36, 161, 36, 36, 36, 88, 
	36, 162, 36, 36, 36, 88, 36, 164, 
	36, 36, 36, 163, 36, 165, 166, 167, 
	36, 36, 36, 88, 36, 168, 36, 36, 
	36, 88, 36, 169, 36, 36, 36, 88, 
	36, 170, 36, 36, 36, 88, 36, 171, 
	36, 36, 36, 88, 36, 172, 36, 36, 
	36, 88, 36, 173, 36, 36, 36, 88, 
	36, 174, 36, 36, 36, 88, 36, 175, 
	36, 36, 36, 88, 36, 176, 36, 36, 
	36, 88, 36, 177, 178, 36, 36, 36, 
	88, 36, 179, 36, 36, 36, 88, 181, 
	182, 183, 184, 36, 185, 36, 36, 36, 
	180, 186, 36, 36, 36, 36, 88, 187, 
	36, 36, 36, 36, 88, 188, 36, 36, 
	36, 36, 88, 36, 189, 36, 36, 36, 
	88, 36, 190, 36, 36, 36, 88, 36, 
	191, 36, 36, 36, 88, 36, 192, 36, 
	36, 36, 88, 36, 193, 36, 36, 36, 
	88, 36, 194, 195, 36, 36, 36, 88, 
	36, 196, 36, 36, 36, 88, 36, 197, 
	36, 36, 36, 88, 36, 198, 36, 36, 
	36, 88, 36, 199, 36, 36, 36, 88, 
	36, 200, 36, 36, 36, 88, 36, 201, 
	36, 36, 36, 88, 36, 202, 36, 36, 
	36, 88, 36, 203, 36, 36, 36, 88, 
	36, 204, 36, 36, 36, 88, 36, 205, 
	36, 36, 36, 88, 36, 206, 36, 36, 
	36, 88, 36, 207, 36, 36, 36, 88, 
	36, 208, 209, 210, 211, 36, 36, 36, 
	88, 36, 212, 36, 36, 36, 88, 36, 
	213, 36, 36, 36, 88, 36, 214, 36, 
	36, 36, 88, 36, 215, 36, 36, 36, 
	88, 36, 216, 36, 36, 36, 88, 36, 
	217, 36, 36, 36, 88, 36, 218, 36, 
	36, 36, 88, 36, 219, 36, 36, 36, 
	88, 36, 220, 36, 36, 36, 88, 36, 
	221, 36, 36, 36, 88, 36, 222, 36, 
	36, 36, 88, 36, 223, 36, 36, 36, 
	88, 36, 224, 36, 36, 36, 88, 36, 
	225, 36, 36, 36, 88, 36, 226, 227, 
	228, 36, 36, 36, 88, 36, 229, 36, 
	36, 36, 88, 36, 230, 36, 36, 36, 
	88, 36, 231, 232, 36, 36, 36, 88, 
	36, 233, 36, 36, 36, 88, 36, 234, 
	36, 36, 36, 88, 36, 235, 36, 36, 
	36, 88, 36, 236, 36, 36, 36, 88, 
	36, 237, 36, 36, 36, 88, 36, 238, 
	36, 36, 36, 88, 36, 239, 36, 36, 
	36, 88, 36, 240, 36, 36, 36, 88, 
	36, 241, 36, 36, 36, 88, 36, 242, 
	36, 36, 36, 88, 36, 243, 36, 36, 
	36, 88, 36, 244, 36, 36, 36, 88, 
	36, 245, 36, 36, 36, 88, 36, 246, 
	36, 36, 36, 88, 36, 247, 36, 36, 
	36, 88, 36, 248, 36, 36, 36, 88, 
	36, 249, 36, 36, 36, 88, 36, 250, 
	36, 36, 36, 88, 36, 251, 252, 253, 
	254, 255, 256, 36, 36, 36, 88, 36, 
	257, 36, 36, 36, 88, 36, 258, 36, 
	36, 36, 88, 36, 259, 36, 36, 36, 
	88, 36, 260, 36, 36, 36, 88, 36, 
	261, 36, 36, 36, 88, 36, 262, 36, 
	36, 36, 88, 36, 263, 264, 36, 36, 
	36, 88, 36, 265, 36, 36, 36, 88, 
	36, 266, 36, 36, 36, 88, 36, 267, 
	36, 36, 36, 88, 36, 268, 36, 36, 
	36, 88, 36, 269, 36, 36, 36, 88, 
	36, 270, 36, 36, 36, 88, 36, 271, 
	272, 36, 36, 36, 88, 36, 273, 36, 
	36, 36, 88, 36, 274, 36, 36, 36, 
	88, 36, 275, 36, 36, 36, 88, 36, 
	276, 36, 36, 36, 88, 36, 277, 36, 
	36, 36, 88, 36, 278, 36, 36, 36, 
	88, 36, 279, 36, 36, 36, 88, 36, 
	280, 36, 36, 36, 88, 36, 281, 36, 
	36, 36, 88, 36, 282, 36, 36, 36, 
	88, 36, 283, 284, 36, 36, 36, 88, 
	36, 285, 36, 36, 36, 88, 36, 286, 
	36, 36, 36, 88, 36, 287, 36, 36, 
	36, 88, 36, 288, 36, 36, 36, 88, 
	36, 289, 290, 36, 36, 36, 88, 36, 
	291, 36, 36, 36, 88, 36, 292, 36, 
	36, 36, 88, 36, 293, 36, 36, 36, 
	88, 36, 294, 295, 36, 36, 36, 88, 
	36, 296, 297, 36, 36, 36, 88, 36, 
	298, 36, 36, 36, 88, 36, 299, 36, 
	36, 36, 88, 36, 300, 301, 36, 36, 
	36, 88, 36, 302, 36, 36, 36, 88, 
	36, 303, 36, 36, 36, 88, 36, 304, 
	36, 36, 36, 88, 36, 305, 36, 36, 
	36, 88, 36, 306, 36, 36, 36, 88, 
	36, 307, 36, 36, 36, 88, 36, 308, 
	36, 36, 36, 88, 36, 309, 36, 36, 
	36, 88, 36, 310, 36, 36, 36, 88, 
	36, 311, 312, 36, 36, 36, 88, 36, 
	313, 36, 36, 36, 88, 36, 314, 36, 
	36, 36, 88, 36, 315, 36, 36, 36, 
	88, 36, 316, 36, 36, 36, 88, 36, 
	317, 36, 36, 36, 88, 36, 318, 319, 
	36, 36, 36, 88, 36, 320, 36, 36, 
	36, 88, 36, 321, 36, 36, 36, 88, 
	36, 322, 36, 36, 36, 88, 36, 323, 
	36, 36, 36, 88, 36, 324, 36, 36, 
	36, 88, 36, 325, 36, 36, 36, 88, 
	36, 326, 327, 36, 36, 36, 88, 36, 
	328, 36, 36, 36, 88, 36, 329, 36, 
	36, 36, 88, 36, 330, 36, 36, 36, 
	88, 331, 36, 36, 36, 88, 36, 332, 
	36, 36, 36, 88, 36, 333, 36, 36, 
	36, 88, 36, 334, 36, 36, 36, 88, 
	36, 335, 36, 36, 36, 88, 336, 337, 
	57, 0
};

static const unsigned char _axl_jnc_trans_targs[] = {
	6, 0, 6, 6, 10, 1, 6, 6, 
	14, 6, 6, 3, 3, 4, 6, 6, 
	23, 6, 7, 6, 8, 9, 11, 12, 
	13, 15, 16, 17, 18, 19, 21, 22, 
	24, 25, 27, 28, 30, 31, 32, 35, 
	48, 63, 86, 95, 103, 105, 116, 129, 
	144, 161, 166, 191, 200, 214, 227, 236, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 2, 20, 
	6, 6, 6, 5, 6, 6, 26, 6, 
	6, 6, 6, 6, 29, 6, 6, 6, 
	6, 33, 34, 30, 36, 43, 45, 37, 
	38, 39, 40, 41, 42, 30, 44, 30, 
	46, 47, 30, 49, 51, 53, 56, 50, 
	30, 52, 30, 54, 55, 30, 57, 58, 
	59, 30, 60, 61, 62, 30, 64, 69, 
	73, 65, 66, 67, 68, 30, 6, 70, 
	71, 72, 30, 74, 75, 76, 81, 77, 
	78, 79, 80, 30, 82, 83, 84, 85, 
	30, 87, 89, 88, 30, 90, 93, 91, 
	92, 30, 94, 6, 30, 96, 99, 102, 
	97, 98, 30, 100, 101, 30, 30, 104, 
	30, 30, 106, 107, 6, 108, 109, 110, 
	30, 111, 30, 30, 30, 112, 113, 114, 
	115, 30, 117, 127, 118, 119, 120, 121, 
	122, 123, 124, 125, 126, 30, 128, 30, 
	130, 137, 138, 142, 131, 132, 133, 134, 
	135, 136, 30, 30, 139, 140, 141, 30, 
	143, 30, 145, 147, 157, 146, 30, 148, 
	152, 149, 150, 151, 30, 153, 154, 155, 
	156, 30, 158, 159, 160, 30, 162, 163, 
	164, 165, 30, 167, 169, 170, 173, 180, 
	187, 168, 30, 30, 171, 172, 30, 174, 
	177, 175, 176, 30, 178, 179, 30, 181, 
	184, 182, 183, 30, 185, 186, 30, 188, 
	189, 190, 30, 192, 194, 193, 30, 195, 
	196, 197, 199, 198, 30, 30, 201, 211, 
	202, 204, 203, 30, 205, 207, 206, 30, 
	208, 209, 210, 30, 212, 213, 30, 215, 
	220, 216, 217, 218, 219, 30, 221, 222, 
	30, 223, 224, 225, 226, 30, 228, 233, 
	229, 230, 231, 232, 30, 234, 235, 30, 
	6, 6
};

static const short _axl_jnc_trans_actions[] = {
	89, 0, 94, 53, 277, 0, 91, 51, 
	274, 87, 49, 0, 1, 0, 55, 85, 
	0, 57, 0, 97, 0, 280, 0, 0, 
	280, 0, 0, 0, 7, 7, 7, 0, 
	0, 0, 0, 0, 271, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	81, 83, 11, 73, 31, 19, 41, 71, 
	27, 21, 33, 23, 35, 25, 0, 0, 
	29, 79, 75, 0, 77, 47, 0, 13, 
	65, 37, 9, 15, 0, 67, 39, 43, 
	69, 0, 0, 151, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 139, 0, 160, 
	0, 0, 244, 0, 0, 0, 0, 0, 
	256, 0, 181, 0, 0, 202, 0, 0, 
	0, 124, 0, 0, 0, 247, 0, 0, 
	0, 0, 0, 0, 0, 259, 63, 0, 
	0, 0, 178, 0, 0, 0, 0, 0, 
	0, 0, 0, 226, 0, 0, 0, 0, 
	229, 0, 0, 0, 235, 0, 0, 0, 
	0, 109, 0, 61, 193, 0, 0, 0, 
	0, 0, 265, 0, 0, 175, 238, 0, 
	211, 232, 0, 0, 59, 0, 0, 0, 
	163, 0, 166, 169, 172, 0, 0, 0, 
	0, 205, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 136, 0, 187, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 100, 217, 0, 0, 0, 148, 
	0, 268, 0, 0, 0, 0, 106, 0, 
	0, 0, 0, 0, 121, 0, 0, 0, 
	0, 208, 0, 0, 0, 118, 0, 0, 
	0, 0, 250, 0, 0, 0, 0, 0, 
	0, 0, 142, 214, 0, 0, 184, 0, 
	0, 0, 0, 130, 0, 0, 220, 0, 
	0, 0, 0, 115, 0, 0, 196, 0, 
	0, 0, 253, 0, 0, 0, 262, 0, 
	0, 0, 0, 0, 112, 223, 0, 0, 
	0, 0, 0, 199, 0, 0, 0, 145, 
	0, 0, 0, 133, 0, 0, 103, 0, 
	0, 0, 0, 0, 0, 157, 0, 0, 
	154, 0, 0, 0, 0, 127, 0, 0, 
	0, 0, 0, 0, 190, 0, 0, 241, 
	45, 17
};

static const short _axl_jnc_to_state_actions[] = {
	0, 0, 0, 0, 0, 0, 3, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0
};

static const short _axl_jnc_from_state_actions[] = {
	0, 0, 0, 0, 0, 0, 5, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0
};

static const short _axl_jnc_eof_trans[] = {
	1, 1, 10, 10, 10, 16, 0, 57, 
	58, 58, 60, 58, 58, 58, 64, 58, 
	58, 58, 58, 58, 74, 75, 75, 77, 
	58, 58, 81, 58, 58, 86, 1, 58, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 135, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 164, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 181, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 58
};

static const int axl_jnc_start = 6;
static const int axl_jnc_first_final = 6;
static const int axl_jnc_error = -1;

static const int axl_jnc_en_main = 6;


/* #line 170 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */


//.............................................................................

void 
CLexer::Init ()
{
	
/* #line 776 "axl_jnc_Lexer.cpp" */
	{
	cs = axl_jnc_start;
	ts = 0;
	te = 0;
	act = 0;
	}

/* #line 178 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
}

bool
CLexer::Exec ()
{
	
/* #line 782 "axl_jnc_Lexer.cpp" */
	{
	int _klen;
	unsigned int _trans;
	const char *_acts;
	unsigned int _nacts;
	const char *_keys;

	if ( p == pe )
		goto _test_eof;
_resume:
	_acts = _axl_jnc_actions + _axl_jnc_from_state_actions[cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 2:
/* #line 1 "NONE" */
	{ts = p;}
	break;
/* #line 799 "axl_jnc_Lexer.cpp" */
		}
	}

	_keys = _axl_jnc_trans_keys + _axl_jnc_key_offsets[cs];
	_trans = _axl_jnc_index_offsets[cs];

	_klen = _axl_jnc_single_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( (*p) < *_mid )
				_upper = _mid - 1;
			else if ( (*p) > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (unsigned int)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _axl_jnc_range_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( (*p) < _mid[0] )
				_upper = _mid - 2;
			else if ( (*p) > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += (unsigned int)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	_trans = _axl_jnc_indicies[_trans];
_eof_trans:
	cs = _axl_jnc_trans_targs[_trans];

	if ( _axl_jnc_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _axl_jnc_actions + _axl_jnc_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 0:
/* #line 44 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{ NewLine (p + 1); }
	break;
	case 3:
/* #line 1 "NONE" */
	{te = p+1;}
	break;
	case 4:
/* #line 58 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 1;}
	break;
	case 5:
/* #line 59 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 2;}
	break;
	case 6:
/* #line 60 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 3;}
	break;
	case 7:
/* #line 61 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 4;}
	break;
	case 8:
/* #line 63 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 5;}
	break;
	case 9:
/* #line 64 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 6;}
	break;
	case 10:
/* #line 66 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 7;}
	break;
	case 11:
/* #line 67 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 8;}
	break;
	case 12:
/* #line 69 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 9;}
	break;
	case 13:
/* #line 70 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 10;}
	break;
	case 14:
/* #line 71 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 11;}
	break;
	case 15:
/* #line 72 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 12;}
	break;
	case 16:
/* #line 73 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 13;}
	break;
	case 17:
/* #line 74 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 14;}
	break;
	case 18:
/* #line 75 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 15;}
	break;
	case 19:
/* #line 76 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 16;}
	break;
	case 20:
/* #line 77 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 17;}
	break;
	case 21:
/* #line 79 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 18;}
	break;
	case 22:
/* #line 80 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 19;}
	break;
	case 23:
/* #line 81 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 20;}
	break;
	case 24:
/* #line 82 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 21;}
	break;
	case 25:
/* #line 83 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 22;}
	break;
	case 26:
/* #line 84 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 23;}
	break;
	case 27:
/* #line 85 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 24;}
	break;
	case 28:
/* #line 86 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 25;}
	break;
	case 29:
/* #line 87 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 26;}
	break;
	case 30:
/* #line 88 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 27;}
	break;
	case 31:
/* #line 90 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 29;}
	break;
	case 32:
/* #line 91 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 30;}
	break;
	case 33:
/* #line 92 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 31;}
	break;
	case 34:
/* #line 93 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 32;}
	break;
	case 35:
/* #line 96 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 34;}
	break;
	case 36:
/* #line 97 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 35;}
	break;
	case 37:
/* #line 98 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 36;}
	break;
	case 38:
/* #line 99 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 37;}
	break;
	case 39:
/* #line 100 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 38;}
	break;
	case 40:
/* #line 101 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 39;}
	break;
	case 41:
/* #line 102 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 40;}
	break;
	case 42:
/* #line 103 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 41;}
	break;
	case 43:
/* #line 105 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 42;}
	break;
	case 44:
/* #line 106 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 43;}
	break;
	case 45:
/* #line 107 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 44;}
	break;
	case 46:
/* #line 108 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 45;}
	break;
	case 47:
/* #line 109 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 46;}
	break;
	case 48:
/* #line 111 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 47;}
	break;
	case 49:
/* #line 112 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 48;}
	break;
	case 50:
/* #line 113 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 49;}
	break;
	case 51:
/* #line 114 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 50;}
	break;
	case 52:
/* #line 116 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 52;}
	break;
	case 53:
/* #line 117 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 53;}
	break;
	case 54:
/* #line 118 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 54;}
	break;
	case 55:
/* #line 119 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 55;}
	break;
	case 56:
/* #line 120 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 56;}
	break;
	case 57:
/* #line 121 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 57;}
	break;
	case 58:
/* #line 123 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 58;}
	break;
	case 59:
/* #line 124 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 59;}
	break;
	case 60:
/* #line 125 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 60;}
	break;
	case 61:
/* #line 155 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 84;}
	break;
	case 62:
/* #line 156 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 85;}
	break;
	case 63:
/* #line 157 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 86;}
	break;
	case 64:
/* #line 166 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{act = 92;}
	break;
	case 65:
/* #line 129 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Eq); }}
	break;
	case 66:
/* #line 130 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Ne); }}
	break;
	case 67:
/* #line 131 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Le); }}
	break;
	case 68:
/* #line 132 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Ge); }}
	break;
	case 69:
/* #line 133 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_LogicalOr); }}
	break;
	case 70:
/* #line 134 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_LogicalAnd); }}
	break;
	case 71:
/* #line 137 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Inc); }}
	break;
	case 72:
/* #line 138 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Dec); }}
	break;
	case 73:
/* #line 139 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Ptr); }}
	break;
	case 74:
/* #line 140 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_MulAssign); }}
	break;
	case 75:
/* #line 141 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_DivAssign); }}
	break;
	case 76:
/* #line 142 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_ModAssign); }}
	break;
	case 77:
/* #line 143 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_AddAssign); }}
	break;
	case 78:
/* #line 144 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_SubAssign); }}
	break;
	case 79:
/* #line 145 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_ShlAssign); }}
	break;
	case 80:
/* #line 146 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_ShrAssign); }}
	break;
	case 81:
/* #line 147 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_AndAssign); }}
	break;
	case 82:
/* #line 148 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_XorAssign); }}
	break;
	case 83:
/* #line 149 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_OrAssign); }}
	break;
	case 84:
/* #line 150 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_RefAssign); }}
	break;
	case 85:
/* #line 151 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (EToken_Ellipsis); }}
	break;
	case 86:
/* #line 156 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateCharToken (EToken_Integer); }}
	break;
	case 87:
/* #line 157 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateStringToken (EToken_Literal, 1, 1); }}
	break;
	case 88:
/* #line 162 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;}
	break;
	case 89:
/* #line 164 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;}
	break;
	case 90:
/* #line 166 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p+1;{ CreateToken (ts [0]); }}
	break;
	case 91:
/* #line 89 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateToken (EToken_Int); }}
	break;
	case 92:
/* #line 95 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateToken (EToken_Enum); }}
	break;
	case 93:
/* #line 115 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateToken (EToken_Do); }}
	break;
	case 94:
/* #line 135 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateToken (EToken_Shl); }}
	break;
	case 95:
/* #line 136 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateToken (EToken_Shr); }}
	break;
	case 96:
/* #line 155 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateStringToken (EToken_Identifier); }}
	break;
	case 97:
/* #line 156 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateCharToken (EToken_Integer); }}
	break;
	case 98:
/* #line 157 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateStringToken (EToken_Literal, 1, 1); }}
	break;
	case 99:
/* #line 158 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateIntegerToken (10); }}
	break;
	case 100:
/* #line 159 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateIntegerToken (16, 2); }}
	break;
	case 101:
/* #line 161 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;}
	break;
	case 102:
/* #line 164 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;}
	break;
	case 103:
/* #line 166 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{te = p;p--;{ CreateToken (ts [0]); }}
	break;
	case 104:
/* #line 158 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{{p = ((te))-1;}{ CreateIntegerToken (10); }}
	break;
	case 105:
/* #line 166 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */
	{{p = ((te))-1;}{ CreateToken (ts [0]); }}
	break;
	case 106:
/* #line 1 "NONE" */
	{	switch( act ) {
	case 1:
	{{p = ((te))-1;} CreateToken (EToken_Namespace); }
	break;
	case 2:
	{{p = ((te))-1;} CreateToken (EToken_Using); }
	break;
	case 3:
	{{p = ((te))-1;} CreateToken (EToken_Pack); }
	break;
	case 4:
	{{p = ((te))-1;} CreateToken (EToken_Endian); }
	break;
	case 5:
	{{p = ((te))-1;} CreateToken (EToken_Typedef); }
	break;
	case 6:
	{{p = ((te))-1;} CreateToken (EToken_Static); }
	break;
	case 7:
	{{p = ((te))-1;} CreateToken (EToken_Public); }
	break;
	case 8:
	{{p = ((te))-1;} CreateToken (EToken_Private); }
	break;
	case 9:
	{{p = ((te))-1;} CreateToken (EToken_Const); }
	break;
	case 10:
	{{p = ((te))-1;} CreateToken (EToken_Volatile); }
	break;
	case 11:
	{{p = ((te))-1;} CreateToken (EToken_Signed); }
	break;
	case 12:
	{{p = ((te))-1;} CreateToken (EToken_Unsigned); }
	break;
	case 13:
	{{p = ((te))-1;} CreateToken (EToken_LittleEndian); }
	break;
	case 14:
	{{p = ((te))-1;} CreateToken (EToken_BigEndian); }
	break;
	case 15:
	{{p = ((te))-1;} CreateToken (EToken_Safe); }
	break;
	case 16:
	{{p = ((te))-1;} CreateToken (EToken_Unsafe); }
	break;
	case 17:
	{{p = ((te))-1;} CreateToken (EToken_NoNull); }
	break;
	case 18:
	{{p = ((te))-1;} CreateToken (EToken_Auto); }
	break;
	case 19:
	{{p = ((te))-1;} CreateToken (EToken_Void); }
	break;
	case 20:
	{{p = ((te))-1;} CreateToken (EToken_Variant); }
	break;
	case 21:
	{{p = ((te))-1;} CreateToken (EToken_Bool); }
	break;
	case 22:
	{{p = ((te))-1;} CreateToken (EToken_Int8); }
	break;
	case 23:
	{{p = ((te))-1;} CreateToken (EToken_Int16); }
	break;
	case 24:
	{{p = ((te))-1;} CreateToken (EToken_Int32); }
	break;
	case 25:
	{{p = ((te))-1;} CreateToken (EToken_Int64); }
	break;
	case 26:
	{{p = ((te))-1;} CreateToken (EToken_Float); }
	break;
	case 27:
	{{p = ((te))-1;} CreateToken (EToken_Double); }
	break;
	case 29:
	{{p = ((te))-1;} CreateToken (EToken_Char); }
	break;
	case 30:
	{{p = ((te))-1;} CreateToken (EToken_Short); }
	break;
	case 31:
	{{p = ((te))-1;} CreateToken (EToken_Long); }
	break;
	case 32:
	{{p = ((te))-1;} CreateToken (EToken_WChar); }
	break;
	case 34:
	{{p = ((te))-1;} CreateToken (EToken_EnumC); }
	break;
	case 35:
	{{p = ((te))-1;} CreateToken (EToken_Struct); }
	break;
	case 36:
	{{p = ((te))-1;} CreateToken (EToken_Union); }
	break;
	case 37:
	{{p = ((te))-1;} CreateToken (EToken_Class); }
	break;
	case 38:
	{{p = ((te))-1;} CreateToken (EToken_Interface); }
	break;
	case 39:
	{{p = ((te))-1;} CreateToken (EToken_Property); }
	break;
	case 40:
	{{p = ((te))-1;} CreateToken (EToken_Get); }
	break;
	case 41:
	{{p = ((te))-1;} CreateToken (EToken_Set); }
	break;
	case 42:
	{{p = ((te))-1;} CreateToken (EToken_New); }
	break;
	case 43:
	{{p = ((te))-1;} CreateToken (EToken_SizeOf); }
	break;
	case 44:
	{{p = ((te))-1;} CreateToken (EToken_TypeOf); }
	break;
	case 45:
	{{p = ((te))-1;} CreateToken (EToken_DynaSizeOf); }
	break;
	case 46:
	{{p = ((te))-1;} CreateToken (EToken_DynaTypeOf); }
	break;
	case 47:
	{{p = ((te))-1;} CreateToken (EToken_If); }
	break;
	case 48:
	{{p = ((te))-1;} CreateToken (EToken_Else); }
	break;
	case 49:
	{{p = ((te))-1;} CreateToken (EToken_For); }
	break;
	case 50:
	{{p = ((te))-1;} CreateToken (EToken_While); }
	break;
	case 52:
	{{p = ((te))-1;} CreateToken (EToken_Break); }
	break;
	case 53:
	{{p = ((te))-1;} CreateToken (EToken_Continue); }
	break;
	case 54:
	{{p = ((te))-1;} CreateToken (EToken_Return); }
	break;
	case 55:
	{{p = ((te))-1;} CreateToken (EToken_Switch); }
	break;
	case 56:
	{{p = ((te))-1;} CreateToken (EToken_Case); }
	break;
	case 57:
	{{p = ((te))-1;} CreateToken (EToken_Default); }
	break;
	case 58:
	{{p = ((te))-1;} CreateToken (EToken_True); }
	break;
	case 59:
	{{p = ((te))-1;} CreateToken (EToken_False); }
	break;
	case 60:
	{{p = ((te))-1;} CreateToken (EToken_Null); }
	break;
	case 84:
	{{p = ((te))-1;} CreateStringToken (EToken_Identifier); }
	break;
	case 85:
	{{p = ((te))-1;} CreateCharToken (EToken_Integer); }
	break;
	case 86:
	{{p = ((te))-1;} CreateStringToken (EToken_Literal, 1, 1); }
	break;
	case 92:
	{{p = ((te))-1;} CreateToken (ts [0]); }
	break;
	}
	}
	break;
/* #line 1364 "axl_jnc_Lexer.cpp" */
		}
	}

_again:
	_acts = _axl_jnc_actions + _axl_jnc_to_state_actions[cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 1:
/* #line 1 "NONE" */
	{ts = 0;}
	break;
/* #line 1375 "axl_jnc_Lexer.cpp" */
		}
	}

	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	if ( _axl_jnc_eof_trans[cs] > 0 ) {
		_trans = _axl_jnc_eof_trans[cs] - 1;
		goto _eof_trans;
	}
	}

	}

/* #line 184 "D:/Prj/Ninja/axl3/axl_jnc/axl_jnc_Lexer.rl" */

	bool Result = cs != axl_jnc_error;
	if (!Result)
	{
		CToken* pToken = CreateToken (EToken_Error);
		pToken->m_Data.m_Error = err::CError ("lexer error");
	}

	return Result;
}

//.............................................................................

} // namespace axl {
} // namespace jnc {
