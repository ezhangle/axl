//.............................................................................

class
{
	CClassType* m_pType;
	CDeclarator m_Declarator;
}
autoev_specifier
	: EToken_AutoEv
	  EToken_Identifier $n?
	  (function_suffix $a <&$.m_Declarator>)?
		{
			$.m_pType = DeclareAutoEvType (
				IsValidLocator ($n) ? $n.m_Data.m_String : rtl::CString (),
				&$.m_Declarator
				);

			if (!$.m_pType)
				return false;
		}
	  (
		resolver ({ return m_Stage == EStage_Pass1 }) 
		function_body_pass1 $b
			{
				$.m_pType->SetAutoEvBody (&$b.m_TokenList);
			}
	  |	autoev_body <$.m_pType> 
	  )	  
	;

start
autoev_body <CClassType* $pType>
	: 
		{
			m_pAutoEvType = $pType;
		}
	  '{' autoev_stmt <$pType>* '}'
		{
			m_pAutoEvType = NULL;
		}
	;
	
autoev_stmt <CClassType* $pType>
	: 
		{
			return PreAutoEvExpression ();
		}
	  expression ';'
		{
			return PostAutoEvExpression ($1.m_Value);
		}
	| ';'
	;

//.............................................................................

