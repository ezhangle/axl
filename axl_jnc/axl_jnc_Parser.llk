import "axl_jnc_Decl.llk";
import "axl_jnc_Expr.llk";
import "axl_jnc_Stmt.llk";

import "axl_jnc_AttributeBlock.llk";
import "axl_jnc_NamespaceDeclaration.llk";
import "axl_jnc_CommonDeclaration.llk";
import "axl_jnc_EnumSpecifier.llk";
import "axl_jnc_StructSpecifier.llk";
import "axl_jnc_ClassSpecifier.llk";
import "axl_jnc_PropertySpecifier.llk";

//.............................................................................

LL (2);

start
compilation_unit
	: global_declaration*
	;

//.............................................................................

ParserClassName = CParser;

Includes
{
	#include "axl_jnc_Lexer.h"
	#include "axl_jnc_Module.h"
	#include "axl_jnc_Decl.h"
	#include "axl_llk_Parser.h"
}

Members
{
	enum EStage
	{
		EStage_Pass1, // global declarations (before linkage)
		EStage_Pass2, // statements and expressions (after linkage)
	};

	CModule* m_pModule;
	size_t m_StructPackFactor;
	size_t m_DefaultStructPackFactor;
	EStage m_Stage;

	rtl::CArrayT <CTypeSpecifier*> m_TypeSpecifierStack;

	CParser ()
	{
		m_pModule = NULL;
		m_StructPackFactor = 8;
		m_DefaultStructPackFactor = 8;
		m_Stage = EStage_Pass1;
	}

	CType*
	FindType (const CQualifiedName& Name);

	void
	PushTypeSpecifier (CTypeSpecifier* pTypeSpecifier)
	{
		m_TypeSpecifierStack.Append (pTypeSpecifier);
	}

	void
	PopTypeSpecifier (CTypeSpecifier* pTypeSpecifier)
	{
		m_TypeSpecifierStack.Pop ();
	}

	bool
	IsTypeSpecified ();

	bool
	Declare (
		CDeclSpecifiers* pDeclSpecifiers,
		CDeclarator* pDeclarator
		);

	CClassType*
	DeclareClassType (
		EType TypeKind,
		rtl::CString& Name
		);

	CStructType*
	DeclareStructType (
		EType TypeKind,
		rtl::CString& Name
		);

	CEnumType*
	DeclareEnumType (
		EType TypeKind,
		rtl::CString& Name
		);

	bool
	DeclareStructMember (
		CStructType* pStructType,
		CTypeSpecifierModifiers* pTypeSpecifier,
		CDeclarator* pDeclarator
		);

	bool
	DeclareClassMember (
		CClassType* pClassType,
		CDeclSpecifiers* pDeclSpecifiers,
		CDeclarator* pDeclarator
		);

	bool
	DeclareFormalArg (
		CDeclFunctionSuffix* pArgSuffix,
		CTypeSpecifierModifiers* pTypeSpecifier,
		CDeclarator* pDeclarator,
		CValue* pDefaultValue
		);

	bool
	DeclarePropertyAccessor (
		CPropertyBlock* pBlock,
		CTypeSpecifierModifiers* pTypeSpecifier,
		CDeclarator* pDeclarator
		);

	CProperty*
	CreateProperty (
		CFunction* pGetter,
		const CFunctionOverload& Setter
		);

	void
	SetSimplePropertyPos (
		CProperty* pProperty,
		const CToken::CPos& Pos
		);
} 

OpenNamespace
{.
	namespace axl {
	namespace jnc {
.}

CloseNamespace
{.
	} // namespace axl {
	} // namespace jnc {
.}

//.............................................................................
