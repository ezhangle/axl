namespace log {

//.............................................................................

fenum EPacketCodeFlags
{
	Foldable          = 0x80000000,
	MergeableBackward = 0x40000000,
	MergeableForward  = 0x20000000,
	Mergeable         = 0x60000000,
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

fenum ELineAttrFlags
{
	TileIcon,
	Delimiter,
	Override,
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

struct TLineAttr: gui.TTextAttr
{
	ELineAttrFlags m_Flags;
	uint_t m_IconIdx;
}

//.............................................................................

enum EPart
{
	PlainText = 0,
	HyperText,
	Bin,
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

class IRepresenterTarget
{
	pubconst uint_t m_PacketCode;
	pubconst uint64_t m_Timestamp;

	TLineAttr m_LineAttr;

	abstract
	void 
	AddPart (
		EPart PartKind,
		uint_t PartCode,
		const void* p,
		size_t Size
		);

	void
	AddHyperText (
		uint_t PartCode,
		const char* pText
		)
	{
		AddPart (EPart.HyperText, PartCode, pText, jnc.StrLen (pText));
	}

	void
	AddHyperText (const char* pText)
	{
		AddPart (EPart.HyperText, m_PacketCode, pText, jnc.StrLen (pText));
	}

	void
	AddBin (
		uint_t PartCode,
		const void* p,
		size_t Size
		)
	{
		AddPart (EPart.Bin, PartCode, p, Size);
	}

	void
	AddBin (
		const void* p,
		size_t Size
		)
	{
		AddPart (EPart.Bin, m_PacketCode, p, Size);
	}
}

//.............................................................................

class IRepresenter
{
	abstract
	bool 
	Represent (
		IRepresenterTarget* pTarget,
		uint_t PacketCode, 
		const void* p, 
		size_t Size, 
		uint64_t FoldFlags
		);
}

//.............................................................................

} // namespace log {