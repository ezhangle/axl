----------------------
27/02/2019 18:01:32 - C:\Projects\repos\ioninja\axl\dependencies.cmake
----------------------
[-] set (
[+] set(
[-] set (
[+] set(
[-] if (UNIX AND NOT APPLE)
[+] if(UNIX AND NOT APPLE)
[-] 	set (AXL_IMPORT_LIST ${AXL_IMPORT_LIST} OPTIONAL libudev)
[+] 	set(AXL_IMPORT_LIST ${AXL_IMPORT_LIST} OPTIONAL libudev)
[-] endif ()
[+] endif()
[-] set (
[+] set(
----------------------
27/02/2019 18:01:32 - C:\Projects\repos\ioninja\axl\version.cmake
----------------------
[-] set (AXL_VERSION_MAJOR     6)
[+] set(AXL_VERSION_MAJOR     6)
[-] set (AXL_VERSION_MINOR     2)
[+] set(AXL_VERSION_MINOR     2)
[-] set (AXL_VERSION_REVISION  1)
[+] set(AXL_VERSION_REVISION  1)
[-] set (AXL_VERSION_TAG)
[+] set(AXL_VERSION_TAG)
[-] set (AXL_VERSION_FULL      "${AXL_VERSION_MAJOR}.${AXL_VERSION_MINOR}.${AXL_VERSION_REVISION}")
[+] set(AXL_VERSION_FULL      "${AXL_VERSION_MAJOR}.${AXL_VERSION_MINOR}.${AXL_VERSION_REVISION}")
[-] if (NOT "${AXL_VERSION_TAG}" STREQUAL "")
[+] if(NOT "${AXL_VERSION_TAG}" STREQUAL "")
[-] 	set (AXL_VERSION_TAG_SUFFIX " ${AXL_VERSION_TAG}")
[+] 	set(AXL_VERSION_TAG_SUFFIX " ${AXL_VERSION_TAG}")
[-] 	set (AXL_VERSION_FILE_SUFFIX "${AXL_VERSION_FULL}-${AXL_VERSION_TAG}")
[+] 	set(AXL_VERSION_FILE_SUFFIX "${AXL_VERSION_FULL}-${AXL_VERSION_TAG}")
[-] else ()
[+] else()
[-] 	set (AXL_VERSION_TAG_SUFFIX)
[+] 	set(AXL_VERSION_TAG_SUFFIX)
[-] 	set (AXL_VERSION_FILE_SUFFIX "${AXL_VERSION_FULL}")
[+] 	set(AXL_VERSION_FILE_SUFFIX "${AXL_VERSION_FULL}")
[-] endif ()
[+] endif()
[-] string (TIMESTAMP AXL_VERSION_YEAR  "%Y")
[+] string(TIMESTAMP AXL_VERSION_YEAR  "%Y")
[-] string (TIMESTAMP AXL_VERSION_MONTH "%m")
[+] string(TIMESTAMP AXL_VERSION_MONTH "%m")
[-] string (TIMESTAMP AXL_VERSION_DAY   "%d")
[+] string(TIMESTAMP AXL_VERSION_DAY   "%d")
[-] set (AXL_VERSION_COMPANY "Tibbo Technology Inc")
[+] set(AXL_VERSION_COMPANY "Tibbo Technology Inc")
[-] set (AXL_VERSION_YEARS   "2007-${AXL_VERSION_YEAR}")
[+] set(AXL_VERSION_YEARS   "2007-${AXL_VERSION_YEAR}")
----------------------
27/02/2019 18:01:32 - C:\Projects\repos\ioninja\axl\cmake\axl_cmake.cmake
----------------------
[-] if (AXL_CMAKE_ONCE)
[+] if(AXL_CMAKE_ONCE)
[-] 	return ()
[+] 	return()
[-] endif ()
[+] endif()
[-] set (AXL_CMAKE_ONCE TRUE)
[+] set(AXL_CMAKE_ONCE TRUE)
[-] macro (
[+] macro(
[-] 	set (_DIR_LIST ${ARGN})
[+] 	set(_DIR_LIST ${ARGN})
[-] 	set (_FILE_PATH ${_FILE_NAME}-NOTFOUND)
[+] 	set(_FILE_PATH ${_FILE_NAME}-NOTFOUND)
[-] 	foreach (_DIR ${_DIR_LIST})
[+] 	foreach(_DIR ${_DIR_LIST})
[-] 		if (EXISTS ${_DIR}/${_FILE_NAME})
[+] 		if(EXISTS ${_DIR}/${_FILE_NAME})
[-] 			set (_FILE_PATH ${_DIR}/${_FILE_NAME})
[+] 			set(_FILE_PATH ${_DIR}/${_FILE_NAME})
[-] 			break ()
[+] 			break()
[-] 		endif ()
[+] 		endif()
[-] 	endforeach ()
[+] 	endforeach()
[-] 	set (${_RESULT} ${_FILE_PATH})
[+] 	set(${_RESULT} ${_FILE_PATH})
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	set (_DIR ${_START_DIR})
[+] 	set(_DIR ${_START_DIR})
[-] 	while (TRUE)
[+] 	while(TRUE)
[-] 		if (EXISTS ${_DIR}/${_FILE_NAME})
[+] 		if(EXISTS ${_DIR}/${_FILE_NAME})
[-] 			set (_FILE_PATH ${_DIR}/${_FILE_NAME})
[+] 			set(_FILE_PATH ${_DIR}/${_FILE_NAME})
[-] 			break ()
[+] 			break()
[-] 		endif ()
[+] 		endif()
[-] 		get_filename_component (_PARENT_DIR "${_DIR}/.." ABSOLUTE)
[+] 		get_filename_component(_PARENT_DIR "${_DIR}/.." ABSOLUTE)
[-] 		if (${_DIR} STREQUAL ${_PARENT_DIR})
[+] 		if(${_DIR} STREQUAL ${_PARENT_DIR})
[-] 			set (_FILE_PATH ${_FILE_NAME}-NOTFOUND)
[+] 			set(_FILE_PATH ${_FILE_NAME}-NOTFOUND)
[-] 			break ()
[+] 			break()
[-] 		endif ()
[+] 		endif()
[-] 		set (_DIR ${_PARENT_DIR})
[+] 		set(_DIR ${_PARENT_DIR})
[-] 	endwhile ()
[+] 	endwhile()
[-] 	set (${_RESULT} ${_FILE_PATH})
[+] 	set(${_RESULT} ${_FILE_PATH})
[-] endmacro ()
[+] endmacro()
[-] get_filename_component (AXL_CMAKE_ORIGIN_DIR ${CMAKE_PARENT_LIST_FILE} DIRECTORY)
[+] get_filename_component(AXL_CMAKE_ORIGIN_DIR ${CMAKE_PARENT_LIST_FILE} DIRECTORY)
[-] set (AXL_CMAKE_ORIGIN_FILE ${CMAKE_PARENT_LIST_FILE})
[+] set(AXL_CMAKE_ORIGIN_FILE ${CMAKE_PARENT_LIST_FILE})
[-] if (NOT EXISTS ${AXL_CMAKE_ORIGIN_DIR}/dependencies.cmake)
[+] if(NOT EXISTS ${AXL_CMAKE_ORIGIN_DIR}/dependencies.cmake)
[-] 	message (FATAL_ERROR "dependencies.cmake not found at: ${AXL_CMAKE_ORIGIN_DIR}")
[+] 	message(FATAL_ERROR "dependencies.cmake not found at: ${AXL_CMAKE_ORIGIN_DIR}")
[-] endif ()
[+] endif()
[-] if (EXISTS "${CMAKE_CURRENT_LIST_DIR}/axl_init.cmake")
[+] if(EXISTS "${CMAKE_CURRENT_LIST_DIR}/axl_init.cmake")
[-] 	set (_AXL_INIT_CMAKE "${CMAKE_CURRENT_LIST_DIR}/axl_init.cmake")
[+] 	set(_AXL_INIT_CMAKE "${CMAKE_CURRENT_LIST_DIR}/axl_init.cmake")
[-] else ()
[+] else()
[-] 	if (NOT AXL_CMAKE_DIR)
[+] 	if(NOT AXL_CMAKE_DIR)
[-] 		axl_find_file_recurse_parent_dirs (_PATHS_CMAKE paths.cmake ${AXL_CMAKE_ORIGIN_DIR})
[+] 		axl_find_file_recurse_parent_dirs(_PATHS_CMAKE paths.cmake ${AXL_CMAKE_ORIGIN_DIR})
[-] 		if (NOT _PATHS_CMAKE)
[+] 		if(NOT _PATHS_CMAKE)
[-] 			include (${AXL_CMAKE_ORIGIN_DIR}/dependencies.cmake)
[+] 			include(${AXL_CMAKE_ORIGIN_DIR}/dependencies.cmake)
[-] 			string (REPLACE ";" " " _PATH_LIST "${AXL_PATH_LIST}")
[+] 			string(REPLACE ";" " " _PATH_LIST "${AXL_PATH_LIST}")
[-] 			message (FATAL_ERROR "AXL_CMAKE_DIR not found, create paths.cmake and fill it with definitions for: ${_PATH_LIST}")
[+] 			message(FATAL_ERROR "AXL_CMAKE_DIR not found, create paths.cmake and fill it with definitions for: ${_PATH_LIST}")
[-] 		endif ()
[+] 		endif()
[-] 		include (${_PATHS_CMAKE})
[+] 		include(${_PATHS_CMAKE})
[-] 		if (NOT AXL_CMAKE_DIR)
[+] 		if(NOT AXL_CMAKE_DIR)
[-] 			message (FATAL_ERROR "AXL_CMAKE_DIR not found, check your path definitions at: ${_PATHS_CMAKE}")
[+] 			message(FATAL_ERROR "AXL_CMAKE_DIR not found, check your path definitions at: ${_PATHS_CMAKE}")
[-] 		endif ()
[+] 		endif()
[-] 	endif ()
[+] 	endif()
[-] 	axl_find_file (_AXL_INIT_CMAKE axl_init.cmake ${AXL_CMAKE_DIR})
[+] 	axl_find_file(_AXL_INIT_CMAKE axl_init.cmake ${AXL_CMAKE_DIR})
[-] 	if (NOT _AXL_INIT_CMAKE)
[+] 	if(NOT _AXL_INIT_CMAKE)
[-] 		message (FATAL_ERROR "axl_init.cmake not found at AXL_CMAKE_DIR: ${AXL_CMAKE_DIR}")
[+] 		message(FATAL_ERROR "axl_init.cmake not found at AXL_CMAKE_DIR: ${AXL_CMAKE_DIR}")
[-] 	endif ()
[+] 	endif()
[-] endif ()
[+] endif()
[-] include (${_AXL_INIT_CMAKE} NO_POLICY_SCOPE)
[+] include(${_AXL_INIT_CMAKE} NO_POLICY_SCOPE)
----------------------
27/02/2019 18:01:32 - C:\Projects\repos\ioninja\axl\cmake\axl_init.cmake
----------------------
[-] get_filename_component (_FILE_NAME ${CMAKE_PARENT_LIST_FILE} NAME)
[+] get_filename_component(_FILE_NAME ${CMAKE_PARENT_LIST_FILE} NAME)
[-] if (NOT "${_FILE_NAME}" STREQUAL "axl_cmake.cmake" OR
[+] if(NOT "${_FILE_NAME}" STREQUAL "axl_cmake.cmake" OR
[-] 	message (FATAL_ERROR "Incorrect usage of axl_init.cmake!")
[+] 	message(FATAL_ERROR "Incorrect usage of axl_init.cmake!")
[-] endif ()
[+] endif()
[-] include (${CMAKE_CURRENT_LIST_DIR}/axl_utils.cmake)
[+] include(${CMAKE_CURRENT_LIST_DIR}/axl_utils.cmake)
[-] include (${CMAKE_CURRENT_LIST_DIR}/axl_std_settings.cmake)
[+] include(${CMAKE_CURRENT_LIST_DIR}/axl_std_settings.cmake)
[-] axl_create_std_settings ()
[+] axl_create_std_settings()
[-] axl_find_file_recurse_parent_dirs (
[+] axl_find_file_recurse_parent_dirs(
[-] axl_find_file_recurse_parent_dirs (
[+] axl_find_file_recurse_parent_dirs(
[-] if (AXL_SETTINGS_CMAKE)
[+] if(AXL_SETTINGS_CMAKE)
[-] 	include (${AXL_SETTINGS_CMAKE})
[+] 	include(${AXL_SETTINGS_CMAKE})
[-] endif ()
[+] endif()
[-] axl_apply_std_settings ()
[+] axl_apply_std_settings()
[-] axl_print_std_settings ()
[+] axl_print_std_settings()
[-] if (AXL_PATHS_CMAKE)
[+] if(AXL_PATHS_CMAKE)
[-] 	include (${AXL_PATHS_CMAKE})
[+] 	include(${AXL_PATHS_CMAKE})
[-] endif ()
[+] endif()
[-] include (${AXL_CMAKE_ORIGIN_DIR}/dependencies.cmake)
[+] include(${AXL_CMAKE_ORIGIN_DIR}/dependencies.cmake)
[-] get_cmake_property (_VARIABLE_LIST VARIABLES)
[+] get_cmake_property(_VARIABLE_LIST VARIABLES)
[-] string (REPLACE ";" "\$|^" _FILTER "^${AXL_PATH_LIST}\$")
[+] string(REPLACE ";" "\$|^" _FILTER "^${AXL_PATH_LIST}\$")
[-] axl_filter_list (_FILTERED_VARIABLE_LIST ${_FILTER} ${_VARIABLE_LIST})
[+] axl_filter_list(_FILTERED_VARIABLE_LIST ${_FILTER} ${_VARIABLE_LIST})
[-] if (_FILTERED_VARIABLE_LIST)
[+] if(_FILTERED_VARIABLE_LIST)
[-] 	message (STATUS "Dependency path definitions:")
[+] 	message(STATUS "Dependency path definitions:")
[-] 	axl_print_variable_list (
[+] 	axl_print_variable_list(
[-] endif ()
[+] endif()
[-] set (
[+] set(
[-] if (AXL_IMPORT_LIST)
[+] if(AXL_IMPORT_LIST)
[-] 	axl_import (${AXL_IMPORT_LIST})
[+] 	axl_import(${AXL_IMPORT_LIST})
[-] endif ()
[+] endif()
[-] enable_testing ()
[+] enable_testing()
----------------------
27/02/2019 18:01:32 - C:\Projects\repos\ioninja\axl\cmake\axl_std_settings.cmake
----------------------
[-] macro (
[+] macro(
[-] 	axl_detect_target_cpu (_CPU)
[+] 	axl_detect_target_cpu(_CPU)
[-] 	if (NOT GCC OR NOT ("${_CPU}" STREQUAL "x86" OR "${_CPU}" STREQUAL "amd64"))
[+] 	if(NOT GCC OR NOT("${_CPU}" STREQUAL "x86" OR "${_CPU}" STREQUAL "amd64"))
[-] 		set (TARGET_CPU ${_CPU})
[+] 		set(TARGET_CPU ${_CPU})
[-] 	else ()
[+] 	else()
[-] 		axl_create_setting (
[+] 		axl_create_setting(
[-] 	endif ()
[+] 	endif()
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	if ("${TARGET_CPU}" STREQUAL "amd64")
[+] 	if("${TARGET_CPU}" STREQUAL "amd64")
[-] 		set (CMAKE_SIZEOF_VOID_P 8)
[+] 		set(CMAKE_SIZEOF_VOID_P 8)
[-] 		set_property (GLOBAL PROPERTY FIND_LIBRARY_USE_LIB64_PATHS TRUE)
[+] 		set_property(GLOBAL PROPERTY FIND_LIBRARY_USE_LIB64_PATHS TRUE)
[-] 		set_property (GLOBAL PROPERTY FIND_LIBRARY_USE_LIB32_PATHS FALSE)
[+] 		set_property(GLOBAL PROPERTY FIND_LIBRARY_USE_LIB32_PATHS FALSE)
[-] 		if (GCC)
[+] 		if(GCC)
[-] 			set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m64 -mcx16")
[+] 			set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m64 -mcx16")
[-] 			set (CMAKE_C_FLAGS   "${CMAKE_C_FLAGS} -m64 -mcx16")
[+] 			set(CMAKE_C_FLAGS   "${CMAKE_C_FLAGS} -m64 -mcx16")
[-] 		endif ()
[+] 		endif()
[-] 	elseif ("${TARGET_CPU}" STREQUAL "x86")
[+] 	elseif("${TARGET_CPU}" STREQUAL "x86")
[-] 		set (CMAKE_SIZEOF_VOID_P 4)
[+] 		set(CMAKE_SIZEOF_VOID_P 4)
[-] 		set_property (GLOBAL PROPERTY FIND_LIBRARY_USE_LIB64_PATHS FALSE)
[+] 		set_property(GLOBAL PROPERTY FIND_LIBRARY_USE_LIB64_PATHS FALSE)
[-] 		set_property (GLOBAL PROPERTY FIND_LIBRARY_USE_LIB32_PATHS TRUE)
[+] 		set_property(GLOBAL PROPERTY FIND_LIBRARY_USE_LIB32_PATHS TRUE)
[-] 		if (GCC)
[+] 		if(GCC)
[-] 			set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m32")
[+] 			set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m32")
[-] 			set (CMAKE_C_FLAGS   "${CMAKE_C_FLAGS} -m32")
[+] 			set(CMAKE_C_FLAGS   "${CMAKE_C_FLAGS} -m32")
[-] 		endif ()
[+] 		endif()
[-] 	elseif (NOT "${TARGET_CPU}" MATCHES "arm")
[+] 	elseif(NOT "${TARGET_CPU}" MATCHES "arm")
[-] 		message (FATAL_ERROR "Unsupported CPU: ${TARGET_CPU}")
[+] 		message(FATAL_ERROR "Unsupported CPU: ${TARGET_CPU}")
[-] 	endif ()
[+] 	endif()
[-] 	set (AXL_CPU ${TARGET_CPU})
[+] 	set(AXL_CPU ${TARGET_CPU})
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	set (
[+] 	set(
[-] 	if (CMAKE_GENERATOR MATCHES "Visual Studio" OR
[+] 	if(CMAKE_GENERATOR MATCHES "Visual Studio" OR
[-] 		set (IS_MULTI_CONFIGURATION TRUE)
[+] 		set(IS_MULTI_CONFIGURATION TRUE)
[-] 	else ()
[+] 	else()
[-] 		set (IS_MULTI_CONFIGURATION FALSE)
[+] 		set(IS_MULTI_CONFIGURATION FALSE)
[-] 		axl_create_setting (
[+] 		axl_create_setting(
[-] 	endif ()
[+] 	endif()
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	if (CMAKE_GENERATOR MATCHES "Visual Studio")
[+] 	if(CMAKE_GENERATOR MATCHES "Visual Studio")
[-] 		set (CONFIGURATION     "$(Configuration)")
[+] 		set(CONFIGURATION     "$(Configuration)")
[-] 		set (CONFIGURATION_MCG "$(Configuration)")
[+] 		set(CONFIGURATION_MCG "$(Configuration)")
[-] 		set (CONFIGURATION_SCG)
[+] 		set(CONFIGURATION_SCG)
[-] 	elseif (CMAKE_GENERATOR MATCHES "Xcode")
[+] 	elseif(CMAKE_GENERATOR MATCHES "Xcode")
[-] 		set (CONFIGURATION     "$(CONFIGURATION)")
[+] 		set(CONFIGURATION     "$(CONFIGURATION)")
[-] 		set (CONFIGURATION_MCG "$(CONFIGURATION)")
[+] 		set(CONFIGURATION_MCG "$(CONFIGURATION)")
[-] 		set (CONFIGURATION_SCG)
[+] 		set(CONFIGURATION_SCG)
[-] 	else ()
[+] 	else()
[-] 		set (CONFIGURATION     "${CMAKE_BUILD_TYPE}")
[+] 		set(CONFIGURATION     "${CMAKE_BUILD_TYPE}")
[-] 		set (CONFIGURATION_MCG)
[+] 		set(CONFIGURATION_MCG)
[-] 		set (CONFIGURATION_SCG "${CMAKE_BUILD_TYPE}")
[+] 		set(CONFIGURATION_SCG "${CMAKE_BUILD_TYPE}")
[-] 	endif ()
[+] 	endif()
[-] 	set (CONFIGURATION_SUFFIX   "${CONFIGURATION}")
[+] 	set(CONFIGURATION_SUFFIX   "${CONFIGURATION}")
[-] 	set (CONFIGURATION_SUFFIX_0 "${CONFIGURATION_SCG}")
[+] 	set(CONFIGURATION_SUFFIX_0 "${CONFIGURATION_SCG}")
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	option (
[+] 	option(
[-] 	option (
[+] 	option(
[-] 	option (
[+] 	option(
[-] 	axl_create_compiler_flag_setting (
[+] 	axl_create_compiler_flag_setting(
[-] 	axl_create_compiler_flag_setting (
[+] 	axl_create_compiler_flag_setting(
[-] 		DESCRIPTION "Microsoft Visual C++ EH (exception handling) model"
[+] 		DESCRIPTION "Microsoft Visual C++ EH(exception handling) model"
[-] 	axl_create_compiler_flag_setting (
[+] 	axl_create_compiler_flag_setting(
[-] 		DESCRIPTION "Microsoft Visual C++ RTTI (run-time type information) support"
[+] 		DESCRIPTION "Microsoft Visual C++ RTTI(run-time type information) support"
[-] 	axl_create_compiler_flag_setting (
[+] 	axl_create_compiler_flag_setting(
[-] 		DESCRIPTION "Microsoft Visual C++ CRT (Debug)"
[+] 		DESCRIPTION "Microsoft Visual C++ CRT(Debug)"
[-] 	axl_create_compiler_flag_setting (
[+] 	axl_create_compiler_flag_setting(
[-] 		DESCRIPTION "Microsoft Visual C++ CRT (Release)"
[+] 		DESCRIPTION "Microsoft Visual C++ CRT(Release)"
[-] 	axl_create_compiler_flag_setting (
[+] 	axl_create_compiler_flag_setting(
[-] 		DESCRIPTION "Microsoft Visual C++ debug information format (Debug)"
[+] 		DESCRIPTION "Microsoft Visual C++ debug information format(Debug)"
[-] 	axl_create_compiler_flag_setting (
[+] 	axl_create_compiler_flag_setting(
[-] 		DESCRIPTION "Microsoft Visual C++ debug information format (Release)"
[+] 		DESCRIPTION "Microsoft Visual C++ debug information format(Release)"
[-] 	axl_create_setting (
[+] 	axl_create_setting(
[-] 		DESCRIPTION "Ignore linker warning LNK4221 (object file doesn't define new symbols)"
[+] 		DESCRIPTION "Ignore linker warning LNK4221(object file doesn't define new symbols)"
[-] 	option (
[+] 	option(
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	set_property (
[+] 	set_property(
[-] 	if (MSVC_USE_UNICODE)
[+] 	if(MSVC_USE_UNICODE)
[-] 		add_definitions (-DUNICODE -D_UNICODE)
[+] 		add_definitions(-DUNICODE -D_UNICODE)
[-] 	endif ()
[+] 	endif()
[-] 	if (MSVC_LINK_DEBUG_INFO_RELEASE)
[+] 	if(MSVC_LINK_DEBUG_INFO_RELEASE)
[-] 		set (
[+] 		set(
[-] 		set (CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} ${_RELEASE_DEBUG_FLAGS}")
[+] 		set(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} ${_RELEASE_DEBUG_FLAGS}")
[-] 		set (CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_SHARED_LINKER_FLAGS_RELEASE} ${_RELEASE_DEBUG_FLAGS}")
[+] 		set(CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_SHARED_LINKER_FLAGS_RELEASE} ${_RELEASE_DEBUG_FLAGS}")
[-] 	endif ()
[+] 	endif()
[-] 	axl_apply_compiler_flag_setting_to_list (
[+] 	axl_apply_compiler_flag_setting_to_list(
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	option (
[+] 	option(
[-] 	axl_create_compiler_flag_setting (
[+] 	axl_create_compiler_flag_setting(
[-] 	axl_create_compiler_flag_setting (
[+] 	axl_create_compiler_flag_setting(
[-] 	axl_create_compiler_flag_setting (
[+] 	axl_create_compiler_flag_setting(
[-] 	if (NOT CLANG)
[+] 	if(NOT CLANG)
[-] 		axl_create_compiler_flag_setting (
[+] 		axl_create_compiler_flag_setting(
[-] 		axl_create_compiler_flag_setting (
[+] 		axl_create_compiler_flag_setting(
[-] 	endif ()
[+] 	endif()
[-] 	axl_create_compiler_flag_setting (
[+] 	axl_create_compiler_flag_setting(
[-] 	axl_create_compiler_flag_setting (
[+] 	axl_create_compiler_flag_setting(
[-] 	axl_create_compiler_flag_setting (
[+] 	axl_create_compiler_flag_setting(
[-] 		DESCRIPTION "GNU C++ doesn't export all symbols by default (-fvisibility=hidden)"
[+] 		DESCRIPTION "GNU C++ doesn't export all symbols by default(-fvisibility=hidden)"
[-] 	axl_create_compiler_flag_setting (
[+] 	axl_create_compiler_flag_setting(
[-] 	axl_create_compiler_flag_setting (
[+] 	axl_create_compiler_flag_setting(
[-] 	axl_create_setting (
[+] 	axl_create_setting(
[-] 	if (NOT APPLE)
[+] 	if(NOT APPLE)
[-] 		option (
[+] 		option(
[-] 	endif ()
[+] 	endif()
[-] 	axl_create_compiler_flag_setting (
[+] 	axl_create_compiler_flag_setting(
[-] 	axl_create_compiler_flag_setting (
[+] 	axl_create_compiler_flag_setting(
[-] 	axl_create_compiler_flag_setting (
[+] 	axl_create_compiler_flag_setting(
[-] 		DESCRIPTION "Warn if a multicharacter constant (‘'FOOF'’) is used"
[+] 		DESCRIPTION "Warn if a multicharacter constant(‘'FOOF'’) is used"
[-] 	axl_create_compiler_flag_setting (
[+] 	axl_create_compiler_flag_setting(
[-] 	axl_create_compiler_flag_setting (
[+] 	axl_create_compiler_flag_setting(
[-] 	axl_create_compiler_flag_setting (
[+] 	axl_create_compiler_flag_setting(
[-] 	axl_create_compiler_flag_setting (
[+] 	axl_create_compiler_flag_setting(
[-] 	axl_create_compiler_flag_setting (
[+] 	axl_create_compiler_flag_setting(
[-] 	axl_create_compiler_flag_setting (
[+] 	axl_create_compiler_flag_setting(
[-] 		DESCRIPTION "Warn for calls to memcpy/strcpy which (GCC thinks) might overflow the buffer"
[+] 		DESCRIPTION "Warn for calls to memcpy/strcpy which(GCC thinks) might overflow the buffer"
[-] 	axl_create_compiler_flag_setting (
[+] 	axl_create_compiler_flag_setting(
[-] 	axl_create_compiler_flag_setting (
[+] 	axl_create_compiler_flag_setting(
[-] 	axl_create_compiler_flag_setting (
[+] 	axl_create_compiler_flag_setting(
[-] 	axl_create_compiler_flag_setting (
[+] 	axl_create_compiler_flag_setting(
[-] 	axl_create_compiler_flag_setting (
[+] 	axl_create_compiler_flag_setting(
[-] 	axl_create_compiler_flag_setting (
[+] 	axl_create_compiler_flag_setting(
[-] 	if (NOT ${CMAKE_VERSION} VERSION_LESS 3.10)
[+] 	if(NOT ${CMAKE_VERSION} VERSION_LESS 3.10)
[-] 		if (NOT CPPCHECK_EXE)
[+] 		if(NOT CPPCHECK_EXE)
[-] 			find_program (CPPCHECK_EXE cppcheck)
[+] 			find_program(CPPCHECK_EXE cppcheck)
[-] 		endif ()
[+] 		endif()
[-] 		if (CPPCHECK_EXE)
[+] 		if(CPPCHECK_EXE)
[-] 			option (
[+] 			option(
[-] 		endif ()
[+] 		endif()
[-] 	endif ()
[+] 	endif()
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	if (NOT "${GCC_FLAG_SANITIZER_DEBUG}" STREQUAL " " AND CMAKE_GENERATOR MATCHES "Xcode")
[+] 	if(NOT "${GCC_FLAG_SANITIZER_DEBUG}" STREQUAL " " AND CMAKE_GENERATOR MATCHES "Xcode")
[-] 		set (CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG} ${GCC_FLAG_SANITIZER_DEBUG}")
[+] 		set(CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG} ${GCC_FLAG_SANITIZER_DEBUG}")
[-] 		set (CMAKE_SHARED_LINKER_FLAGS_DEBUG "${CMAKE_SHARED_LINKER_FLAGS_DEBUG} ${GCC_FLAG_SANITIZER_DEBUG}")
[+] 		set(CMAKE_SHARED_LINKER_FLAGS_DEBUG "${CMAKE_SHARED_LINKER_FLAGS_DEBUG} ${GCC_FLAG_SANITIZER_DEBUG}")
[-] 	endif ()
[+] 	endif()
[-] 	axl_create_compiler_flag_setting_regex (_REGEX GCC_LINK_FLAG_RDYNAMIC)
[+] 	axl_create_compiler_flag_setting_regex(_REGEX GCC_LINK_FLAG_RDYNAMIC)
[-] 	axl_apply_compiler_flag (CMAKE_SHARED_LIBRARY_LINK_C_FLAGS ${_REGEX} ${GCC_LINK_FLAG_RDYNAMIC})
[+] 	axl_apply_compiler_flag(CMAKE_SHARED_LIBRARY_LINK_C_FLAGS ${_REGEX} ${GCC_LINK_FLAG_RDYNAMIC})
[-] 	axl_apply_compiler_flag (CMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS ${_REGEX} ${GCC_LINK_FLAG_RDYNAMIC})
[+] 	axl_apply_compiler_flag(CMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS ${_REGEX} ${GCC_LINK_FLAG_RDYNAMIC})
[-] 	if (GCC_LINK_FLAG_EXPORTLESS_EXE AND NOT APPLE)
[+] 	if(GCC_LINK_FLAG_EXPORTLESS_EXE AND NOT APPLE)
[-] 		set (_VERSION_SCRIPT "${CMAKE_CURRENT_BINARY_DIR}/exportless-exe.version")
[+] 		set(_VERSION_SCRIPT "${CMAKE_CURRENT_BINARY_DIR}/exportless-exe.version")
[-] 		file (WRITE ${_VERSION_SCRIPT} "{ local: *; };")
[+] 		file(WRITE ${_VERSION_SCRIPT} "{ local: *; };")
[-] 		set (CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,--version-script='${_VERSION_SCRIPT}'")
[+] 		set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,--version-script='${_VERSION_SCRIPT}'")
[-] 	endif ()
[+] 	endif()
[-] 	if (NOT GCC_USE_CPPCHECK)
[+] 	if(NOT GCC_USE_CPPCHECK)
[-] 		unset (CMAKE_C_CPPCHECK)
[+] 		unset(CMAKE_C_CPPCHECK)
[-] 		unset (CMAKE_CXX_CPPCHECK)
[+] 		unset(CMAKE_CXX_CPPCHECK)
[-] 	else ()
[+] 	else()
[-] 		set (_EMPTY_C_FILE ${CMAKE_CURRENT_BINARY_DIR}/empty.c)
[+] 		set(_EMPTY_C_FILE ${CMAKE_CURRENT_BINARY_DIR}/empty.c)
[-] 		set (_EMPTY_CPP_FILE ${CMAKE_CURRENT_BINARY_DIR}/empty.cpp)
[+] 		set(_EMPTY_CPP_FILE ${CMAKE_CURRENT_BINARY_DIR}/empty.cpp)
[-] 		set (_CPPCHECK_C_PREAMBLE_FILE ${CMAKE_CURRENT_BINARY_DIR}/preamble_c.h)
[+] 		set(_CPPCHECK_C_PREAMBLE_FILE ${CMAKE_CURRENT_BINARY_DIR}/preamble_c.h)
[-] 		set (_CPPCHECK_CPP_PREAMBLE_FILE ${CMAKE_CURRENT_BINARY_DIR}/preamble_cpp.h)
[+] 		set(_CPPCHECK_CPP_PREAMBLE_FILE ${CMAKE_CURRENT_BINARY_DIR}/preamble_cpp.h)
[-] 		if (NOT EXISTS ${_CPPCHECK_C_PREAMBLE_FILE})
[+] 		if(NOT EXISTS ${_CPPCHECK_C_PREAMBLE_FILE})
[-] 			axl_create_predefined_macro_file_gcc (
[+] 			axl_create_predefined_macro_file_gcc(
[-] 		endif ()
[+] 		endif()
[-] 		if (NOT EXISTS ${_CPPCHECK_CPP_PREAMBLE_FILE})
[+] 		if(NOT EXISTS ${_CPPCHECK_CPP_PREAMBLE_FILE})
[-] 			axl_create_predefined_macro_file_gcc (
[+] 			axl_create_predefined_macro_file_gcc(
[-] 		endif ()
[+] 		endif()
[-] 		set (
[+] 		set(
[-] 		set (
[+] 		set(
[-] 	endif ()
[+] 	endif()
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	if ("${CMAKE_SYSTEM_NAME}" STREQUAL "Linux")
[+] 	if("${CMAKE_SYSTEM_NAME}" STREQUAL "Linux")
[-] 		set (LINUX TRUE)
[+] 		set(LINUX TRUE)
[-] 	endif ()
[+] 	endif()
[-] 	if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
[+] 	if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
[-] 		set (CLANG TRUE)
[+] 		set(CLANG TRUE)
[-] 		set (GCC TRUE)
[+] 		set(GCC TRUE)
[-] 	elseif (CMAKE_COMPILER_IS_GNUCXX)
[+] 	elseif(CMAKE_COMPILER_IS_GNUCXX)
[-] 		set (GCC TRUE)
[+] 		set(GCC TRUE)
[-] 	endif ()
[+] 	endif()
[-] 	axl_create_target_cpu_setting ()
[+] 	axl_create_target_cpu_setting()
[-] 	axl_create_build_type_setting ()
[+] 	axl_create_build_type_setting()
[-] 	if (MSVC)
[+] 	if(MSVC)
[-] 		axl_create_msvc_settings ()
[+] 		axl_create_msvc_settings()
[-] 	elseif (GCC)
[+] 	elseif(GCC)
[-] 		axl_create_gcc_settings ()
[+] 		axl_create_gcc_settings()
[-] 	endif ()
[+] 	endif()
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	axl_apply_target_cpu_setting ()
[+] 	axl_apply_target_cpu_setting()
[-] 	axl_apply_build_type_setting ()
[+] 	axl_apply_build_type_setting()
[-] 	if (MSVC)
[+] 	if(MSVC)
[-] 		axl_apply_msvc_settings ()
[+] 		axl_apply_msvc_settings()
[-] 	elseif (GCC)
[+] 	elseif(GCC)
[-] 		axl_apply_gcc_settings ()
[+] 		axl_apply_gcc_settings()
[-] 	endif ()
[+] 	endif()
[-] 	axl_apply_all_compiler_flag_settings ()
[+] 	axl_apply_all_compiler_flag_settings()
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	string (REPLACE " " ";" _FLAG_LIST "${${_FLAGS}}")
[+] 	string(REPLACE " " ";" _FLAG_LIST "${${_FLAGS}}")
[-] 	list (REMOVE_DUPLICATES _FLAG_LIST)
[+] 	list(REMOVE_DUPLICATES _FLAG_LIST)
[-] 	foreach (_FLAG ${_FLAG_LIST})
[+] 	foreach(_FLAG ${_FLAG_LIST})
[-] 		if (_FLAG MATCHES "-W[a-z-]+")
[+] 		if(_FLAG MATCHES "-W[a-z-]+")
[-] 			list (APPEND ${_WARNING_FLAG_LIST} ${_FLAG})
[+] 			list(APPEND ${_WARNING_FLAG_LIST} ${_FLAG})
[-] 			list (REMOVE_ITEM _FLAG_LIST ${_FLAG})
[+] 			list(REMOVE_ITEM _FLAG_LIST ${_FLAG})
[-] 		endif ()
[+] 		endif()
[-] 	endforeach ()
[+] 	endforeach()
[-] 	string (REPLACE ";" " " ${_FLAGS} "${_FLAG_LIST}")
[+] 	string(REPLACE ";" " " ${_FLAGS} "${_FLAG_LIST}")
[-] 	string (STRIP "${${_FLAGS}}" ${_FLAGS})
[+] 	string(STRIP "${${_FLAGS}}" ${_FLAGS})
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	string (LENGTH "........................:" AXL_G_MESSAGE_ALIGN)
[+] 	string(LENGTH "........................:" AXL_G_MESSAGE_ALIGN)
[-] 	message (STATUS "AXL CMake:")
[+] 	message(STATUS "AXL CMake:")
[-] 	axl_message ("    Invoked from:" ${AXL_CMAKE_ORIGIN_FILE})
[+] 	axl_message("    Invoked from:" ${AXL_CMAKE_ORIGIN_FILE})
[-] 	axl_message ("    dependencies.cmake:" ${AXL_CMAKE_ORIGIN_DIR}/dependencies.cmake)
[+] 	axl_message("    dependencies.cmake:" ${AXL_CMAKE_ORIGIN_DIR}/dependencies.cmake)
[-] 	if (AXL_SETTINGS_CMAKE)
[+] 	if(AXL_SETTINGS_CMAKE)
[-] 		axl_message ("    settings.cmake:" ${AXL_SETTINGS_CMAKE})
[+] 		axl_message("    settings.cmake:" ${AXL_SETTINGS_CMAKE})
[-] 	endif ()
[+] 	endif()
[-] 	if (AXL_PATHS_CMAKE)
[+] 	if(AXL_PATHS_CMAKE)
[-] 		axl_message ("    paths.cmake:" ${AXL_PATHS_CMAKE})
[+] 		axl_message("    paths.cmake:" ${AXL_PATHS_CMAKE})
[-] 	endif ()
[+] 	endif()
[-] 	axl_message ("    Target CPU:" ${TARGET_CPU})
[+] 	axl_message("    Target CPU:" ${TARGET_CPU})
[-] 	if (NOT "${CMAKE_BUILD_TYPE}" STREQUAL "")
[+] 	if(NOT "${CMAKE_BUILD_TYPE}" STREQUAL "")
[-] 		axl_message ("    Build configuration:" ${CMAKE_BUILD_TYPE})
[+] 		axl_message("    Build configuration:" ${CMAKE_BUILD_TYPE})
[-] 	endif ()
[+] 	endif()
[-] 	set (_C_FLAGS_DEBUG "${CMAKE_C_COMPILER_ARG1} ${CMAKE_C_FLAGS} ${CMAKE_C_FLAGS_DEBUG}")
[+] 	set(_C_FLAGS_DEBUG "${CMAKE_C_COMPILER_ARG1} ${CMAKE_C_FLAGS} ${CMAKE_C_FLAGS_DEBUG}")
[-] 	set (_C_FLAGS_RELEASE "${CMAKE_C_COMPILER_ARG1} ${CMAKE_C_FLAGS} ${CMAKE_C_FLAGS_RELEASE}")
[+] 	set(_C_FLAGS_RELEASE "${CMAKE_C_COMPILER_ARG1} ${CMAKE_C_FLAGS} ${CMAKE_C_FLAGS_RELEASE}")
[-] 	set (_CXX_FLAGS_DEBUG "${CMAKE_CXX_COMPILER_ARG1} ${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_DEBUG}")
[+] 	set(_CXX_FLAGS_DEBUG "${CMAKE_CXX_COMPILER_ARG1} ${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_DEBUG}")
[-] 	set (_CXX_FLAGS_RELEASE "${CMAKE_CXX_COMPILER_ARG1} ${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_RELEASE}")
[+] 	set(_CXX_FLAGS_RELEASE "${CMAKE_CXX_COMPILER_ARG1} ${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_RELEASE}")
[-] 	set (_WARNING_FLAG_LIST)
[+] 	set(_WARNING_FLAG_LIST)
[-] 	axl_cleanup_compiler_flags (_C_FLAGS_DEBUG _WARNING_FLAG_LIST)
[+] 	axl_cleanup_compiler_flags(_C_FLAGS_DEBUG _WARNING_FLAG_LIST)
[-] 	axl_cleanup_compiler_flags (_C_FLAGS_RELEASE _WARNING_FLAG_LIST)
[+] 	axl_cleanup_compiler_flags(_C_FLAGS_RELEASE _WARNING_FLAG_LIST)
[-] 	axl_cleanup_compiler_flags (_CXX_FLAGS_DEBUG _WARNING_FLAG_LIST)
[+] 	axl_cleanup_compiler_flags(_CXX_FLAGS_DEBUG _WARNING_FLAG_LIST)
[-] 	axl_cleanup_compiler_flags (_CXX_FLAGS_RELEASE _WARNING_FLAG_LIST)
[+] 	axl_cleanup_compiler_flags(_CXX_FLAGS_RELEASE _WARNING_FLAG_LIST)
[-] 	message (STATUS "C/C++:")
[+] 	message(STATUS "C/C++:")
[-] 	axl_message ("    C Compiler:"          ${CMAKE_C_COMPILER})
[+] 	axl_message("    C Compiler:"          ${CMAKE_C_COMPILER})
[-] 	axl_message ("    C flags (Debug):"     ${_C_FLAGS_DEBUG})
[+] 	axl_message("    C flags(Debug):"     ${_C_FLAGS_DEBUG})
[-] 	axl_message ("    C flags (Release):"   ${_C_FLAGS_RELEASE})
[+] 	axl_message("    C flags(Release):"   ${_C_FLAGS_RELEASE})
[-] 	axl_message ("    C++ Compiler:"        ${CMAKE_CXX_COMPILER})
[+] 	axl_message("    C++ Compiler:"        ${CMAKE_CXX_COMPILER})
[-] 	axl_message ("    C++ flags (Debug):"   ${_CXX_FLAGS_DEBUG})
[+] 	axl_message("    C++ flags(Debug):"   ${_CXX_FLAGS_DEBUG})
[-] 	axl_message ("    C++ flags (Release):" ${_CXX_FLAGS_RELEASE})
[+] 	axl_message("    C++ flags(Release):" ${_CXX_FLAGS_RELEASE})
[-] 	if (_WARNING_FLAG_LIST)
[+] 	if(_WARNING_FLAG_LIST)
[-] 		message (STATUS "    C/C++ warning flags:")
[+] 		message(STATUS "    C/C++ warning flags:")
[-] 		list (REMOVE_DUPLICATES _WARNING_FLAG_LIST)
[+] 		list(REMOVE_DUPLICATES _WARNING_FLAG_LIST)
[-] 		list (SORT _WARNING_FLAG_LIST)
[+] 		list(SORT _WARNING_FLAG_LIST)
[-] 		foreach (_FLAG ${_WARNING_FLAG_LIST})
[+] 		foreach(_FLAG ${_WARNING_FLAG_LIST})
[-] 			axl_message ("        ${_FLAG}")
[+] 			axl_message("        ${_FLAG}")
[-] 		endforeach ()
[+] 		endforeach()
[-] 	endif ()
[+] 	endif()
[-] 	get_directory_property (_CXX_DEFINITIONS COMPILE_DEFINITIONS)
[+] 	get_directory_property(_CXX_DEFINITIONS COMPILE_DEFINITIONS)
[-] 	if (_CXX_DEFINITIONS)
[+] 	if(_CXX_DEFINITIONS)
[-] 		list (REMOVE_DUPLICATES _CXX_DEFINITIONS)
[+] 		list(REMOVE_DUPLICATES _CXX_DEFINITIONS)
[-] 		axl_message ("    C/C++ definitions:" "${_CXX_DEFINITIONS}")
[+] 		axl_message("    C/C++ definitions:" "${_CXX_DEFINITIONS}")
[-] 	endif ()
[+] 	endif()
[-] endmacro ()
[+] endmacro()
----------------------
27/02/2019 18:01:32 - C:\Projects\repos\ioninja\axl\cmake\axl_utils.cmake
----------------------
[-] macro (
[+] macro(
[-] 	set (_STRING_LIST ${ARGN})
[+] 	set(_STRING_LIST ${ARGN})
[-] 	set (_MAX_LENGTH 0)
[+] 	set(_MAX_LENGTH 0)
[-] 	foreach (_STRING ${_STRING_LIST})
[+] 	foreach(_STRING ${_STRING_LIST})
[-] 		string (LENGTH ${_STRING} _LENGTH)
[+] 		string(LENGTH ${_STRING} _LENGTH)
[-] 		if (${_LENGTH} GREATER ${_MAX_LENGTH})
[+] 		if(${_LENGTH} GREATER ${_MAX_LENGTH})
[-] 			set (_MAX_LENGTH ${_LENGTH})
[+] 			set(_MAX_LENGTH ${_LENGTH})
[-] 		endif ()
[+] 		endif()
[-] 	endforeach ()
[+] 	endforeach()
[-] 	set (${_RESULT} ${_MAX_LENGTH})
[+] 	set(${_RESULT} ${_MAX_LENGTH})
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	string (LENGTH ${_STRING} _LENGTH)
[+] 	string(LENGTH ${_STRING} _LENGTH)
[-] 	math (EXPR _PADDING_LENGTH "${_MAX_LENGTH} - ${_LENGTH}")
[+] 	math(EXPR _PADDING_LENGTH "${_MAX_LENGTH} - ${_LENGTH}")
[-] 	if (${_PADDING_LENGTH} GREATER "0")
[+] 	if(${_PADDING_LENGTH} GREATER "0")
[-] 		string (RANDOM LENGTH ${_PADDING_LENGTH} ALPHABET " " ${_RESULT})
[+] 		string(RANDOM LENGTH ${_PADDING_LENGTH} ALPHABET " " ${_RESULT})
[-] 	else ()
[+] 	else()
[-] 		set (${_RESULT} "")
[+] 		set(${_RESULT} "")
[-] 	endif ()
[+] 	endif()
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	set (_VARIABLE_LIST ${ARGN})
[+] 	set(_VARIABLE_LIST ${ARGN})
[-] 	axl_calc_max_string_length (_ALIGN ${_VARIABLE_LIST})
[+] 	axl_calc_max_string_length(_ALIGN ${_VARIABLE_LIST})
[-] 	string (LENGTH ${_INDENT} _INDENT_LENGTH)
[+] 	string(LENGTH ${_INDENT} _INDENT_LENGTH)
[-] 	math (EXPR _ALIGN "${_ALIGN} + ${_INDENT_LENGTH} + 2") # colon and space
[+] 	math(EXPR _ALIGN "${_ALIGN} + ${_INDENT_LENGTH} + 2") # colon and space
[-] 	if (${_ALIGN} LESS ${_MIN_ALIGN})
[+] 	if(${_ALIGN} LESS ${_MIN_ALIGN})
[-] 		set (_ALIGN ${_MIN_ALIGN})
[+] 		set(_ALIGN ${_MIN_ALIGN})
[-] 	endif ()
[+] 	endif()
[-] 	foreach (_VARIABLE ${_VARIABLE_LIST})
[+] 	foreach(_VARIABLE ${_VARIABLE_LIST})
[-] 		set (_PREFIX "${_INDENT}${_VARIABLE}:")
[+] 		set(_PREFIX "${_INDENT}${_VARIABLE}:")
[-] 		axl_create_space_padding (_PADDING ${_PREFIX} ${_ALIGN})
[+] 		axl_create_space_padding(_PADDING ${_PREFIX} ${_ALIGN})
[-] 		axl_message ("${_PREFIX}${_PADDING}" ${${_VARIABLE}})
[+] 		axl_message("${_PREFIX}${_PADDING}" ${${_VARIABLE}})
[-] 	endforeach ()
[+] 	endforeach()
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	set (_LIST ${ARGN})
[+] 	set(_LIST ${ARGN})
[-] 	unset (_FILTERED_LIST)
[+] 	unset(_FILTERED_LIST)
[-] 	foreach (_ITEM ${_LIST})
[+] 	foreach(_ITEM ${_LIST})
[-] 		string (REGEX MATCH "${_FILTER}" _MATCH "${_ITEM}")
[+] 		string(REGEX MATCH "${_FILTER}" _MATCH "${_ITEM}")
[-] 		if (_MATCH)
[+] 		if(_MATCH)
[-] 			list (APPEND _FILTERED_LIST ${_ITEM})
[+] 			list(APPEND _FILTERED_LIST ${_ITEM})
[-] 		endif ()
[+] 		endif()
[-] 	endforeach ()
[+] 	endforeach()
[-] 	set (${_RESULT} ${_FILTERED_LIST})
[+] 	set(${_RESULT} ${_FILTERED_LIST})
[-] endmacro ()
[+] endmacro()
[-] set (AXL_G_MESSAGE_ALIGN 16) # adjustable
[+] set(AXL_G_MESSAGE_ALIGN 16) # adjustable
[-] macro (
[+] macro(
[-] 	set (_ARG_LIST ${ARGN})
[+] 	set(_ARG_LIST ${ARGN})
[-] 	if (NOT _ARG_LIST)
[+] 	if(NOT _ARG_LIST)
[-] 		message (STATUS "${_FIRST}")
[+] 		message(STATUS "${_FIRST}")
[-] 	else ()
[+] 	else()
[-] 		axl_create_space_padding (_PADDING ${_FIRST} ${AXL_G_MESSAGE_ALIGN})
[+] 		axl_create_space_padding(_PADDING ${_FIRST} ${AXL_G_MESSAGE_ALIGN})
[-] 		list (LENGTH _ARG_LIST _LENGTH)
[+] 		list(LENGTH _ARG_LIST _LENGTH)
[-] 		if (_LENGTH LESS 2)
[+] 		if(_LENGTH LESS 2)
[-] 			message (STATUS "${_FIRST}${_PADDING}${_ARG_LIST}")
[+] 			message(STATUS "${_FIRST}${_PADDING}${_ARG_LIST}")
[-] 		else ()
[+] 		else()
[-] 			list (GET _ARG_LIST 0 _ITEM)
[+] 			list(GET _ARG_LIST 0 _ITEM)
[-] 			list (REMOVE_AT _ARG_LIST 0)
[+] 			list(REMOVE_AT _ARG_LIST 0)
[-] 			message (STATUS "${_FIRST}${_PADDING}${_ITEM}")
[+] 			message(STATUS "${_FIRST}${_PADDING}${_ITEM}")
[-] 			string (LENGTH "${_FIRST}${_PADDING}" _LENGTH)
[+] 			string(LENGTH "${_FIRST}${_PADDING}" _LENGTH)
[-] 			axl_create_space_padding (_PADDING " " ${_LENGTH})
[+] 			axl_create_space_padding(_PADDING " " ${_LENGTH})
[-] 			foreach (_ITEM ${_ARG_LIST})
[+] 			foreach(_ITEM ${_ARG_LIST})
[-] 				message (STATUS "${_PADDING} ${_ITEM}")
[+] 				message(STATUS "${_PADDING} ${_ITEM}")
[-] 			endforeach ()
[+] 			endforeach()
[-] 		endif ()
[+] 		endif()
[-] 	endif ()
[+] 	endif()
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	set (_SETTING_LIST ${ARGN})
[+] 	set(_SETTING_LIST ${ARGN})
[-] 	axl_calc_max_string_length (_MAX_LENGTH ${_SETTING_LIST})
[+] 	axl_calc_max_string_length(_MAX_LENGTH ${_SETTING_LIST})
[-] 	set (_CONTENTS "#\n")
[+] 	set(_CONTENTS "#\n")
[-] 	set (_CONTENTS "${_CONTENTS}# This is an auto-generated setting file\n")
[+] 	set(_CONTENTS "${_CONTENTS}# This is an auto-generated setting file\n")
[-] 	set (_CONTENTS "${_CONTENTS}# Fill it by hand with proper settings\n")
[+] 	set(_CONTENTS "${_CONTENTS}# Fill it by hand with proper settings\n")
[-] 	set (_CONTENTS "${_CONTENTS}#\n\n")
[+] 	set(_CONTENTS "${_CONTENTS}#\n\n")
[-] 	foreach (_SETTING ${_SETTING_LIST})
[+] 	foreach(_SETTING ${_SETTING_LIST})
[-] 		axl_create_space_padding (_PADDING ${_SETTING} ${_MAX_LENGTH})
[+] 		axl_create_space_padding(_PADDING ${_SETTING} ${_MAX_LENGTH})
[-] 		set (_CONTENTS "${_CONTENTS}set (${_SETTING}${_PADDING} ${_SETTING}-NOTFOUND)\n")
[+] 		set(_CONTENTS "${_CONTENTS}set(${_SETTING}${_PADDING} ${_SETTING}-NOTFOUND)\n")
[-] 	endforeach ()
[+] 	endforeach()
[-] 	file (WRITE ${_FILE_NAME} ${_CONTENTS})
[+] 	file(WRITE ${_FILE_NAME} ${_CONTENTS})
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	string (TOLOWER ${_CPU} _CPU_LC)
[+] 	string(TOLOWER ${_CPU} _CPU_LC)
[-] 	if ("${_CPU_LC}" MATCHES "^(amd64|x86_64|x64)$")
[+] 	if("${_CPU_LC}" MATCHES "^(amd64|x86_64|x64)$")
[-] 		set (${_RESULT} "amd64")
[+] 		set(${_RESULT} "amd64")
[-] 	elseif ("${_CPU_LC}" MATCHES "^(x86|i386)$")
[+] 	elseif("${_CPU_LC}" MATCHES "^(x86|i386)$")
[-] 		set (${_RESULT} "x86")
[+] 		set(${_RESULT} "x86")
[-] 	elseif ("${_CPU_LC}" MATCHES "^(aarch64|arm64)$")
[+] 	elseif("${_CPU_LC}" MATCHES "^(aarch64|arm64)$")
[-] 		set (${_RESULT} "arm64")
[+] 		set(${_RESULT} "arm64")
[-] 	elseif ("${_CPU_LC}" MATCHES "^(arm)$")
[+] 	elseif("${_CPU_LC}" MATCHES "^(arm)$")
[-] 		set (${_RESULT} "arm32")
[+] 		set(${_RESULT} "arm32")
[-] 	else ()
[+] 	else()
[-] 		set (${_RESULT} "${_CPU}") # can't normalize -- leave as is
[+] 		set(${_RESULT} "${_CPU}") # can't normalize -- leave as is
[-] 	endif ()
[+] 	endif()
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	get_filename_component (_CXX_FILE_NAME ${CMAKE_CXX_COMPILER} NAME)
[+] 	get_filename_component(_CXX_FILE_NAME ${CMAKE_CXX_COMPILER} NAME)
[-] 	if ("${_CXX_FILE_NAME}${CMAKE_SYSTEM_PROCESSOR}" MATCHES "arm")
[+] 	if("${_CXX_FILE_NAME}${CMAKE_SYSTEM_PROCESSOR}" MATCHES "arm")
[-] 		if (CMAKE_SIZEOF_VOID_P EQUAL 8)
[+] 		if(CMAKE_SIZEOF_VOID_P EQUAL 8)
[-] 			set (${_CPU} "arm64")
[+] 			set(${_CPU} "arm64")
[-] 		else ()
[+] 		else()
[-] 			set (${_CPU} "arm32")
[+] 			set(${_CPU} "arm32")
[-] 		endif ()
[+] 		endif()
[-] 	else ()
[+] 	else()
[-] 		if (CMAKE_SIZEOF_VOID_P EQUAL 8)
[+] 		if(CMAKE_SIZEOF_VOID_P EQUAL 8)
[-] 			set (${_CPU} "amd64")
[+] 			set(${_CPU} "amd64")
[-] 		else ()
[+] 		else()
[-] 			set (${_CPU} "x86")
[+] 			set(${_CPU} "x86")
[-] 		endif ()
[+] 		endif()
[-] 	endif ()
[+] 	endif()
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	axl_normalize_cpu (${_CPU} "${CMAKE_HOST_SYSTEM_PROCESSOR}")
[+] 	axl_normalize_cpu(${_CPU} "${CMAKE_HOST_SYSTEM_PROCESSOR}")
[-] endmacro ()
[+] endmacro()
[-] set (_AXL_G_STACK)
[+] set(_AXL_G_STACK)
[-] macro (
[+] macro(
[-] 	list (INSERT _AXL_G_STACK 0 ${_VALUE})
[+] 	list(INSERT _AXL_G_STACK 0 ${_VALUE})
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	list (GET _AXL_G_STACK 0 ${_RESULT})
[+] 	list(GET _AXL_G_STACK 0 ${_RESULT})
[-] 	list (REMOVE_AT _AXL_G_STACK 0)
[+] 	list(REMOVE_AT _AXL_G_STACK 0)
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	axl_push (${${_VARIABLE}})
[+] 	axl_push(${${_VARIABLE}})
[-] 	set (${_VARIABLE} ${_VALUE})
[+] 	set(${_VARIABLE} ${_VALUE})
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	set (_ARG_LIST ${ARGN})
[+] 	set(_ARG_LIST ${ARGN})
[-] 	set (_DESCRIPTION "${_SETTING}")
[+] 	set(_DESCRIPTION "${_SETTING}")
[-] 	set (_DEFAULT_VALUE)
[+] 	set(_DEFAULT_VALUE)
[-] 	set (_TYPE STRING)
[+] 	set(_TYPE STRING)
[-] 	set (_OPTION_LIST)
[+] 	set(_OPTION_LIST)
[-] 	set (_STATE "OPTIONS")
[+] 	set(_STATE "OPTIONS")
[-] 	foreach (_ARG ${_ARG_LIST})
[+] 	foreach(_ARG ${_ARG_LIST})
[-] 		string (REGEX MATCH "^(TYPE|DESCRIPTION|DEFAULT|OPTIONS)$" _MATCH ${_ARG})
[+] 		string(REGEX MATCH "^(TYPE|DESCRIPTION|DEFAULT|OPTIONS)$" _MATCH ${_ARG})
[-] 		if (NOT "${_MATCH}" STREQUAL "")
[+] 		if(NOT "${_MATCH}" STREQUAL "")
[-] 			set (_STATE ${_MATCH})
[+] 			set(_STATE ${_MATCH})
[-] 		elseif ("${_STATE}" STREQUAL "TYPE")
[+] 		elseif("${_STATE}" STREQUAL "TYPE")
[-] 			set (_TYPE ${_ARG})
[+] 			set(_TYPE ${_ARG})
[-] 			set (_STATE "OPTIONS")
[+] 			set(_STATE "OPTIONS")
[-] 		elseif ("${_STATE}" STREQUAL "DESCRIPTION")
[+] 		elseif("${_STATE}" STREQUAL "DESCRIPTION")
[-] 			set (_DESCRIPTION ${_ARG})
[+] 			set(_DESCRIPTION ${_ARG})
[-] 			set (_STATE "OPTIONS")
[+] 			set(_STATE "OPTIONS")
[-] 		elseif ("${_STATE}" STREQUAL "DEFAULT")
[+] 		elseif("${_STATE}" STREQUAL "DEFAULT")
[-] 			set (_DEFAULT_VALUE ${_ARG})
[+] 			set(_DEFAULT_VALUE ${_ARG})
[-] 			set (_STATE "OPTIONS")
[+] 			set(_STATE "OPTIONS")
[-] 		else ()
[+] 		else()
[-] 			set (_OPTION_LIST ${_OPTION_LIST} ${_ARG})
[+] 			set(_OPTION_LIST ${_OPTION_LIST} ${_ARG})
[-] 		endif ()
[+] 		endif()
[-] 	endforeach ()
[+] 	endforeach()
[-] 	if ("${${_SETTING}}" STREQUAL "")
[+] 	if("${${_SETTING}}" STREQUAL "")
[-] 		set (_FORCE FORCE)
[+] 		set(_FORCE FORCE)
[-] 	else ()
[+] 	else()
[-] 		set (_FORCE)
[+] 		set(_FORCE)
[-] 	endif ()
[+] 	endif()
[-] 	set (
[+] 	set(
[-] 	if (_OPTION_LIST)
[+] 	if(_OPTION_LIST)
[-] 		set_property (
[+] 		set_property(
[-] 	endif ()
[+] 	endif()
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	set (_ARG_LIST ${ARGN})
[+] 	set(_ARG_LIST ${ARGN})
[-] 	if (_ARG_LIST)
[+] 	if(_ARG_LIST)
[-] 		list (GET _ARG_LIST 0 _VALUE)
[+] 		list(GET _ARG_LIST 0 _VALUE)
[-] 	else ()
[+] 	else()
[-] 		set (_VALUE)
[+] 		set(_VALUE)
[-] 	endif ()
[+] 	endif()
[-] 	get_property (
[+] 	get_property(
[-] 	get_property (
[+] 	get_property(
[-] 	if ("${_TYPE}" STREQUAL "" OR "${_DESCRIPTION}" STREQUAL "")
[+] 	if("${_TYPE}" STREQUAL "" OR "${_DESCRIPTION}" STREQUAL "")
[-] 		message (FATAL_ERROR "${_SETTING} is not a cached setting")
[+] 		message(FATAL_ERROR "${_SETTING} is not a cached setting")
[-] 	endif ()
[+] 	endif()
[-] 	set (
[+] 	set(
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	if ("${${_SETTING}_OVERRIDEN}" STREQUAL "")
[+] 	if("${${_SETTING}_OVERRIDEN}" STREQUAL "")
[-] 		axl_override_setting (${_SETTING} ${ARGN})
[+] 		axl_override_setting(${_SETTING} ${ARGN})
[-] 		set (
[+] 		set(
[-] 	endif ()
[+] 	endif()
[-] endmacro ()
[+] endmacro()
[-] set (_AXL_G_COMPILER_FLAG_SETTING_LIST)
[+] set(_AXL_G_COMPILER_FLAG_SETTING_LIST)
[-] macro (
[+] macro(
[-] 	set (_ARG_LIST ${ARGN})
[+] 	set(_ARG_LIST ${ARGN})
[-] 	set (_DESCRIPTION "${_SETTING}")
[+] 	set(_DESCRIPTION "${_SETTING}")
[-] 	set (_DEFAULT_VALUE)
[+] 	set(_DEFAULT_VALUE)
[-] 	set (_OPTION_LIST)
[+] 	set(_OPTION_LIST)
[-] 	set (_STATE "OPTIONS")
[+] 	set(_STATE "OPTIONS")
[-] 	foreach (_ARG ${_ARG_LIST})
[+] 	foreach(_ARG ${_ARG_LIST})
[-] 		string (REGEX MATCH "^(DESCRIPTION|DEFAULT|OPTIONS)$" _MATCH ${_ARG})
[+] 		string(REGEX MATCH "^(DESCRIPTION|DEFAULT|OPTIONS)$" _MATCH ${_ARG})
[-] 		if (NOT "${_MATCH}" STREQUAL "")
[+] 		if(NOT "${_MATCH}" STREQUAL "")
[-] 			set (_STATE ${_MATCH})
[+] 			set(_STATE ${_MATCH})
[-] 		elseif ("${_STATE}" STREQUAL "DESCRIPTION")
[+] 		elseif("${_STATE}" STREQUAL "DESCRIPTION")
[-] 			set (_DESCRIPTION ${_ARG})
[+] 			set(_DESCRIPTION ${_ARG})
[-] 			set (_STATE "OPTIONS")
[+] 			set(_STATE "OPTIONS")
[-] 		elseif ("${_STATE}" STREQUAL "DEFAULT")
[+] 		elseif("${_STATE}" STREQUAL "DEFAULT")
[-] 			set (_DEFAULT_VALUE ${_ARG})
[+] 			set(_DEFAULT_VALUE ${_ARG})
[-] 			set (_STATE "OPTIONS")
[+] 			set(_STATE "OPTIONS")
[-] 		else ()
[+] 		else()
[-] 			set (_OPTION_LIST ${_OPTION_LIST} ${_ARG})
[+] 			set(_OPTION_LIST ${_OPTION_LIST} ${_ARG})
[-] 		endif ()
[+] 		endif()
[-] 	endforeach ()
[+] 	endforeach()
[-] 	if (NOT "${${_SETTING}}" STREQUAL "") # setting is already defined (probably, via settings.cmake)
[+] 	if(NOT "${${_SETTING}}" STREQUAL "") # setting is already defined (probably, via settings.cmake)
[-] 		set (_VALUE ${${_SETTING}})
[+] 		set(_VALUE ${${_SETTING}})
[-] 	elseif (NOT "${_DEFAULT_VALUE}" STREQUAL "")
[+] 	elseif(NOT "${_DEFAULT_VALUE}" STREQUAL "")
[-] 		set (_VALUE ${_DEFAULT_VALUE})
[+] 		set(_VALUE ${_DEFAULT_VALUE})
[-] 	else ()
[+] 	else()
[-] 		axl_get_compiler_flag_setting_current_value (_VALUE ${_SETTING} ${_OPTION_LIST})
[+] 		axl_get_compiler_flag_setting_current_value(_VALUE ${_SETTING} ${_OPTION_LIST})
[-] 	endif ()
[+] 	endif()
[-] 	set (
[+] 	set(
[-] 	set_property (
[+] 	set_property(
[-] 	list (APPEND _AXL_G_COMPILER_FLAG_SETTING_LIST ${_SETTING})
[+] 	list(APPEND _AXL_G_COMPILER_FLAG_SETTING_LIST ${_SETTING})
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	list (REMOVE_ITEM _AXL_G_COMPILER_FLAG_SETTING_LIST ${_SETTING})
[+] 	list(REMOVE_ITEM _AXL_G_COMPILER_FLAG_SETTING_LIST ${_SETTING})
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	axl_create_compiler_flag_regex (_REGEX ${ARGN})
[+] 	axl_create_compiler_flag_regex(_REGEX ${ARGN})
[-] 	axl_get_compiler_flag_setting_traits (
[+] 	axl_get_compiler_flag_setting_traits(
[-] 	if (_IS_C_ONLY)
[+] 	if(_IS_C_ONLY)
[-] 		if ("${_CONFIGURATION_SUFFIX}" STREQUAL "")
[+] 		if("${_CONFIGURATION_SUFFIX}" STREQUAL "")
[-] 			set (_FLAGS CMAKE_C_FLAGS)
[+] 			set(_FLAGS CMAKE_C_FLAGS)
[-] 		else ()
[+] 		else()
[-] 			set (_FLAGS CMAKE_C_FLAGS${_CONFIGURATION_SUFFIX})
[+] 			set(_FLAGS CMAKE_C_FLAGS${_CONFIGURATION_SUFFIX})
[-] 		endif ()
[+] 		endif()
[-] 	else ()
[+] 	else()
[-] 		if ("${_CONFIGURATION_SUFFIX}" STREQUAL "")
[+] 		if("${_CONFIGURATION_SUFFIX}" STREQUAL "")
[-] 			set (_FLAGS CMAKE_CXX_FLAGS)
[+] 			set(_FLAGS CMAKE_CXX_FLAGS)
[-] 		else ()
[+] 		else()
[-] 			set (_FLAGS CMAKE_CXX_FLAGS${_CONFIGURATION_SUFFIX})
[+] 			set(_FLAGS CMAKE_CXX_FLAGS${_CONFIGURATION_SUFFIX})
[-] 		endif ()
[+] 		endif()
[-] 	endif ()
[+] 	endif()
[-] 	string (REGEX MATCH ${_REGEX} _MATCH " ${${_FLAGS}} ")
[+] 	string(REGEX MATCH ${_REGEX} _MATCH " ${${_FLAGS}} ")
[-] 	string (STRIP "${_MATCH}" ${_RESULT})
[+] 	string(STRIP "${_MATCH}" ${_RESULT})
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	set (_CONFIGURATION_SUFFIX)
[+] 	set(_CONFIGURATION_SUFFIX)
[-] 	string (TOUPPER "${_SETTING}" _SETTING_UC)
[+] 	string(TOUPPER "${_SETTING}" _SETTING_UC)
[-] 	foreach (_CONFIGURATION ${CMAKE_CONFIGURATION_TYPES})
[+] 	foreach(_CONFIGURATION ${CMAKE_CONFIGURATION_TYPES})
[-] 		string (TOUPPER "${_CONFIGURATION}" _CONFIGURATION_UC)
[+] 		string(TOUPPER "${_CONFIGURATION}" _CONFIGURATION_UC)
[-] 		string (REGEX MATCH "_${_CONFIGURATION_UC}$" _MATCH "${_SETTING}")
[+] 		string(REGEX MATCH "_${_CONFIGURATION_UC}$" _MATCH "${_SETTING}")
[-] 		if (NOT "${_MATCH}" STREQUAL "")
[+] 		if(NOT "${_MATCH}" STREQUAL "")
[-] 			set (_CONFIGURATION_SUFFIX "_${_CONFIGURATION_UC}")
[+] 			set(_CONFIGURATION_SUFFIX "_${_CONFIGURATION_UC}")
[-] 			break ()
[+] 			break()
[-] 		endif ()
[+] 		endif()
[-] 	endforeach ()
[+] 	endforeach()
[-] 	string (REGEX MATCH "_C_" _MATCH "${_SETTING}")
[+] 	string(REGEX MATCH "_C_" _MATCH "${_SETTING}")
[-] 	if (NOT "${_MATCH}" STREQUAL "")
[+] 	if(NOT "${_MATCH}" STREQUAL "")
[-] 		set (_IS_C_ONLY TRUE)
[+] 		set(_IS_C_ONLY TRUE)
[-] 	else ()
[+] 	else()
[-] 		set (_IS_C_ONLY FALSE)
[+] 		set(_IS_C_ONLY FALSE)
[-] 	endif ()
[+] 	endif()
[-] 	string (REGEX MATCH "_CPP_|_CXX_" _MATCH "${_SETTING}")
[+] 	string(REGEX MATCH "_CPP_|_CXX_" _MATCH "${_SETTING}")
[-] 	if (NOT "${_MATCH}" STREQUAL "")
[+] 	if(NOT "${_MATCH}" STREQUAL "")
[-] 		set (_IS_CPP_ONLY TRUE)
[+] 		set(_IS_CPP_ONLY TRUE)
[-] 	else ()
[+] 	else()
[-] 		set (_IS_CPP_ONLY FALSE)
[+] 		set(_IS_CPP_ONLY FALSE)
[-] 	endif ()
[+] 	endif()
[-] 	set (${_CONFIGURATION_SUFFIX_RESULT} ${_CONFIGURATION_SUFFIX})
[+] 	set(${_CONFIGURATION_SUFFIX_RESULT} ${_CONFIGURATION_SUFFIX})
[-] 	set (${_IS_C_ONLY_RESULT} ${_IS_C_ONLY})
[+] 	set(${_IS_C_ONLY_RESULT} ${_IS_C_ONLY})
[-] 	set (${_IS_CPP_ONLY_RESULT} ${_IS_CPP_ONLY})
[+] 	set(${_IS_CPP_ONLY_RESULT} ${_IS_CPP_ONLY})
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	axl_create_compiler_flag_setting_regex (_REGEX ${_SETTING})
[+] 	axl_create_compiler_flag_setting_regex(_REGEX ${_SETTING})
[-] 	axl_get_compiler_flag_setting_traits (
[+] 	axl_get_compiler_flag_setting_traits(
[-] 	if (NOT _IS_CPP_ONLY)
[+] 	if(NOT _IS_CPP_ONLY)
[-] 		if (NOT "${_CONFIGURATION_SUFFIX}" STREQUAL "")
[+] 		if(NOT "${_CONFIGURATION_SUFFIX}" STREQUAL "")
[-] 			axl_apply_compiler_flag (
[+] 			axl_apply_compiler_flag(
[-] 		endif ()
[+] 		endif()
[-] 		axl_apply_compiler_flag (
[+] 		axl_apply_compiler_flag(
[-] 	endif ()
[+] 	endif()
[-] 	if (NOT _IS_C_ONLY)
[+] 	if(NOT _IS_C_ONLY)
[-] 		if (NOT "${_CONFIGURATION_SUFFIX}" STREQUAL "")
[+] 		if(NOT "${_CONFIGURATION_SUFFIX}" STREQUAL "")
[-] 			axl_apply_compiler_flag (
[+] 			axl_apply_compiler_flag(
[-] 		endif ()
[+] 		endif()
[-] 		axl_apply_compiler_flag (
[+] 		axl_apply_compiler_flag(
[-] 	endif ()
[+] 	endif()
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	set (_SETTING_LIST ${ARGN})
[+] 	set(_SETTING_LIST ${ARGN})
[-] 	foreach (_SETTING ${_SETTING_LIST})
[+] 	foreach(_SETTING ${_SETTING_LIST})
[-] 		axl_apply_compiler_flag_setting (${_SETTING})
[+] 		axl_apply_compiler_flag_setting(${_SETTING})
[-] 	endforeach ()
[+] 	endforeach()
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	axl_apply_compiler_flag_setting_list (${_AXL_G_COMPILER_FLAG_SETTING_LIST})
[+] 	axl_apply_compiler_flag_setting_list(${_AXL_G_COMPILER_FLAG_SETTING_LIST})
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	get_property (
[+] 	get_property(
[-] 	if (NOT _OPTION_LIST)
[+] 	if(NOT _OPTION_LIST)
[-] 		message (FATAL_ERROR "${_SETTING} does not have an associated option list")
[+] 		message(FATAL_ERROR "${_SETTING} does not have an associated option list")
[-] 	endif ()
[+] 	endif()
[-] 	axl_create_compiler_flag_regex (_REGEX ${_OPTION_LIST})
[+] 	axl_create_compiler_flag_regex(_REGEX ${_OPTION_LIST})
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	set (_OPTION_LIST ${ARGN})
[+] 	set(_OPTION_LIST ${ARGN})
[-] 	set (_REGEX "")
[+] 	set(_REGEX "")
[-] 	foreach (_OPTION ${_OPTION_LIST})
[+] 	foreach(_OPTION ${_OPTION_LIST})
[-] 		string (STRIP ${_OPTION} _OPTION)
[+] 		string(STRIP ${_OPTION} _OPTION)
[-] 		if (NOT "${_OPTION}" STREQUAL "")
[+] 		if(NOT "${_OPTION}" STREQUAL "")
[-] 			string (REPLACE "+" "%+" _OPTION ${_OPTION}) # e.g. -std=c++0x
[+] 			string(REPLACE "+" "%+" _OPTION ${_OPTION}) # e.g. -std=c++0x
[-] 			set (_OPTION_REGEX " +${_OPTION} +")
[+] 			set(_OPTION_REGEX " +${_OPTION} +")
[-] 			if ("${_REGEX}" STREQUAL "")
[+] 			if("${_REGEX}" STREQUAL "")
[-] 				set (_REGEX ${_OPTION_REGEX})
[+] 				set(_REGEX ${_OPTION_REGEX})
[-] 			else ()
[+] 			else()
[-] 				set (_REGEX "${_REGEX}|${_OPTION_REGEX}")
[+] 				set(_REGEX "${_REGEX}|${_OPTION_REGEX}")
[-] 			endif ()
[+] 			endif()
[-] 		endif ()
[+] 		endif()
[-] 	endforeach ()
[+] 	endforeach()
[-] 	set (${_RESULT} ${_REGEX})
[+] 	set(${_RESULT} ${_REGEX})
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	set (_ARG_LIST ${ARGN})
[+] 	set(_ARG_LIST ${ARGN})
[-] 	if (_ARG_LIST)
[+] 	if(_ARG_LIST)
[-] 		list (GET _ARG_LIST 0 _VALUE)
[+] 		list(GET _ARG_LIST 0 _VALUE)
[-] 	else ()
[+] 	else()
[-] 		set (_VALUE)
[+] 		set(_VALUE)
[-] 	endif ()
[+] 	endif()
[-] 	set (_FLAGS ${${_RESULT}})
[+] 	set(_FLAGS ${${_RESULT}})
[-] 	string (
[+] 	string(
[-] 	string (STRIP "${_FLAGS}" _FLAGS)
[+] 	string(STRIP "${_FLAGS}" _FLAGS)
[-] 	string (STRIP "${_VALUE}" _VALUE)
[+] 	string(STRIP "${_VALUE}" _VALUE)
[-] 	if (NOT "${_VALUE}" STREQUAL "")
[+] 	if(NOT "${_VALUE}" STREQUAL "")
[-] 		set (_FLAGS "${_FLAGS} ${_VALUE}")
[+] 		set(_FLAGS "${_FLAGS} ${_VALUE}")
[-] 	endif ()
[+] 	endif()
[-] 	set (${_RESULT} ${_FLAGS})
[+] 	set(${_RESULT} ${_FLAGS})
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	set (_FLAG_LIST ${ARGN})
[+] 	set(_FLAG_LIST ${ARGN})
[-] 	axl_create_compiler_flag_setting_regex (_REGEX ${_SETTING})
[+] 	axl_create_compiler_flag_setting_regex(_REGEX ${_SETTING})
[-] 	foreach (_FLAG ${_FLAG_LIST})
[+] 	foreach(_FLAG ${_FLAG_LIST})
[-] 		axl_apply_compiler_flag (${_FLAG} ${_REGEX} ${${_SETTING}})
[+] 		axl_apply_compiler_flag(${_FLAG} ${_REGEX} ${${_SETTING}})
[-] 	endforeach ()
[+] 	endforeach()
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	if (APPLE)
[+] 	if(APPLE)
[-] 		message (FATAL_ERROR "axl_set_export_version_script is not supported")
[+] 		message(FATAL_ERROR "axl_set_export_version_script is not supported")
[-] 	endif ()
[+] 	endif()
[-] 	set (_EXPORT_LIST ${ARGN})
[+] 	set(_EXPORT_LIST ${ARGN})
[-] 	set (_VERSION_SCRIPT "${CMAKE_CURRENT_BINARY_DIR}/${_TARGET}-export.version")
[+] 	set(_VERSION_SCRIPT "${CMAKE_CURRENT_BINARY_DIR}/${_TARGET}-export.version")
[-] 	file (WRITE ${_VERSION_SCRIPT} "{ global: ${_EXPORT_LIST}; local: *; };")
[+] 	file(WRITE ${_VERSION_SCRIPT} "{ global: ${_EXPORT_LIST}; local: *; };")
[-] 	set_property (
[+] 	set_property(
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	file (WRITE ${_SOURCE_FILE}) # create an empty file
[+] 	file(WRITE ${_SOURCE_FILE}) # create an empty file
[-] 	execute_process (
[+] 	execute_process(
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	get_filename_component (_PCH_NAME ${_PCH_H} NAME_WE)
[+] 	get_filename_component(_PCH_NAME ${_PCH_H} NAME_WE)
[-] 	set (_PCH_BIN "${CMAKE_CURRENT_BINARY_DIR}/${_TARGET}.dir/$(Configuration)/${_PCH_NAME}.pch")
[+] 	set(_PCH_BIN "${CMAKE_CURRENT_BINARY_DIR}/${_TARGET}.dir/$(Configuration)/${_PCH_NAME}.pch")
[-] 	set_property (
[+] 	set_property(
[-] 	set_property (
[+] 	set_property(
[-] 	set_source_files_properties (
[+] 	set_source_files_properties(
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	set (_ARG_LIST ${ARGN})
[+] 	set(_ARG_LIST ${ARGN})
[-] 	foreach (_ARG ${_ARG_LIST})
[+] 	foreach(_ARG ${_ARG_LIST})
[-] 		if (_ARG)
[+] 		if(_ARG)
[-] 			if ("${_PREFIX}" STREQUAL "-I" AND ${_ARG} MATCHES "\\.framework/?$")
[+] 			if("${_PREFIX}" STREQUAL "-I" AND ${_ARG} MATCHES "\\.framework/?$")
[-] 				list (APPEND ${_FLAGS} "-F${_FRAMEWORK}")
[+] 				list(APPEND ${_FLAGS} "-F${_FRAMEWORK}")
[-] 			else ()
[+] 			else()
[-] 				list (APPEND ${_FLAGS} "${_PREFIX}${_ARG}")
[+] 				list(APPEND ${_FLAGS} "${_PREFIX}${_ARG}")
[-] 			endif ()
[+] 			endif()
[-] 		endif ()
[+] 		endif()
[-] 	endforeach ()
[+] 	endforeach()
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	set (_EXTRA_FLAG_LIST ${ARGN})
[+] 	set(_EXTRA_FLAG_LIST ${ARGN})
[-] 	set (_PCH_PROXY_H "${CMAKE_CURRENT_BINARY_DIR}/${_PCH_CPP}.h")
[+] 	set(_PCH_PROXY_H "${CMAKE_CURRENT_BINARY_DIR}/${_PCH_CPP}.h")
[-] 	set (_PCH_BIN "${_PCH_PROXY_H}.gch")
[+] 	set(_PCH_BIN "${_PCH_PROXY_H}.gch")
[-] 	get_filename_component (_EXT ${_PCH_CPP} EXT)
[+] 	get_filename_component(_EXT ${_PCH_CPP} EXT)
[-] 	if ("${_EXT}" STREQUAL ".c")
[+] 	if("${_EXT}" STREQUAL ".c")
[-] 		set (_COMPILER ${CMAKE_C_COMPILER})
[+] 		set(_COMPILER ${CMAKE_C_COMPILER})
[-] 		set (_PCH_FLAGS "-x" "c-header")
[+] 		set(_PCH_FLAGS "-x" "c-header")
[-] 		set (_LANGUAGE "C")
[+] 		set(_LANGUAGE "C")
[-] 	else ()
[+] 	else()
[-] 		set (_COMPILER ${CMAKE_CXX_COMPILER})
[+] 		set(_COMPILER ${CMAKE_CXX_COMPILER})
[-] 		set (_PCH_FLAGS "-x" "c++-header")
[+] 		set(_PCH_FLAGS "-x" "c++-header")
[-] 		set (_LANGUAGE "CXX")
[+] 		set(_LANGUAGE "CXX")
[-] 	endif ()
[+] 	endif()
[-] 	string (TOUPPER "${CMAKE_BUILD_TYPE}" _CONFIGURATION)
[+] 	string(TOUPPER "${CMAKE_BUILD_TYPE}" _CONFIGURATION)
[-] 	set (_COMPILE_FLAGS "${CMAKE_${_LANGUAGE}_COMPILER_ARG1} ${CMAKE_${_LANGUAGE}_FLAGS} ${CMAKE_${_LANGUAGE}_FLAGS_${_CONFIGURATION}}")
[+] 	set(_COMPILE_FLAGS "${CMAKE_${_LANGUAGE}_COMPILER_ARG1} ${CMAKE_${_LANGUAGE}_FLAGS} ${CMAKE_${_LANGUAGE}_FLAGS_${_CONFIGURATION}}")
[-] 	get_directory_property (_DIR_FLAGS COMPILE_FLAGS)
[+] 	get_directory_property(_DIR_FLAGS COMPILE_FLAGS)
[-] 	get_target_property (_TARGET_FLAGS ${_TARGET} COMPILE_FLAGS)
[+] 	get_target_property(_TARGET_FLAGS ${_TARGET} COMPILE_FLAGS)
[-] 	if (_DIR_FLAGS)
[+] 	if(_DIR_FLAGS)
[-] 		set (_COMPILE_FLAGS "${_COMPILE_FLAGS} ${_DIR_FLAGS}")
[+] 		set(_COMPILE_FLAGS "${_COMPILE_FLAGS} ${_DIR_FLAGS}")
[-] 	endif ()
[+] 	endif()
[-] 	if (_TARGET_FLAGS)
[+] 	if(_TARGET_FLAGS)
[-] 		set (_COMPILE_FLAGS "${_COMPILE_FLAGS} ${_TARGET_FLAGS}")
[+] 		set(_COMPILE_FLAGS "${_COMPILE_FLAGS} ${_TARGET_FLAGS}")
[-] 	endif ()
[+] 	endif()
[-] 	string (STRIP "${_COMPILE_FLAGS}" _COMPILE_FLAGS)
[+] 	string(STRIP "${_COMPILE_FLAGS}" _COMPILE_FLAGS)
[-] 	string (REGEX REPLACE " +" ";" _COMPILE_FLAGS "${_COMPILE_FLAGS}")
[+] 	string(REGEX REPLACE " +" ";" _COMPILE_FLAGS "${_COMPILE_FLAGS}")
[-] 	get_directory_property (_DIR_FLAGS COMPILE_DEFINITIONS)
[+] 	get_directory_property(_DIR_FLAGS COMPILE_DEFINITIONS)
[-] 	get_directory_property (_DIR_FLAGS_2 COMPILE_DEFINITIONS_${_CONFIGURATION})
[+] 	get_directory_property(_DIR_FLAGS_2 COMPILE_DEFINITIONS_${_CONFIGURATION})
[-] 	get_target_property (_TARGET_FLAGS ${_TARGET} COMPILE_DEFINITIONS)
[+] 	get_target_property(_TARGET_FLAGS ${_TARGET} COMPILE_DEFINITIONS)
[-] 	get_target_property (_TARGET_FLAGS_2 ${_TARGET} COMPILE_DEFINITIONS_${_CONFIGURATION})
[+] 	get_target_property(_TARGET_FLAGS_2 ${_TARGET} COMPILE_DEFINITIONS_${_CONFIGURATION})
[-] 	axl_append_compile_flag_list (
[+] 	axl_append_compile_flag_list(
[-] 	if (APPLE AND NOT "${CMAKE_OSX_SYSROOT}" STREQUAL "")
[+] 	if(APPLE AND NOT "${CMAKE_OSX_SYSROOT}" STREQUAL "")
[-] 		list (
[+] 		list(
[-] 	endif ()
[+] 	endif()
[-] 	get_directory_property (_DIR_FLAGS INCLUDE_DIRECTORIES)
[+] 	get_directory_property(_DIR_FLAGS INCLUDE_DIRECTORIES)
[-] 	get_target_property (_TARGET_FLAGS ${_TARGET} INCLUDE_DIRECTORIES)
[+] 	get_target_property(_TARGET_FLAGS ${_TARGET} INCLUDE_DIRECTORIES)
[-] 	axl_append_compile_flag_list (
[+] 	axl_append_compile_flag_list(
[-] 	if (_EXTRA_FLAG_LIST)
[+] 	if(_EXTRA_FLAG_LIST)
[-] 		list (APPEND _COMPILE_FLAGS "${_EXTRA_FLAG_LIST}")
[+] 		list(APPEND _COMPILE_FLAGS "${_EXTRA_FLAG_LIST}")
[-] 	endif ()
[+] 	endif()
[-] 	list (REMOVE_DUPLICATES _COMPILE_FLAGS)
[+] 	list(REMOVE_DUPLICATES _COMPILE_FLAGS)
[-] 	if (NOT EXISTS ${_PCH_PROXY_H})
[+] 	if(NOT EXISTS ${_PCH_PROXY_H})
[-] 		file (
[+] 		file(
[-] 	endif ()
[+] 	endif()
[-] 	add_custom_command (
[+] 	add_custom_command(
[-] 	target_include_directories (
[+] 	target_include_directories(
[-] 	set_property (
[+] 	set_property(
[-] 	add_custom_target (
[+] 	add_custom_target(
[-] 	add_dependencies (${_TARGET} ${_TARGET}_pch)
[+] 	add_dependencies(${_TARGET} ${_TARGET}_pch)
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	if (MSVC AND MSVC_USE_PCH)
[+] 	if(MSVC AND MSVC_USE_PCH)
[-] 		axl_set_pch_msvc (${_TARGET} ${_PCH_H} ${_PCH_CPP} ${ARGN})
[+] 		axl_set_pch_msvc(${_TARGET} ${_PCH_H} ${_PCH_CPP} ${ARGN})
[-] 	elseif (GCC AND GCC_USE_PCH AND NOT CMAKE_GENERATOR MATCHES "Xcode")
[+] 	elseif(GCC AND GCC_USE_PCH AND NOT CMAKE_GENERATOR MATCHES "Xcode")
[-] 		axl_set_pch_gcc (${_TARGET} ${_PCH_H} ${_PCH_CPP} ${ARGN})
[+] 		axl_set_pch_gcc(${_TARGET} ${_PCH_H} ${_PCH_CPP} ${ARGN})
[-] 	endif ()
[+] 	endif()
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	set_source_files_properties (
[+] 	set_source_files_properties(
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	get_source_file_property (
[+] 	get_source_file_property(
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	axl_set_header_file_only (
[+] 	axl_set_header_file_only(
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	axl_set_header_file_only (
[+] 	axl_set_header_file_only(
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	if (WIN32)
[+] 	if(WIN32)
[-] 		execute_process (
[+] 		execute_process(
[-] 		if (NOT "${_OUTPUT}" STREQUAL "")
[+] 		if(NOT "${_OUTPUT}" STREQUAL "")
[-] 			string (REGEX REPLACE "\n.*" "" _OUTPUT ${_OUTPUT})
[+] 			string(REGEX REPLACE "\n.*" "" _OUTPUT ${_OUTPUT})
[-] 			string (REPLACE "\\" "/" _OUTPUT "${_OUTPUT}")
[+] 			string(REPLACE "\\" "/" _OUTPUT "${_OUTPUT}")
[-] 		endif ()
[+] 		endif()
[-] 	else ()
[+] 	else()
[-] 		execute_process (
[+] 		execute_process(
[-] 	endif ()
[+] 	endif()
[-] 	string (STRIP "${_OUTPUT}" _OUTPUT)
[+] 	string(STRIP "${_OUTPUT}" _OUTPUT)
[-] 	if ("${_OUTPUT}" STREQUAL "")
[+] 	if("${_OUTPUT}" STREQUAL "")
[-] 		set (${_RESULT} ${_RESULT}-NOTFOUND)
[+] 		set(${_RESULT} ${_RESULT}-NOTFOUND)
[-] 	else ()
[+] 	else()
[-] 		set (${_RESULT} ${_OUTPUT})
[+] 		set(${_RESULT} ${_OUTPUT})
[-] 	endif ()
[+] 	endif()
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	unset (_DIR)
[+] 	unset(_DIR)
[-] 	find_path (_DIR ${ARGN})
[+] 	find_path(_DIR ${ARGN})
[-] 	if (NOT _DIR)
[+] 	if(NOT _DIR)
[-] 		set (${_RESULT} ${_RESULT}-NOTFOUND)
[+] 		set(${_RESULT} ${_RESULT}-NOTFOUND)
[-] 	elseif (WIN32)
[+] 	elseif(WIN32)
[-] 		string (REPLACE "\\" "/" ${_RESULT} "${_DIR}")
[+] 		string(REPLACE "\\" "/" ${_RESULT} "${_DIR}")
[-] 	else ()
[+] 	else()
[-] 		set (${_RESULT} ${_DIR})
[+] 		set(${_RESULT} ${_DIR})
[-] 	endif ()
[+] 	endif()
[-] 	unset (_DIR CACHE)
[+] 	unset(_DIR CACHE)
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	set (_ARG_LIST ${ARGN})
[+] 	set(_ARG_LIST ${ARGN})
[-] 	set (_RESULT_LIB_DIR)
[+] 	set(_RESULT_LIB_DIR)
[-] 	set (_RESULT_LIB_NAME)
[+] 	set(_RESULT_LIB_NAME)
[-] 	set (_LIB_DIR_LIST)
[+] 	set(_LIB_DIR_LIST)
[-] 	set (_LIB_NAME_LIST)
[+] 	set(_LIB_NAME_LIST)
[-] 	set (_STATE)
[+] 	set(_STATE)
[-] 	foreach (_ARG ${_ARG_LIST})
[+] 	foreach(_ARG ${_ARG_LIST})
[-] 		string (REGEX MATCH "^(RESULT_LIB_DIR|RESULT_LIB_NAME|LIB_DIR|LIB_NAME)$" _MATCH ${_ARG})
[+] 		string(REGEX MATCH "^(RESULT_LIB_DIR|RESULT_LIB_NAME|LIB_DIR|LIB_NAME)$" _MATCH ${_ARG})
[-] 		if (NOT "${_MATCH}" STREQUAL "")
[+] 		if(NOT "${_MATCH}" STREQUAL "")
[-] 			set (_STATE ${_MATCH})
[+] 			set(_STATE ${_MATCH})
[-] 		elseif ("${_STATE}" STREQUAL "RESULT_LIB_DIR")
[+] 		elseif("${_STATE}" STREQUAL "RESULT_LIB_DIR")
[-] 			set (_RESULT_LIB_DIR ${_ARG})
[+] 			set(_RESULT_LIB_DIR ${_ARG})
[-] 			set (_STATE)
[+] 			set(_STATE)
[-] 		elseif ("${_STATE}" STREQUAL "RESULT_LIB_NAME")
[+] 		elseif("${_STATE}" STREQUAL "RESULT_LIB_NAME")
[-] 			set (_RESULT_LIB_NAME ${_ARG})
[+] 			set(_RESULT_LIB_NAME ${_ARG})
[-] 			set (_STATE)
[+] 			set(_STATE)
[-] 		elseif ("${_STATE}" STREQUAL "LIB_DIR")
[+] 		elseif("${_STATE}" STREQUAL "LIB_DIR")
[-] 			list (APPEND _LIB_DIR_LIST ${_ARG})
[+] 			list(APPEND _LIB_DIR_LIST ${_ARG})
[-] 		elseif ("${_STATE}" STREQUAL "LIB_NAME")
[+] 		elseif("${_STATE}" STREQUAL "LIB_NAME")
[-] 			list (APPEND _LIB_NAME_LIST ${_ARG})
[+] 			list(APPEND _LIB_NAME_LIST ${_ARG})
[-] 		endif ()
[+] 		endif()
[-] 	endforeach ()
[+] 	endforeach()
[-] 	if (NOT _LIB_DIR_LIST)
[+] 	if(NOT _LIB_DIR_LIST)
[-] 		set (_OPTIONS)
[+] 		set(_OPTIONS)
[-] 	else ()
[+] 	else()
[-] 		set (_OPTIONS PATHS ${_LIB_DIR_LIST} NO_DEFAULT_PATH)
[+] 		set(_OPTIONS PATHS ${_LIB_DIR_LIST} NO_DEFAULT_PATH)
[-] 	endif ()
[+] 	endif()
[-] 	foreach (_LIB_NAME ${_LIB_NAME_LIST})
[+] 	foreach(_LIB_NAME ${_LIB_NAME_LIST})
[-] 		axl_find_lib_dir (_LIB_DIR ${_LIB_NAME} ${_OPTIONS})
[+] 		axl_find_lib_dir(_LIB_DIR ${_LIB_NAME} ${_OPTIONS})
[-] 		if (_LIB_DIR)
[+] 		if(_LIB_DIR)
[-] 			if (_RESULT_LIB_DIR)
[+] 			if(_RESULT_LIB_DIR)
[-] 				set (${_RESULT_LIB_DIR} ${_LIB_DIR})
[+] 				set(${_RESULT_LIB_DIR} ${_LIB_DIR})
[-] 			endif ()
[+] 			endif()
[-] 			if (_RESULT_LIB_NAME)
[+] 			if(_RESULT_LIB_NAME)
[-] 				set (${_RESULT_LIB_NAME} ${_LIB_NAME})
[+] 				set(${_RESULT_LIB_NAME} ${_LIB_NAME})
[-] 			endif ()
[+] 			endif()
[-] 			break ()
[+] 			break()
[-] 		endif ()
[+] 		endif()
[-] 	endforeach ()
[+] 	endforeach()
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	unset (_PATH)
[+] 	unset(_PATH)
[-] 	find_library (_PATH ${_LIB_NAME} ${ARGN})
[+] 	find_library(_PATH ${_LIB_NAME} ${ARGN})
[-] 	if (NOT _PATH)
[+] 	if(NOT _PATH)
[-] 		set (${_RESULT} ${_RESULT}-NOTFOUND)
[+] 		set(${_RESULT} ${_RESULT}-NOTFOUND)
[-] 	else ()
[+] 	else()
[-] 		if (WIN32)
[+] 		if(WIN32)
[-] 			string (REPLACE "\\" "/" _PATH "${_PATH}")
[+] 			string(REPLACE "\\" "/" _PATH "${_PATH}")
[-] 		endif ()
[+] 		endif()
[-] 		get_filename_component (
[+] 		get_filename_component(
[-] 		set (${_RESULT} ${_DIR})
[+] 		set(${_RESULT} ${_DIR})
[-] 	endif ()
[+] 	endif()
[-] 	unset (_PATH CACHE)
[+] 	unset(_PATH CACHE)
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	set (_DIR_LIST ${ARGN})
[+] 	set(_DIR_LIST ${ARGN})
[-] 	set (_FILE_PATH ${_FILE_NAME}-NOTFOUND)
[+] 	set(_FILE_PATH ${_FILE_NAME}-NOTFOUND)
[-] 	foreach (_DIR ${_DIR_LIST})
[+] 	foreach(_DIR ${_DIR_LIST})
[-] 		if (EXISTS ${_DIR}/${_FILE_NAME})
[+] 		if(EXISTS ${_DIR}/${_FILE_NAME})
[-] 			set (_FILE_PATH ${_DIR}/${_FILE_NAME})
[+] 			set(_FILE_PATH ${_DIR}/${_FILE_NAME})
[-] 			break ()
[+] 			break()
[-] 		endif ()
[+] 		endif()
[-] 	endforeach ()
[+] 	endforeach()
[-] 	set (${_RESULT} ${_FILE_PATH})
[+] 	set(${_RESULT} ${_FILE_PATH})
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	set (_DIR ${_START_DIR})
[+] 	set(_DIR ${_START_DIR})
[-] 	while (TRUE)
[+] 	while(TRUE)
[-] 		if (EXISTS ${_DIR}/${_FILE_NAME})
[+] 		if(EXISTS ${_DIR}/${_FILE_NAME})
[-] 			set (_FILE_PATH ${_DIR}/${_FILE_NAME})
[+] 			set(_FILE_PATH ${_DIR}/${_FILE_NAME})
[-] 			break ()
[+] 			break()
[-] 		endif ()
[+] 		endif()
[-] 		get_filename_component (_PARENT_DIR "${_DIR}/.." ABSOLUTE)
[+] 		get_filename_component(_PARENT_DIR "${_DIR}/.." ABSOLUTE)
[-] 		if (${_DIR} STREQUAL ${_PARENT_DIR})
[+] 		if(${_DIR} STREQUAL ${_PARENT_DIR})
[-] 			set (_FILE_PATH ${_FILE_NAME}-NOTFOUND)
[+] 			set(_FILE_PATH ${_FILE_NAME}-NOTFOUND)
[-] 			break ()
[+] 			break()
[-] 		endif ()
[+] 		endif()
[-] 		set (_DIR ${_PARENT_DIR})
[+] 		set(_DIR ${_PARENT_DIR})
[-] 	endwhile ()
[+] 	endwhile()
[-] 	set (${_RESULT} ${_FILE_PATH})
[+] 	set(${_RESULT} ${_FILE_PATH})
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	axl_find_file_recurse_parent_dirs (_FILE_PATH ${_FILE_NAME} ${CMAKE_CURRENT_LIST_DIR}/..)
[+] 	axl_find_file_recurse_parent_dirs(_FILE_PATH ${_FILE_NAME} ${CMAKE_CURRENT_LIST_DIR}/..)
[-] 	if (_FILE_PATH)
[+] 	if(_FILE_PATH)
[-] 		include (${_FILE_PATH})
[+] 		include(${_FILE_PATH})
[-] 	endif ()
[+] 	endif()
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	if (IS_ABSOLUTE ${_FILE_NAME})
[+] 	if(IS_ABSOLUTE ${_FILE_NAME})
[-] 		set (${_FILE_PATH} ${_FILE_NAME})
[+] 		set(${_FILE_PATH} ${_FILE_NAME})
[-] 	else ()
[+] 	else()
[-] 		set (${_FILE_PATH} "${_BASE_DIR}/${_FILE_NAME}")
[+] 		set(${_FILE_PATH} "${_BASE_DIR}/${_FILE_NAME}")
[-] 	endif ()
[+] 	endif()
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	if (NOT EXISTS ${_FILE_PATH})
[+] 	if(NOT EXISTS ${_FILE_PATH})
[-] 		file (READ ${_TEMPLATE_FILE_PATH} _BUFFER)
[+] 		file(READ ${_TEMPLATE_FILE_PATH} _BUFFER)
[-] 		file (WRITE ${_FILE_PATH} ${_BUFFER})
[+] 		file(WRITE ${_FILE_PATH} ${_BUFFER})
[-] 	endif ()
[+] 	endif()
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	set (_PERMISSION_LIST ${ARGN})
[+] 	set(_PERMISSION_LIST ${ARGN})
[-] 	set (_TMP_FILE ${CMAKE_CURRENT_BINARY_DIR}/tmp/${_DST_FILE})
[+] 	set(_TMP_FILE ${CMAKE_CURRENT_BINARY_DIR}/tmp/${_DST_FILE})
[-] 	configure_file (${_SRC_FILE} ${_TMP_FILE})
[+] 	configure_file(${_SRC_FILE} ${_TMP_FILE})
[-] 	file (
[+] 	file(
[-] 	file (REMOVE ${_TMP_FILE})
[+] 	file(REMOVE ${_TMP_FILE})
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	file (GLOB _FILE_LIST RELATIVE ${_DIR} ${_DIR}/*)
[+] 	file(GLOB _FILE_LIST RELATIVE ${_DIR} ${_DIR}/*)
[-] 	set (_DIR_LIST)
[+] 	set(_DIR_LIST)
[-] 	foreach (_FILE ${_FILE_LIST})
[+] 	foreach(_FILE ${_FILE_LIST})
[-] 		if (IS_DIRECTORY ${_DIR}/${_FILE})
[+] 		if(IS_DIRECTORY ${_DIR}/${_FILE})
[-] 			LIST (APPEND _DIR_LIST ${_FILE})
[+] 			LIST(APPEND _DIR_LIST ${_FILE})
[-] 		endif ()
[+] 		endif()
[-] 	endforeach ()
[+] 	endforeach()
[-] 	set (${_RESULT} ${_DIR_LIST})
[+] 	set(${_RESULT} ${_DIR_LIST})
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	set (${_IMPORT}_FOUND FALSE)
[+] 	set(${_IMPORT}_FOUND FALSE)
[-] 	unset (_IMPORT_FILE_PATH)
[+] 	unset(_IMPORT_FILE_PATH)
[-] 	axl_find_file (
[+] 	axl_find_file(
[-] 	if (_IMPORT_FILE_PATH)
[+] 	if(_IMPORT_FILE_PATH)
[-] 		include (${_IMPORT_FILE_PATH})
[+] 		include(${_IMPORT_FILE_PATH})
[-] 		string (TOUPPER ${_IMPORT} _IMPORT_UC)
[+] 		string(TOUPPER ${_IMPORT} _IMPORT_UC)
[-] 		if (NOT ${_IMPORT_UC}_FOUND)
[+] 		if(NOT ${_IMPORT_UC}_FOUND)
[-] 			string (TOUPPER ${_IMPORT} _FILTER)
[+] 			string(TOUPPER ${_IMPORT} _FILTER)
[-] 			axl_filter_list (_FILTERED_PATH_LIST ${_FILTER} ${AXL_PATH_LIST})
[+] 			axl_filter_list(_FILTERED_PATH_LIST ${_FILTER} ${AXL_PATH_LIST})
[-] 			if (_FILTERED_PATH_LIST)
[+] 			if(_FILTERED_PATH_LIST)
[-] 				list (LENGTH _FILTERED_PATH_LIST _LENGTH)
[+] 				list(LENGTH _FILTERED_PATH_LIST _LENGTH)
[-] 				if (${_LENGTH} LESS 2)
[+] 				if(${_LENGTH} LESS 2)
[-] 					set (_FILTERED_PATH_LIST " ${_FILTERED_PATH_LIST} in")
[+] 					set(_FILTERED_PATH_LIST " ${_FILTERED_PATH_LIST} in")
[-] 				else ()
[+] 				else()
[-] 					set (_FILTERED_PATH_LIST " the following variables:;${_FILTERED_PATH_LIST} in")
[+] 					set(_FILTERED_PATH_LIST " the following variables:;${_FILTERED_PATH_LIST} in")
[-] 				endif ()
[+] 				endif()
[-] 			endif ()
[+] 			endif()
[-] 			if (_IS_OPTIONAL)
[+] 			if(_IS_OPTIONAL)
[-] 				axl_message ("${_IMPORT}:" "NOT FOUND, adjust${_FILTERED_PATH_LIST} paths.cmake (optional)")
[+] 				axl_message("${_IMPORT}:" "NOT FOUND, adjust${_FILTERED_PATH_LIST} paths.cmake(optional)")
[-] 			else ()
[+] 			else()
[-] 				message (FATAL_ERROR "${_IMPORT} is REQUIRED but NOT FOUND, adjust${_FILTERED_PATH_LIST} paths.cmake")
[+] 				message(FATAL_ERROR "${_IMPORT} is REQUIRED but NOT FOUND, adjust${_FILTERED_PATH_LIST} paths.cmake")
[-] 			endif ()
[+] 			endif()
[-] 		endif ()
[+] 		endif()
[-] 	elseif (_IS_OPTIONAL)
[+] 	elseif(_IS_OPTIONAL)
[-] 		axl_message ("${_IMPORT}:" "NOT FOUND, missing import_${_IMPORT}.cmake, adjust AXL_IMPORT_DIR_LIST (optional)")
[+] 		axl_message("${_IMPORT}:" "NOT FOUND, missing import_${_IMPORT}.cmake, adjust AXL_IMPORT_DIR_LIST(optional)")
[-] 	else ()
[+] 	else()
[-] 		message (FATAL_ERROR "${_IMPORT} is REQUIRED but NOT FOUND, missing import_${_IMPORT}.cmake, adjust AXL_IMPORT_DIR_LIST")
[+] 		message(FATAL_ERROR "${_IMPORT} is REQUIRED but NOT FOUND, missing import_${_IMPORT}.cmake, adjust AXL_IMPORT_DIR_LIST")
[-] 	endif ()
[+] 	endif()
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	set (_IMPORT_LIST ${ARGN})
[+] 	set(_IMPORT_LIST ${ARGN})
[-] 	set (_IS_OPTIONAL FALSE)
[+] 	set(_IS_OPTIONAL FALSE)
[-] 	foreach (_IMPORT ${_IMPORT_LIST})
[+] 	foreach(_IMPORT ${_IMPORT_LIST})
[-] 		if ("${_IMPORT}" STREQUAL "REQUIRED")
[+] 		if("${_IMPORT}" STREQUAL "REQUIRED")
[-] 			set (_IS_OPTIONAL FALSE)
[+] 			set(_IS_OPTIONAL FALSE)
[-] 		elseif ("${_IMPORT}" STREQUAL "OPTIONAL")
[+] 		elseif("${_IMPORT}" STREQUAL "OPTIONAL")
[-] 			set (_IS_OPTIONAL TRUE)
[+] 			set(_IS_OPTIONAL TRUE)
[-] 		else ()
[+] 		else()
[-] 			axl_include_import_file (
[+] 			axl_include_import_file(
[-] 		endif ()
[+] 		endif()
[-] 	endforeach ()
[+] 	endforeach()
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	set (_H_LIST ${ARGN})
[+] 	set(_H_LIST ${ARGN})
[-] 	install (
[+] 	install(
[-] 	set (_REDIR_H_LIST)
[+] 	set(_REDIR_H_LIST)
[-] 	foreach (_FILE ${LIB_H_LIST})
[+] 	foreach(_FILE ${LIB_H_LIST})
[-] 		string (REPLACE "/${_SUB_DIR}/" "/" _FILE ${_FILE})
[+] 		string(REPLACE "/${_SUB_DIR}/" "/" _FILE ${_FILE})
[-] 		list (APPEND _REDIR_H_LIST ${_FILE})
[+] 		list(APPEND _REDIR_H_LIST ${_FILE})
[-] 	endforeach ()
[+] 	endforeach()
[-] 	install (
[+] 	install(
[-] endmacro ()
[+] endmacro()
----------------------
27/02/2019 18:01:32 - C:\Projects\repos\ioninja\axl\cmake\import_7z.cmake
----------------------
[-] if (NOT 7Z_EXE)
[+] if(NOT 7Z_EXE)
[-] 	axl_find_executable (7Z_EXE 7z)
[+] 	axl_find_executable(7Z_EXE 7z)
[-] 	if (7Z_EXE)
[+] 	if(7Z_EXE)
[-] 		axl_message ("7-Zip found at:" "${7Z_EXE}")
[+] 		axl_message("7-Zip found at:" "${7Z_EXE}")
[-] 	endif ()
[+] 	endif()
[-] endif ()
[+] endif()
[-] if (EXISTS ${7Z_EXE})
[+] if(EXISTS ${7Z_EXE})
[-] 	set (7Z_FOUND TRUE)
[+] 	set(7Z_FOUND TRUE)
[-] else ()
[+] else()
[-] 	set (7Z_FOUND FALSE)
[+] 	set(7Z_FOUND FALSE)
[-] endif ()
[+] endif()
----------------------
27/02/2019 18:01:32 - C:\Projects\repos\ioninja\axl\cmake\import_axl.cmake
----------------------
[-] axl_find_file (
[+] axl_find_file(
[-] if (_CONFIG_CMAKE)
[+] if(_CONFIG_CMAKE)
[-] 	include (${_CONFIG_CMAKE})
[+] 	include(${_CONFIG_CMAKE})
[-] 	axl_message ("AXL ${AXL_VERSION_FULL} paths:")
[+] 	axl_message("AXL ${AXL_VERSION_FULL} paths:")
[-] 	axl_message ("    CMake files:" "${AXL_CMAKE_DIR}")
[+] 	axl_message("    CMake files:" "${AXL_CMAKE_DIR}")
[-] 	axl_message ("    Includes:"    "${AXL_INC_DIR}")
[+] 	axl_message("    Includes:"    "${AXL_INC_DIR}")
[-] 	axl_message ("    Libraries:"   "${AXL_LIB_DIR}")
[+] 	axl_message("    Libraries:"   "${AXL_LIB_DIR}")
[-] 	set (AXL_FOUND TRUE)
[+] 	set(AXL_FOUND TRUE)
[-] else ()
[+] else()
[-] 	set (AXL_FOUND FALSE)
[+] 	set(AXL_FOUND FALSE)
[-] endif ()
[+] endif()
----------------------
27/02/2019 18:01:32 - C:\Projects\repos\ioninja\axl\cmake\import_doxygen.cmake
----------------------
[-] if (NOT DOXYGEN_EXE)
[+] if(NOT DOXYGEN_EXE)
[-] 	axl_find_executable (DOXYGEN_EXE doxygen)
[+] 	axl_find_executable(DOXYGEN_EXE doxygen)
[-] 	if (DOXYGEN_EXE)
[+] 	if(DOXYGEN_EXE)
[-] 		axl_message ("Doxygen found at:" "${DOXYGEN_EXE}")
[+] 		axl_message("Doxygen found at:" "${DOXYGEN_EXE}")
[-] 	endif ()
[+] 	endif()
[-] endif ()
[+] endif()
[-] if (EXISTS ${DOXYGEN_EXE})
[+] if(EXISTS ${DOXYGEN_EXE})
[-] 	set (DOXYGEN_FOUND TRUE)
[+] 	set(DOXYGEN_FOUND TRUE)
[-] else ()
[+] else()
[-] 	set (DOXYGEN_FOUND FALSE)
[+] 	set(DOXYGEN_FOUND FALSE)
[-] endif ()
[+] endif()
----------------------
27/02/2019 18:01:32 - C:\Projects\repos\ioninja\axl\cmake\import_expat.cmake
----------------------
[-] if (NOT EXPAT_INC_DIR)
[+] if(NOT EXPAT_INC_DIR)
[-] 	axl_find_inc_dir (EXPAT_INC_DIR expat.h)
[+] 	axl_find_inc_dir(EXPAT_INC_DIR expat.h)
[-] endif ()
[+] endif()
[-] if (NOT EXPAT_LIB_DIR)
[+] if(NOT EXPAT_LIB_DIR)
[-] 	axl_find_lib_dir (EXPAT_LIB_DIR expat)
[+] 	axl_find_lib_dir(EXPAT_LIB_DIR expat)
[-] endif ()
[+] endif()
[-] if (EXISTS ${EXPAT_INC_DIR}/expat.h)
[+] if(EXISTS ${EXPAT_INC_DIR}/expat.h)
[-] 	axl_message ("Expat paths:")
[+] 	axl_message("Expat paths:")
[-] 	axl_message ("    Includes:"  "${EXPAT_INC_DIR}")
[+] 	axl_message("    Includes:"  "${EXPAT_INC_DIR}")
[-] 	axl_message ("    Libraries:" "${EXPAT_LIB_DIR}")
[+] 	axl_message("    Libraries:" "${EXPAT_LIB_DIR}")
[-] 	if (EXPAT_DLL_DIR)
[+] 	if(EXPAT_DLL_DIR)
[-] 		axl_message ("    DLLs:"  "${EXPAT_DLL_DIR}")
[+] 		axl_message("    DLLs:"  "${EXPAT_DLL_DIR}")
[-] 	endif ()
[+] 	endif()
[-] 	set (EXPAT_FOUND TRUE)
[+] 	set(EXPAT_FOUND TRUE)
[-] else ()
[+] else()
[-] 	set (EXPAT_FOUND FALSE)
[+] 	set(EXPAT_FOUND FALSE)
[-] endif ()
[+] endif()
----------------------
27/02/2019 18:01:32 - C:\Projects\repos\ioninja\axl\cmake\import_git.cmake
----------------------
[-] if (NOT GIT_EXE)
[+] if(NOT GIT_EXE)
[-] 	axl_find_executable (GIT_EXE git)
[+] 	axl_find_executable(GIT_EXE git)
[-] 	if (GIT_EXE)
[+] 	if(GIT_EXE)
[-] 		axl_message ("Git found at:" "${GIT_EXE}")
[+] 		axl_message("Git found at:" "${GIT_EXE}")
[-] 	endif ()
[+] 	endif()
[-] endif ()
[+] endif()
[-] if (EXISTS ${GIT_EXE})
[+] if(EXISTS ${GIT_EXE})
[-] 	set (GIT_FOUND TRUE)
[+] 	set(GIT_FOUND TRUE)
[-] else ()
[+] else()
[-] 	set (GIT_FOUND FALSE)
[+] 	set(GIT_FOUND FALSE)
[-] endif ()
[+] endif()
----------------------
27/02/2019 18:01:32 - C:\Projects\repos\ioninja\axl\cmake\import_latex.cmake
----------------------
[-] if (NOT PDFLATEX_EXE)
[+] if(NOT PDFLATEX_EXE)
[-] 	axl_find_executable (PDFLATEX_EXE pdflatex)
[+] 	axl_find_executable(PDFLATEX_EXE pdflatex)
[-] 	if (PDFLATEX_EXE)
[+] 	if(PDFLATEX_EXE)
[-] 		axl_message ("Pdflatex found at:" "${PDFLATEX_EXE}")
[+] 		axl_message("Pdflatex found at:" "${PDFLATEX_EXE}")
[-] 	endif ()
[+] 	endif()
[-] endif ()
[+] endif()
[-] if (EXISTS ${PDFLATEX_EXE})
[+] if(EXISTS ${PDFLATEX_EXE})
[-] 	set (LATEX_FOUND TRUE)
[+] 	set(LATEX_FOUND TRUE)
[-] else ()
[+] else()
[-] 	set (LATEX_FOUND FALSE)
[+] 	set(LATEX_FOUND FALSE)
[-] endif ()
[+] endif()
----------------------
27/02/2019 18:01:32 - C:\Projects\repos\ioninja\axl\cmake\import_libssh2.cmake
----------------------
[-] if (NOT LIBSSH2_INC_DIR)
[+] if(NOT LIBSSH2_INC_DIR)
[-] 	axl_find_inc_dir (LIBSSH2_INC_DIR libssh2.h)
[+] 	axl_find_inc_dir(LIBSSH2_INC_DIR libssh2.h)
[-] endif ()
[+] endif()
[-] if (NOT LIBSSH2_LIB_DIR)
[+] if(NOT LIBSSH2_LIB_DIR)
[-] 	axl_find_lib_dir (LIBSSH2_LIB_DIR ssh2)
[+] 	axl_find_lib_dir(LIBSSH2_LIB_DIR ssh2)
[-] endif ()
[+] endif()
[-] if (EXISTS ${LIBSSH2_INC_DIR}/libssh2.h)
[+] if(EXISTS ${LIBSSH2_INC_DIR}/libssh2.h)
[-] 	axl_message ("LibSSH2 paths:")
[+] 	axl_message("LibSSH2 paths:")
[-] 	axl_message ("    Includes:"  "${LIBSSH2_INC_DIR}")
[+] 	axl_message("    Includes:"  "${LIBSSH2_INC_DIR}")
[-] 	axl_message ("    Libraries:" "${LIBSSH2_LIB_DIR}")
[+] 	axl_message("    Libraries:" "${LIBSSH2_LIB_DIR}")
[-] 	if (LIBSSH2_DLL_DIR)
[+] 	if(LIBSSH2_DLL_DIR)
[-] 		axl_message ("    DLLs:"  "${LIBSSH2_DLL_DIR}")
[+] 		axl_message("    DLLs:"  "${LIBSSH2_DLL_DIR}")
[-] 	endif ()
[+] 	endif()
[-] 	set (LIBSSH2_FOUND TRUE)
[+] 	set(LIBSSH2_FOUND TRUE)
[-] else ()
[+] else()
[-] 	set (LIBSSH2_FOUND FALSE)
[+] 	set(LIBSSH2_FOUND FALSE)
[-] endif ()
[+] endif()
----------------------
27/02/2019 18:01:32 - C:\Projects\repos\ioninja\axl\cmake\import_libudev.cmake
----------------------
[-] unset (_DIR)
[+] unset(_DIR)
[-] find_path (
[+] find_path(
[-] if (_DIR)
[+] if(_DIR)
[-] 	set (LIBUDEV_FOUND TRUE)
[+] 	set(LIBUDEV_FOUND TRUE)
[-] else ()
[+] else()
[-] 	set (LIBUDEV_FOUND FALSE)
[+] 	set(LIBUDEV_FOUND FALSE)
[-] endif ()
[+] endif()
[-] unset (_DIR CACHE)
[+] unset(_DIR CACHE)
----------------------
27/02/2019 18:01:32 - C:\Projects\repos\ioninja\axl\cmake\import_libusb.cmake
----------------------
[-] set (
[+] set(
[-] if (NOT LIBUSB_INC_DIR)
[+] if(NOT LIBUSB_INC_DIR)
[-] 	axl_find_inc_dir (LIBUSB_INC_DIR libusb-1.0/libusb.h)
[+] 	axl_find_inc_dir(LIBUSB_INC_DIR libusb-1.0/libusb.h)
[-] endif ()
[+] endif()
[-] if (NOT LIBUSB_LIB_DIR)
[+] if(NOT LIBUSB_LIB_DIR)
[-] 	if (NOT LIBUSB_LIB_NAME)
[+] 	if(NOT LIBUSB_LIB_NAME)
[-] 		axl_find_lib_dir_ex (
[+] 		axl_find_lib_dir_ex(
[-] 	else ()
[+] 	else()
[-] 		axl_find_lib_dir_ex (
[+] 		axl_find_lib_dir_ex(
[-] 	endif ()
[+] 	endif()
[-] elseif (NOT LIBUSB_LIB_NAME)
[+] elseif(NOT LIBUSB_LIB_NAME)
[-] 	axl_find_lib_dir_ex (
[+] 	axl_find_lib_dir_ex(
[-] endif ()
[+] endif()
[-] if (EXISTS ${LIBUSB_INC_DIR}/libusb-1.0/libusb.h)
[+] if(EXISTS ${LIBUSB_INC_DIR}/libusb-1.0/libusb.h)
[-] 	axl_message ("LibUSB paths:")
[+] 	axl_message("LibUSB paths:")
[-] 	axl_message ("    Includes:"  "${LIBUSB_INC_DIR}")
[+] 	axl_message("    Includes:"  "${LIBUSB_INC_DIR}")
[-] 	axl_message ("    Libraries:" "${LIBUSB_LIB_DIR}")
[+] 	axl_message("    Libraries:" "${LIBUSB_LIB_DIR}")
[-] 	if (LIBUSB_DLL_DIR)
[+] 	if(LIBUSB_DLL_DIR)
[-] 		axl_message ("    DLLs:" "${LIBUSB_DLL_DIR}")
[+] 		axl_message("    DLLs:" "${LIBUSB_DLL_DIR}")
[-] 	endif ()
[+] 	endif()
[-] 	axl_message ("    Library name:" "${LIBUSB_LIB_NAME}")
[+] 	axl_message("    Library name:" "${LIBUSB_LIB_NAME}")
[-] 	set (LIBUSB_FOUND TRUE)
[+] 	set(LIBUSB_FOUND TRUE)
[-] else ()
[+] else()
[-] 	set (LIBUSB_FOUND FALSE)
[+] 	set(LIBUSB_FOUND FALSE)
[-] endif ()
[+] endif()
----------------------
27/02/2019 18:01:32 - C:\Projects\repos\ioninja\axl\cmake\import_llvm.cmake
----------------------
[-] unset (LLVM_DIR CACHE)
[+] unset(LLVM_DIR CACHE)
[-] set (LLVM_FOUND FALSE)
[+] set(LLVM_FOUND FALSE)
[-] if (NOT LLVM_CMAKE_DIR)
[+] if(NOT LLVM_CMAKE_DIR)
[-] 	find_package (LLVM QUIET)
[+] 	find_package(LLVM QUIET)
[-] endif ()
[+] endif()
[-] if (EXISTS ${LLVM_CMAKE_DIR}/LLVMConfig.cmake)
[+] if(EXISTS ${LLVM_CMAKE_DIR}/LLVMConfig.cmake)
[-] 	include (${LLVM_CMAKE_DIR}/LLVMConfig.cmake)
[+] 	include(${LLVM_CMAKE_DIR}/LLVMConfig.cmake)
[-] 	if (NOT LLVM_INC_DIR)
[+] 	if(NOT LLVM_INC_DIR)
[-] 		set (LLVM_INC_DIR ${LLVM_INCLUDE_DIRS})
[+] 		set(LLVM_INC_DIR ${LLVM_INCLUDE_DIRS})
[-] 	endif ()
[+] 	endif()
[-] 	if (NOT LLVM_LIB_DIR)
[+] 	if(NOT LLVM_LIB_DIR)
[-] 		set (LLVM_LIB_DIR ${LLVM_LIBRARY_DIRS})
[+] 		set(LLVM_LIB_DIR ${LLVM_LIBRARY_DIRS})
[-] 	endif ()
[+] 	endif()
[-] 	set (LLVM_VERSION ${LLVM_PACKAGE_VERSION})
[+] 	set(LLVM_VERSION ${LLVM_PACKAGE_VERSION})
[-] 	axl_message ("LLVM ${LLVM_VERSION} paths:")
[+] 	axl_message("LLVM ${LLVM_VERSION} paths:")
[-] 	axl_message ("    CMake files:" "${LLVM_CMAKE_DIR}")
[+] 	axl_message("    CMake files:" "${LLVM_CMAKE_DIR}")
[-] 	axl_message ("    Includes:"    "${LLVM_INC_DIR}")
[+] 	axl_message("    Includes:"    "${LLVM_INC_DIR}")
[-] 	axl_message ("    Libraries:"   "${LLVM_LIB_DIR}")
[+] 	axl_message("    Libraries:"   "${LLVM_LIB_DIR}")
[-] 	set (LLVM_FOUND TRUE)
[+] 	set(LLVM_FOUND TRUE)
[-] endif ()
[+] endif()
[-] macro (
[+] macro(
[-] 	set (_COMPONENT_LIST ${ARGN})
[+] 	set(_COMPONENT_LIST ${ARGN})
[-] 	if (${LLVM_VERSION} VERSION_LESS 3.5)
[+] 	if(${LLVM_VERSION} VERSION_LESS 3.5)
[-] 		llvm_map_components_to_libraries (_LIB_LIST ${_COMPONENT_LIST})
[+] 		llvm_map_components_to_libraries(_LIB_LIST ${_COMPONENT_LIST})
[-] 	else ()
[+] 	else()
[-] 		llvm_map_components_to_libnames (_LIB_LIST ${_COMPONENT_LIST})
[+] 		llvm_map_components_to_libnames(_LIB_LIST ${_COMPONENT_LIST})
[-] 	endif ()
[+] 	endif()
[-] 	target_link_libraries (${_TARGET} ${_LIB_LIST})
[+] 	target_link_libraries(${_TARGET} ${_LIB_LIST})
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	set (_EXTRA_COMPONENT_LIST ${ARGN})
[+] 	set(_EXTRA_COMPONENT_LIST ${ARGN})
[-] 	set (
[+] 	set(
[-] 	if (${LLVM_VERSION} VERSION_LESS 3.6)
[+] 	if(${LLVM_VERSION} VERSION_LESS 3.6)
[-] 		set (_COMPONENT_LIST ${_COMPONENT_LIST} jit)
[+] 		set(_COMPONENT_LIST ${_COMPONENT_LIST} jit)
[-] 	endif ()
[+] 	endif()
[-] 	target_link_llvm_libraries (
[+] 	target_link_llvm_libraries(
[-] endmacro ()
[+] endmacro()
----------------------
27/02/2019 18:01:32 - C:\Projects\repos\ioninja\axl\cmake\import_lua.cmake
----------------------
[-] set (
[+] set(
[-] if (NOT LUA_INC_DIR)
[+] if(NOT LUA_INC_DIR)
[-] 	axl_find_inc_dir (
[+] 	axl_find_inc_dir(
[-] endif ()
[+] endif()
[-] if (NOT LUA_LIB_DIR)
[+] if(NOT LUA_LIB_DIR)
[-] 	if (NOT LUA_LIB_NAME)
[+] 	if(NOT LUA_LIB_NAME)
[-] 		axl_find_lib_dir_ex (
[+] 		axl_find_lib_dir_ex(
[-] 	else ()
[+] 	else()
[-] 		axl_find_lib_dir_ex (
[+] 		axl_find_lib_dir_ex(
[-] 	endif ()
[+] 	endif()
[-] elseif (NOT LUA_LIB_NAME)
[+] elseif(NOT LUA_LIB_NAME)
[-] 	axl_find_lib_dir_ex (
[+] 	axl_find_lib_dir_ex(
[-] endif ()
[+] endif()
[-] if (EXISTS ${LUA_INC_DIR}/lua.h AND LUA_LIB_DIR AND LUA_LIB_NAME)
[+] if(EXISTS ${LUA_INC_DIR}/lua.h AND LUA_LIB_DIR AND LUA_LIB_NAME)
[-] 	axl_message ("Lua paths:")
[+] 	axl_message("Lua paths:")
[-] 	axl_message ("    Includes:"  "${LUA_INC_DIR}")
[+] 	axl_message("    Includes:"  "${LUA_INC_DIR}")
[-] 	axl_message ("    Libraries:" "${LUA_LIB_DIR}")
[+] 	axl_message("    Libraries:" "${LUA_LIB_DIR}")
[-] 	if (LUA_DLL_DIR)
[+] 	if(LUA_DLL_DIR)
[-] 		axl_message ("    DLLs:" "${LUA_DLL_DIR}")
[+] 		axl_message("    DLLs:" "${LUA_DLL_DIR}")
[-] 	endif ()
[+] 	endif()
[-] 	axl_message ("    Library name:" "${LUA_LIB_NAME}")
[+] 	axl_message("    Library name:" "${LUA_LIB_NAME}")
[-] 	set (LUA_FOUND TRUE)
[+] 	set(LUA_FOUND TRUE)
[-] else ()
[+] else()
[-] 	set (LUA_FOUND FALSE)
[+] 	set(LUA_FOUND FALSE)
[-] endif ()
[+] endif()
----------------------
27/02/2019 18:01:32 - C:\Projects\repos\ioninja\axl\cmake\import_openssl.cmake
----------------------
[-] set (
[+] set(
[-] set (
[+] set(
[-] if (NOT OPENSSL_INC_DIR)
[+] if(NOT OPENSSL_INC_DIR)
[-] 	axl_find_inc_dir (OPENSSL_INC_DIR openssl/obj_mac.h)
[+] 	axl_find_inc_dir(OPENSSL_INC_DIR openssl/obj_mac.h)
[-] endif ()
[+] endif()
[-] if (NOT OPENSSL_LIB_DIR)
[+] if(NOT OPENSSL_LIB_DIR)
[-] 	if (NOT OPENSSL_CRYPTO_LIB_NAME)
[+] 	if(NOT OPENSSL_CRYPTO_LIB_NAME)
[-] 		axl_find_lib_dir_ex (
[+] 		axl_find_lib_dir_ex(
[-] 	else ()
[+] 	else()
[-] 		axl_find_lib_dir_ex (
[+] 		axl_find_lib_dir_ex(
[-] 	endif ()
[+] 	endif()
[-] elseif (NOT OPENSSL_CRYPTO_LIB_NAME)
[+] elseif(NOT OPENSSL_CRYPTO_LIB_NAME)
[-] 	axl_find_lib_dir_ex (
[+] 	axl_find_lib_dir_ex(
[-] endif ()
[+] endif()
[-] if (NOT OPENSSL_SSL_LIB_NAME)
[+] if(NOT OPENSSL_SSL_LIB_NAME)
[-] 	axl_find_lib_dir_ex (
[+] 	axl_find_lib_dir_ex(
[-] endif ()
[+] endif()
[-] if (EXISTS ${OPENSSL_INC_DIR}/openssl/obj_mac.h)
[+] if(EXISTS ${OPENSSL_INC_DIR}/openssl/obj_mac.h)
[-] 	axl_message ("OpenSSL paths:")
[+] 	axl_message("OpenSSL paths:")
[-] 	axl_message ("    Includes:"       "${OPENSSL_INC_DIR}")
[+] 	axl_message("    Includes:"       "${OPENSSL_INC_DIR}")
[-] 	axl_message ("    Libraries:"      "${OPENSSL_LIB_DIR}")
[+] 	axl_message("    Libraries:"      "${OPENSSL_LIB_DIR}")
[-] 	if (OPENSSL_DLL_DIR)
[+] 	if(OPENSSL_DLL_DIR)
[-] 		axl_message ("    DLLs:"       "${OPENSSL_DLL_DIR}")
[+] 		axl_message("    DLLs:"       "${OPENSSL_DLL_DIR}")
[-] 	endif ()
[+] 	endif()
[-] 	axl_message ("    Crypto library:" "${OPENSSL_CRYPTO_LIB_NAME}")
[+] 	axl_message("    Crypto library:" "${OPENSSL_CRYPTO_LIB_NAME}")
[-] 	if (OPENSSL_CRYPTO_DLL_NAME)
[+] 	if(OPENSSL_CRYPTO_DLL_NAME)
[-] 		axl_message ("    Crypto DLL:" "${OPENSSL_CRYPTO_DLL_NAME}")
[+] 		axl_message("    Crypto DLL:" "${OPENSSL_CRYPTO_DLL_NAME}")
[-] 	endif ()
[+] 	endif()
[-] 	axl_message ("    SSL library:"    "${OPENSSL_SSL_LIB_NAME}")
[+] 	axl_message("    SSL library:"    "${OPENSSL_SSL_LIB_NAME}")
[-] 	if (OPENSSL_SSL_DLL_NAME)
[+] 	if(OPENSSL_SSL_DLL_NAME)
[-] 		axl_message ("    SSL DLL:"    "${OPENSSL_SSL_DLL_NAME}")
[+] 		axl_message("    SSL DLL:"    "${OPENSSL_SSL_DLL_NAME}")
[-] 	endif ()
[+] 	endif()
[-] 	set (OPENSSL_FOUND TRUE)
[+] 	set(OPENSSL_FOUND TRUE)
[-] else ()
[+] else()
[-] 	set (OPENSSL_FOUND FALSE)
[+] 	set(OPENSSL_FOUND FALSE)
[-] endif ()
[+] endif()
----------------------
27/02/2019 18:01:32 - C:\Projects\repos\ioninja\axl\cmake\import_pcap.cmake
----------------------
[-] if (NOT PCAP_INC_DIR)
[+] if(NOT PCAP_INC_DIR)
[-] 	axl_find_inc_dir (PCAP_INC_DIR pcap/pcap.h)
[+] 	axl_find_inc_dir(PCAP_INC_DIR pcap/pcap.h)
[-] endif ()
[+] endif()
[-] if (NOT PCAP_LIB_DIR)
[+] if(NOT PCAP_LIB_DIR)
[-] 	axl_find_lib_dir (PCAP_LIB_DIR pcap)
[+] 	axl_find_lib_dir(PCAP_LIB_DIR pcap)
[-] endif ()
[+] endif()
[-] if (EXISTS ${PCAP_INC_DIR}/pcap/pcap.h)
[+] if(EXISTS ${PCAP_INC_DIR}/pcap/pcap.h)
[-] 	axl_message ("Pcap paths:")
[+] 	axl_message("Pcap paths:")
[-] 	axl_message ("    Includes:"  "${PCAP_INC_DIR}")
[+] 	axl_message("    Includes:"  "${PCAP_INC_DIR}")
[-] 	axl_message ("    Libraries:" "${PCAP_LIB_DIR}")
[+] 	axl_message("    Libraries:" "${PCAP_LIB_DIR}")
[-] 	if (PCAP_DLL_DIR)
[+] 	if(PCAP_DLL_DIR)
[-] 		axl_message ("    DLLs:" "${PCAP_DLL_DIR}")
[+] 		axl_message("    DLLs:" "${PCAP_DLL_DIR}")
[-] 	endif ()
[+] 	endif()
[-] 	set (PCAP_FOUND TRUE)
[+] 	set(PCAP_FOUND TRUE)
[-] else ()
[+] else()
[-] 	set (PCAP_FOUND FALSE)
[+] 	set(PCAP_FOUND FALSE)
[-] endif ()
[+] endif()
----------------------
27/02/2019 18:01:32 - C:\Projects\repos\ioninja\axl\cmake\import_perl.cmake
----------------------
[-] if (NOT PERL_EXE)
[+] if(NOT PERL_EXE)
[-] 	axl_find_executable (PERL_EXE perl)
[+] 	axl_find_executable(PERL_EXE perl)
[-] 	if (PERL_EXE)
[+] 	if(PERL_EXE)
[-] 		axl_message ("Perl found at:" "${PERL_EXE}")
[+] 		axl_message("Perl found at:" "${PERL_EXE}")
[-] 	endif ()
[+] 	endif()
[-] endif ()
[+] endif()
[-] if (EXISTS ${PERL_EXE})
[+] if(EXISTS ${PERL_EXE})
[-] 	set (PERL_FOUND TRUE)
[+] 	set(PERL_FOUND TRUE)
[-] else ()
[+] else()
[-] 	set (PERL_FOUND FALSE)
[+] 	set(PERL_FOUND FALSE)
[-] endif ()
[+] endif()
[-] macro (
[+] macro(
[-] 	if (NOT PERL_FOUND)
[+] 	if(NOT PERL_FOUND)
[-] 		message (FATAL_ERROR "Perl is required for add_perl_step () macro")
[+] 		message(FATAL_ERROR "Perl is required for add_perl_step() macro")
[-] 	endif ()
[+] 	endif()
[-] 	set (_SWITCH_LIST ${ARGN})
[+] 	set(_SWITCH_LIST ${ARGN})
[-] 	axl_make_path (_OUTPUT_PATH ${_OUTPUT_FILE} ${CMAKE_CURRENT_BINARY_DIR})
[+] 	axl_make_path(_OUTPUT_PATH ${_OUTPUT_FILE} ${CMAKE_CURRENT_BINARY_DIR})
[-] 	axl_make_path (_INPUT_PATH ${_INPUT_FILE} ${CMAKE_CURRENT_SOURCE_DIR})
[+] 	axl_make_path(_INPUT_PATH ${_INPUT_FILE} ${CMAKE_CURRENT_SOURCE_DIR})
[-] 	axl_make_path (_SCRIPT_PATH ${_SCRIPT_FILE} ${CMAKE_CURRENT_SOURCE_DIR})
[+] 	axl_make_path(_SCRIPT_PATH ${_SCRIPT_FILE} ${CMAKE_CURRENT_SOURCE_DIR})
[-] 	add_custom_command (
[+] 	add_custom_command(
[-] endmacro ()
[+] endmacro()
----------------------
27/02/2019 18:01:32 - C:\Projects\repos\ioninja\axl\cmake\import_qt.cmake
----------------------
[-] unset (Qt5Core_DIR    CACHE)
[+] unset(Qt5Core_DIR    CACHE)
[-] unset (Qt5Gui_DIR     CACHE)
[+] unset(Qt5Gui_DIR     CACHE)
[-] unset (Qt5Widgets_DIR CACHE)
[+] unset(Qt5Widgets_DIR CACHE)
[-] unset (Qt5Network_DIR CACHE)
[+] unset(Qt5Network_DIR CACHE)
[-] set (QT_FOUND FALSE)
[+] set(QT_FOUND FALSE)
[-] set (QTCORE_FOUND FALSE)
[+] set(QTCORE_FOUND FALSE)
[-] set (QTGUI_FOUND FALSE)
[+] set(QTGUI_FOUND FALSE)
[-] set (QTWIDGETS_FOUND FALSE)
[+] set(QTWIDGETS_FOUND FALSE)
[-] set (QTNETWORK_FOUND FALSE)
[+] set(QTNETWORK_FOUND FALSE)
[-] if (NOT QT_CMAKE_DIR)
[+] if(NOT QT_CMAKE_DIR)
[-] 	find_package (Qt5Core QUIET)
[+] 	find_package(Qt5Core QUIET)
[-] 	if (Qt5Core_FOUND)
[+] 	if(Qt5Core_FOUND)
[-] 	 	set (QT_FOUND TRUE)
[+] 	 	set(QT_FOUND TRUE)
[-] 		set (QTCORE_FOUND TRUE)
[+] 		set(QTCORE_FOUND TRUE)
[-] 		set (QTCORE_CMAKE_DIR ${Qt5Core_DIR})
[+] 		set(QTCORE_CMAKE_DIR ${Qt5Core_DIR})
[-] 	endif ()
[+] 	endif()
[-] 	find_package (Qt5Gui QUIET)
[+] 	find_package(Qt5Gui QUIET)
[-] 	if (Qt5Gui_FOUND)
[+] 	if(Qt5Gui_FOUND)
[-] 		set (QTGUI_FOUND TRUE)
[+] 		set(QTGUI_FOUND TRUE)
[-] 		set (QTGUI_CMAKE_DIR ${Qt5Gui_DIR})
[+] 		set(QTGUI_CMAKE_DIR ${Qt5Gui_DIR})
[-] 	endif ()
[+] 	endif()
[-] 	find_package (Qt5Widgets QUIET)
[+] 	find_package(Qt5Widgets QUIET)
[-] 	if (Qt5Widgets_FOUND)
[+] 	if(Qt5Widgets_FOUND)
[-] 		set (QTWIDGETS_FOUND TRUE)
[+] 		set(QTWIDGETS_FOUND TRUE)
[-] 		set (QTWIDGETS_CMAKE_DIR ${Qt5Widgets_DIR})
[+] 		set(QTWIDGETS_CMAKE_DIR ${Qt5Widgets_DIR})
[-] 	endif ()
[+] 	endif()
[-] 	find_package (Qt5Network QUIET)
[+] 	find_package(Qt5Network QUIET)
[-] 	if (Qt5Network_FOUND)
[+] 	if(Qt5Network_FOUND)
[-] 		set (QTNETWORK_FOUND TRUE)
[+] 		set(QTNETWORK_FOUND TRUE)
[-] 		set (QTNETWORK_CMAKE_DIR ${Qt5Network_DIR})
[+] 		set(QTNETWORK_CMAKE_DIR ${Qt5Network_DIR})
[-] 	endif ()
[+] 	endif()
[-] else ()
[+] else()
[-] 	if (EXISTS ${QT_CMAKE_DIR}/Qt5Core/Qt5CoreConfig.cmake)
[+] 	if(EXISTS ${QT_CMAKE_DIR}/Qt5Core/Qt5CoreConfig.cmake)
[-] 		include ("${QT_CMAKE_DIR}/Qt5Core/Qt5CoreConfig.cmake")
[+] 		include("${QT_CMAKE_DIR}/Qt5Core/Qt5CoreConfig.cmake")
[-] 	 	set (QT_FOUND TRUE)
[+] 	 	set(QT_FOUND TRUE)
[-] 		set (QTCORE_FOUND TRUE)
[+] 		set(QTCORE_FOUND TRUE)
[-] 		set (QTCORE_CMAKE_DIR ${QT_CMAKE_DIR}/Qt5Core)
[+] 		set(QTCORE_CMAKE_DIR ${QT_CMAKE_DIR}/Qt5Core)
[-] 	endif ()
[+] 	endif()
[-] 	if (EXISTS ${QT_CMAKE_DIR}/Qt5Gui/Qt5GuiConfig.cmake)
[+] 	if(EXISTS ${QT_CMAKE_DIR}/Qt5Gui/Qt5GuiConfig.cmake)
[-] 		include ("${QT_CMAKE_DIR}/Qt5Gui/Qt5GuiConfig.cmake")
[+] 		include("${QT_CMAKE_DIR}/Qt5Gui/Qt5GuiConfig.cmake")
[-] 		set (QTGUI_FOUND TRUE)
[+] 		set(QTGUI_FOUND TRUE)
[-] 		set (QTGUI_CMAKE_DIR ${QT_CMAKE_DIR}/Qt5Gui)
[+] 		set(QTGUI_CMAKE_DIR ${QT_CMAKE_DIR}/Qt5Gui)
[-] 	endif ()
[+] 	endif()
[-] 	if (EXISTS ${QT_CMAKE_DIR}/Qt5Widgets/Qt5WidgetsConfig.cmake)
[+] 	if(EXISTS ${QT_CMAKE_DIR}/Qt5Widgets/Qt5WidgetsConfig.cmake)
[-] 		include ("${QT_CMAKE_DIR}/Qt5Widgets/Qt5WidgetsConfig.cmake")
[+] 		include("${QT_CMAKE_DIR}/Qt5Widgets/Qt5WidgetsConfig.cmake")
[-] 		set (QTWIDGETS_FOUND TRUE)
[+] 		set(QTWIDGETS_FOUND TRUE)
[-] 		set (QTWIDGETS_CMAKE_DIR ${QT_CMAKE_DIR}/Qt5Widgets)
[+] 		set(QTWIDGETS_CMAKE_DIR ${QT_CMAKE_DIR}/Qt5Widgets)
[-] 	endif ()
[+] 	endif()
[-] 	if (EXISTS ${QT_CMAKE_DIR}/Qt5Network/Qt5NetworkConfig.cmake)
[+] 	if(EXISTS ${QT_CMAKE_DIR}/Qt5Network/Qt5NetworkConfig.cmake)
[-] 		include ("${QT_CMAKE_DIR}/Qt5Network/Qt5NetworkConfig.cmake")
[+] 		include("${QT_CMAKE_DIR}/Qt5Network/Qt5NetworkConfig.cmake")
[-] 		set (QTNETWORK_FOUND TRUE)
[+] 		set(QTNETWORK_FOUND TRUE)
[-] 		set (QTNETWORK_CMAKE_DIR ${QT_CMAKE_DIR}/Qt5Network)
[+] 		set(QTNETWORK_CMAKE_DIR ${QT_CMAKE_DIR}/Qt5Network)
[-] 	endif ()
[+] 	endif()
[-] endif ()
[+] endif()
[-] if (QT_FOUND)
[+] if(QT_FOUND)
[-] 	axl_message ("QT ${Qt5Core_VERSION_STRING} paths:")
[+] 	axl_message("QT ${Qt5Core_VERSION_STRING} paths:")
[-] 	axl_message ("    Core CMake files:" "${QTCORE_CMAKE_DIR}")
[+] 	axl_message("    Core CMake files:" "${QTCORE_CMAKE_DIR}")
[-] 	if (QTGUI_FOUND)
[+] 	if(QTGUI_FOUND)
[-] 		axl_message ("    Gui CMake files:" "${QTGUI_CMAKE_DIR}")
[+] 		axl_message("    Gui CMake files:" "${QTGUI_CMAKE_DIR}")
[-] 	endif ()
[+] 	endif()
[-] 	if (QTWIDGETS_FOUND)
[+] 	if(QTWIDGETS_FOUND)
[-] 		axl_message ("    Widgets CMake files:" "${QTWIDGETS_CMAKE_DIR}")
[+] 		axl_message("    Widgets CMake files:" "${QTWIDGETS_CMAKE_DIR}")
[-] 	endif ()
[+] 	endif()
[-] 	if (QTNETWORK_FOUND)
[+] 	if(QTNETWORK_FOUND)
[-] 		axl_message ("    Network CMake files:" "${QTNETWORK_CMAKE_DIR}")
[+] 		axl_message("    Network CMake files:" "${QTNETWORK_CMAKE_DIR}")
[-] 	endif ()
[+] 	endif()
[-] 	if (QT_DLL_DIR)
[+] 	if(QT_DLL_DIR)
[-] 		axl_message ("    DLLs:" "${QT_DLL_DIR}")
[+] 		axl_message("    DLLs:" "${QT_DLL_DIR}")
[-] 	endif ()
[+] 	endif()
[-] endif ()
[+] endif()
[-] macro (
[+] macro(
[-] 	set (${_MOC_CPP_LIST}) # clear list
[+] 	set(${_MOC_CPP_LIST}) # clear list
[-] 	set (_H_LIST ${ARGN})
[+] 	set(_H_LIST ${ARGN})
[-] 	foreach (_H_PATH ${_H_LIST})
[+] 	foreach(_H_PATH ${_H_LIST})
[-] 		get_filename_component (_H_NAME ${_H_PATH} NAME_WE)
[+] 		get_filename_component(_H_NAME ${_H_PATH} NAME_WE)
[-] 		get_filename_component (_H_EXT ${_H_PATH} EXT)
[+] 		get_filename_component(_H_EXT ${_H_PATH} EXT)
[-] 		string (COMPARE EQUAL ${_H_EXT} ".cpp" _IS_CPP)
[+] 		string(COMPARE EQUAL ${_H_EXT} ".cpp" _IS_CPP)
[-] 		if (${_IS_CPP})
[+] 		if(${_IS_CPP})
[-] 			set (_MOC_CPP_PATH ${CMAKE_CURRENT_BINARY_DIR}/${_H_NAME}.moc)
[+] 			set(_MOC_CPP_PATH ${CMAKE_CURRENT_BINARY_DIR}/${_H_NAME}.moc)
[-] 		else ()
[+] 		else()
[-] 			set (_MOC_CPP_PATH ${CMAKE_CURRENT_BINARY_DIR}/moc_${_H_NAME}.cpp)
[+] 			set(_MOC_CPP_PATH ${CMAKE_CURRENT_BINARY_DIR}/moc_${_H_NAME}.cpp)
[-] 		endif ()
[+] 		endif()
[-] 		qt5_generate_moc (${_H_PATH} ${_MOC_CPP_PATH})
[+] 		qt5_generate_moc(${_H_PATH} ${_MOC_CPP_PATH})
[-] 		list (APPEND ${_MOC_CPP_LIST} ${_MOC_CPP_PATH})
[+] 		list(APPEND ${_MOC_CPP_LIST} ${_MOC_CPP_PATH})
[-] 	endforeach ()
[+] 	endforeach()
[-] endmacro ()
[+] endmacro()
[-] macro (
[+] macro(
[-] 	if (NOT QT_FOUND)
[+] 	if(NOT QT_FOUND)
[-] 		message (FATAL_ERROR "QT is required for add_qt_rpath_link () macro")
[+] 		message(FATAL_ERROR "QT is required for add_qt_rpath_link() macro")
[-] 	endif ()
[+] 	endif()
[-] 	if (NOT UNIX OR APPLE)
[+] 	if(NOT UNIX OR APPLE)
[-] 		message (FATAL_ERROR "add_qt_rpath_link should only be used on Unix")
[+] 		message(FATAL_ERROR "add_qt_rpath_link should only be used on Unix")
[-] 	endif ()
[+] 	endif()
[-] 	if (NOT "${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
[+] 	if(NOT "${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
[-] 		set (
[+] 		set(
[-] 	endif ()
[+] 	endif()
[-] endmacro ()
[+] endmacro()
----------------------
27/02/2019 18:01:32 - C:\Projects\repos\ioninja\axl\cmake\import_ragel.cmake
----------------------
[-] if (NOT RAGEL_EXE)
[+] if(NOT RAGEL_EXE)
[-] 	axl_find_executable (RAGEL_EXE ragel)
[+] 	axl_find_executable(RAGEL_EXE ragel)
[-] 	if (RAGEL_EXE)
[+] 	if(RAGEL_EXE)
[-] 		axl_message ("Ragel found at:" "${RAGEL_EXE}")
[+] 		axl_message("Ragel found at:" "${RAGEL_EXE}")
[-] 	endif ()
[+] 	endif()
[-] endif ()
[+] endif()
[-] if (EXISTS ${RAGEL_EXE})
[+] if(EXISTS ${RAGEL_EXE})
[-] 	set (RAGEL_FOUND TRUE)
[+] 	set(RAGEL_FOUND TRUE)
[-] else ()
[+] else()
[-] 	set (RAGEL_FOUND FALSE)
[+] 	set(RAGEL_FOUND FALSE)
[-] endif ()
[+] endif()
[-] macro (
[+] macro(
[-] 	if (NOT RAGEL_FOUND)
[+] 	if(NOT RAGEL_FOUND)
[-] 		message (FATAL_ERROR "Ragel is required for add_ragel_step () macro")
[+] 		message(FATAL_ERROR "Ragel is required for add_ragel_step() macro")
[-] 	endif ()
[+] 	endif()
[-] 	axl_make_path (_OUTPUT_PATH ${_OUTPUT_FILE} ${CMAKE_CURRENT_BINARY_DIR})
[+] 	axl_make_path(_OUTPUT_PATH ${_OUTPUT_FILE} ${CMAKE_CURRENT_BINARY_DIR})
[-] 	axl_make_path (_INPUT_PATH ${_INPUT_FILE} ${CMAKE_CURRENT_SOURCE_DIR})
[+] 	axl_make_path(_INPUT_PATH ${_INPUT_FILE} ${CMAKE_CURRENT_SOURCE_DIR})
[-] 	add_custom_command (
[+] 	add_custom_command(
[-] endmacro ()
[+] endmacro()
----------------------
27/02/2019 18:01:32 - C:\Projects\repos\ioninja\axl\cmake\import_sphinx.cmake
----------------------
[-] if (NOT SPHINX_BUILD_EXE)
[+] if(NOT SPHINX_BUILD_EXE)
[-] 	axl_find_executable (SPHINX_BUILD_EXE sphinx-build)
[+] 	axl_find_executable(SPHINX_BUILD_EXE sphinx-build)
[-] 	if (SPHINX_BUILD_EXE)
[+] 	if(SPHINX_BUILD_EXE)
[-] 		axl_message ("Sphinx found at:" "${SPHINX_BUILD_EXE}")
[+] 		axl_message("Sphinx found at:" "${SPHINX_BUILD_EXE}")
[-] 	endif ()
[+] 	endif()
[-] endif ()
[+] endif()
[-] if (EXISTS ${SPHINX_BUILD_EXE})
[+] if(EXISTS ${SPHINX_BUILD_EXE})
[-] 	set (SPHINX_FOUND TRUE)
[+] 	set(SPHINX_FOUND TRUE)
[-] else ()
[+] else()
[-] 	set (SPHINX_FOUND FALSE)
[+] 	set(SPHINX_FOUND FALSE)
[-] endif ()
[+] endif()
----------------------
27/02/2019 18:01:33 - C:\Projects\repos\ioninja\axl\cmake\import_wdk.cmake
----------------------
[-] if (EXISTS ${WDK_DDK_INC_DIR}/ntddk.h)
[+] if(EXISTS ${WDK_DDK_INC_DIR}/ntddk.h)
[-] 	axl_message ("WDK paths:")
[+] 	axl_message("WDK paths:")
[-] 	axl_message ("    WDK root:"      "${WDK_ROOT_DIR}")
[+] 	axl_message("    WDK root:"      "${WDK_ROOT_DIR}")
[-] 	axl_message ("    WDK binaries:"  "${WDK_BIN_DIR}")
[+] 	axl_message("    WDK binaries:"  "${WDK_BIN_DIR}")
[-] 	axl_message ("    CRT includes:"  "${WDK_CRT_INC_DIR}")
[+] 	axl_message("    CRT includes:"  "${WDK_CRT_INC_DIR}")
[-] 	axl_message ("    SDK includes:"  "${WDK_SDK_INC_DIR}")
[+] 	axl_message("    SDK includes:"  "${WDK_SDK_INC_DIR}")
[-] 	axl_message ("    DDK includes:"  "${WDK_DDK_INC_DIR}")
[+] 	axl_message("    DDK includes:"  "${WDK_DDK_INC_DIR}")
[-] 	axl_message ("    CRT libraries:" "${WDK_CRT_LIB_DIR}")
[+] 	axl_message("    CRT libraries:" "${WDK_CRT_LIB_DIR}")
[-] 	axl_message ("    DDK libraries:" "${WDK_DDK_LIB_DIR}")
[+] 	axl_message("    DDK libraries:" "${WDK_DDK_LIB_DIR}")
[-] 	set (WDK_FOUND TRUE)
[+] 	set(WDK_FOUND TRUE)
[-] else ()
[+] else()
[-] 	set (WDK_FOUND FALSE)
[+] 	set(WDK_FOUND FALSE)
[-] endif ()
[+] endif()
----------------------
27/02/2019 18:01:33 - C:\Projects\repos\ioninja\axl\cmake\import_wix.cmake
----------------------
[-] if (EXISTS ${WIX_BIN_DIR}/candle.exe)
[+] if(EXISTS ${WIX_BIN_DIR}/candle.exe)
[-] 	set (WIX_FOUND TRUE)
[+] 	set(WIX_FOUND TRUE)
[-] else ()
[+] else()
[-] 	set (WIX_FOUND FALSE)
[+] 	set(WIX_FOUND FALSE)
[-] endif ()
[+] endif()
