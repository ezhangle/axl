//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

/*

int bindable Red;
int bindable Green;
int bindable Blue;

Purple (int r, int b)
{
	printf ("Purple (%d, %d)\n", r, b);
}

Yellow (int r, int g)
{
	printf ("Yellow (%d, %d)\n", r, g);
}

Cyan (int g, int b)
{
	printf ("Cyan (%d, %d)\n", g, b);
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

class CMyClass
{
	int m_x;

	autoev ColorAutoEv (int x)
	{
		onchange (Green) 
			for (int i = 0; i < x; i++)
				printf ("Green = %d; x = %d, m_x = %d\n", Green, x, m_x);

		Purple (Red + m_x, Blue + x);
		Yellow (Red + m_x, Green + x);
		Cyan (Green + m_x, Blue + x);	
	}
};

*/

/*

autoev class CColorAutoEv (int x)
{
	onchange (Green) 
		for (int i = 0; i < x; i++)
			printf ("Green = %d; x = %d, m_x = %d\n", Green, x, x);

	Purple (Red + x, Blue + x);
	Yellow (Red + x, Green + x);
	Cyan (Green + x, Blue + x);	
};

*/

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

int bindable Red;

foo ()
{
	printf ("foo ()\n");
}

bar ()
{
	printf ("bar ()\n");
}

bzz ()
{
	printf ("bzz ()\n");
}

int 
main ()
{
	printf ("jancy autoev test\n");

/*	CMyClass c = stack new CMyClass;
	c.m_x = 1;
	c.ColorAutoEv (5);

//	stack new CColorAutoEv (5);

	Red = 10;
	Green = 200;
	Blue = 3000;
*/

	intptr h1 = Red.onchange.Add (foo);
	intptr h2 = Red.onchange.Add (bar);
	intptr h3 = Red.onchange.Add (bzz);

	Red = 100;

	printf ("removing 2 handlers...\n");

	Red.onchange.Remove (h1); 
	Red.onchange.Remove (h3);

	Red = 200;

	return 0;
}
 
//.............................................................................

int
printf (
	unsafe const char* pFormat,
	unsafe ...
	);

//.............................................................................
