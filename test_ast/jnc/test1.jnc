//.............................................................................

typedef unsigned int8  uint8_t,  uchar_t,  byte_t;
typedef unsigned int16 uint16_t, ushort_t, word_t;
typedef unsigned int32 uint32_t, ulong_t,  dword_t;
typedef unsigned int64 uint64_t, qword_t;
typedef bigendian int16 beint16_t;
typedef bigendian int32 beint32_t;
typedef bigendian int64 beint64_t;
typedef bigendian unsigned int16 beuint16_t, beushort_t, beword_t;
typedef bigendian unsigned int32 beuint32_t, beulong_t,  bedword_t;
typedef bigendian unsigned int64 beuint64_t, beqword_t;

typedef unsigned int32 size_t;

typedef const char* unsafe pchar_t;
typedef const char* pchar2_t;

//.............................................................................

void
printf (
	char* unsafe pFormat,
	unsafe ...
	);

//.............................................................................

int
cdecl
CallConvTestA (
	int a,
	int b, 
	int c
	);

int
cdecl
CallConvTestB (
	int a,
	int b, 
	int c
	);

int
stdcall
CallConvTestC (
	int a,
	int b, 
	int c
	);

int
stdcall
CallConvTestD (
	int a,
	int b, 
	int c
	);

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

typedef 
int
FTest (
	int a,
	int b, 
	int c
	);

typedef 
int
cdecl
FTest_cdecl (
	int a,
	int b, 
	int c
	);

typedef 
int
stdcall
FTest_stdcall (
	int a,
	int b, 
	int c
	);

//.............................................................................

/*

struct TPoint
{
	int m_x;
	int m_y;
};

int* g_p;

interface IFoo
{
	int m_a;
	int m_b;

	int property FooProp;

	int
	FooTest (
		int x,
		int y
		);
};


class CTest: IFoo
{
	int m_c;
	int m_d;	

	int
	FooTest (
		int x,
		int y
		)
	{
		printf ("CTest { %d; %d; %d; %d; }.FooTest (%d, %d);\n", m_a, m_b, m_c, m_d, x, y);
		return 0;
	}

	int 
	FooProp.get ()
	{
		printf ("CTest.FooProp::get ()\n");
		return m_a;
	}	

	void
	FooProp.set (int x)
	{
		printf ("CTest.FooProp::set (%d)\n", x);
		m_a = x;
		return;
	}
};

*/

int 
GlobalProp.get ()
{
	printf ("GlobalProp::get ()\n");
	return 20;
}

void
GlobalProp.set (int x)
{
	printf ("GlobalProp::set (%d)\n", x);
	return;
}

typedef int property PTest;

int property GlobalProp;

int
main ()
{
	printf ("main yo\n");

/*	int x = 1;
	switch (x)
	{
	case 1:
		printf ("hui\n");
		break;

	case 2:
		printf ("govno\n");
		break;

	case 3:
		printf ("muravei\n");
		break;
	
	default:
		printf ("kusty\n");
		break;
	} */

	int x = 1;

	int& unsafe rx;
	rx := x;

	printf ("x = %d, rx = %d\n", x, rx);

	x = 3;

	printf ("x = %d, rx = %d\n", x, rx);

	rx = 15;

	printf ("x = %d, rx = %d\n", x, rx);
	

//	PTest ppr;
//	ppr := GlobalProp;

	x = GlobalProp;
	printf ("GlobalProp returned %d\n", x);
	GlobalProp = 30;

//	PTest pprValue;

/*
	CTest t = stack new CTest;

	t.m_a = 100;
	t.m_b = 200;
	t.m_c = 300;
	t.m_d = 400;

	x = t.FooProp;
	printf ("t.FooProp returned %d\n", x);
	t.FooProp = -100;

	t.FooTest (10, 20);
	t.BarTest (30, 40); 

	IFoo f = t;
	f.m_a = 101;
	f.FooTest (50, 60);

	IBar b = t;
	b.m_b = 201;
	b.BarTest (70, 80);
*/
	return 0;
}

//.............................................................................

