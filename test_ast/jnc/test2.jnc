//.............................................................................

namespace jnc.io 
{
	enum EColor
	{
		Red = 1,
		Green = COLOR_GREEN,
		Blue = RGB(0, 0, 255),
	};

	enumc EPublicColor
	{
		PublicRed,
		PublicGreen,
		PublicBlue,
	};

	typedef unsigned char uchar_t;
	typedef unsigned short ushort_t;

	int* p;

	char a [20];

	void
	InitializeIo (int x);

	void
	InitializeIo (double f);

	void
	InitializeIo (
		int a,
		unsigned int b,
		bigendian int c
		);

	bool const property MyProperty;

	property
	{
		int
		get ();

		void
		set (int i);

		void
		set (double d);

		void 
		set (void* p);
	} OverloadedProperty;

	property
	{
		double
		get (unsigned int Index);

		void
		set (
			unsigned int Index,
			int Value
			);

		void
		set (
			unsigned int Index,
			double Value
			);
	} IndexedProperty;

	property
	{
		void*
		get (unsigned int Index);
	} IndexedReadOnlyProperty;

	bool IsIoInitialized;	

	[
		Singleton,
		Description = "IFile interface",
		Integer = RGB (255, 128, 64),
	]
	interface IFile 
	{
		bool 
		Open (
			const char* pName, 
			int Mode
			);

		void
		Close ();

		const bool property IsOpen;

		unsigned long 
		Read (
			void* p,
			unsigned long Size
			);

		unsigned long 
		Write (
			const void* p,
			unsigned long Size
			);
	};

	[
		Description = "TPoint struct",
		Integer = 20,	
		Unique,
	]
	struct TPointT <T>
	{
		T x;
		T y;
		T z;
	};

	interface ISocket
	{
		bool 
		Connect (
			unsigned long Ip,
			unsigned short Port 
			);

		void
		Disconnect ();

		const bool property IsConnected;
		
		void
		Reset ();

		unsigned long 
		Send (
			const void* p,
			unsigned long Size
			);

		unsigned long 
		Recv (
			void* p,
			unsigned long Size
			);
	};

	class CFile: IFile
	{
		typedef unsigned int THandle;
	};

	class CSocket: ISocket
	{
	};
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

namespace jnc.rtl
{
	typedef unsigned bigendian long ulong_t;

	char* p2;

	long* b [] [20];

	void
	InitializeRtl ();

	bool IsRtlInitialized;	

	interface IString
	{
	};

	class CString: IString
	{
	};

	interface IArrayT <T>
	{
		const bool property IsEmpty;

		const int property Count;

		void
		Append ();

		void
		Insert ();

		void
		Delete ();
	};

	class CArrayT <T>: IArrayT <T>
	{
	};

	interface IListT <T>
	{
		const bool property IsEmpty;

		const int property Count;

		void
		Insert ();

		void
		InsertHead ();

		void
		InsertTail ();

		void
		Delete ();
	};

	class CListT <T>: IListT <T>
	{
	};
}

//.............................................................................

namespace gdi
{
	const property int ScreenWidth;
	const int property ScreenHeight;	
}

//.............................................................................


typedef unsigned int8  uint8_t,  uchar_t,  byte_t;
typedef unsigned int16 uint16_t, ushort_t, word_t;
typedef unsigned int32 uint32_t, ulong_t,  dword_t;
typedef unsigned int64 uint64_t, qword_t;
typedef bigendian int16 beint16_t;
typedef bigendian int32 beint32_t;
typedef bigendian int64 beint64_t;
typedef bigendian unsigned int16 beuint16_t, beushort_t, beword_t;
typedef bigendian unsigned int32 beuint32_t, beulong_t,  bedword_t;
typedef bigendian unsigned int64 beuint64_t, beqword_t;

typedef unsigned int32 size_t;

typedef const char* unsafe pchar_t;
typedef const char* pchar2_t;



//.............................................................................

int
main ()
{	
	TStruct s;
	s.m_a = 10;
	s.m_b = 20;
	s.m_c = 30;

	StructTest (&s, sizeof (TStruct));

	size_t i;
	for (i = 0; i < 10; i++)
	{
		printf ("i = %d\n", i);
			
		if (i > 5)
			break;
	}

	return 1;
}

int 
ReadInteger ();

int 
StructTest (
	TStruct* unsafe pStruct,
	unsigned int32 Size
	);

void
printf (
	char* unsafe pFormat,
	...
	);

struct pack (4) TStruct
{
	int8 m_a;
	int64 m_b;
	int8 m_c;
};

//.............................................................................
